---
defaultNamespace: yacht-tekton

enableTasks: false
enableExtraTasks: false
#extraTasks: {}
enableSecrets: false
enableGitSecretsBasicAuth: false
enableGitSecretsSSH: false
enableRegistryCredentials: false
enableWorkspaces: false
enablePipelines: false
enableRuns: false
enableWorkspaces: false
enableExtraPipelines: false
#extraPipelines: {}

#workspaces: {}

# runs:
#   buildKanikosthings-alpine-230305-0403:
#     name: kaniko-sthings-alpine-230305-0403
#     addRandomDateToRunName: false
#     namespace: yacht-tekton
#     kind: Pipeline
#     ref: build-kaniko-image
#     params:
#       image: scr.tiab.labda.sva.de/sthings-alpine/sthings-alpine/sthings-alpine/sthings-alpine
#       tag: 230305-0403
#       gitWorkspaceSubdirectory: /kaniko/sthings-alpine
#       git-revision: master
#       registry: scr.tiab.labda.sva.de
#       gitRepoUrl: git@codehub.sva.de:Lab/stuttgart-things/stuttgart-things.git
#       dockerfile: build/images/sthings-alpine/Dockerfile
#       context: /kaniko/sthings-alpine
#     workspaces:
#       ssh-credentials:
#         workspaceKind: secret
#         workspaceRef: codehub-ssh
#       shared-workspace:
#         workspaceKind: persistentVolumeClaim
#         workspaceRef: tekton-kaniko-workspace
#       dockerconfig:
#         workspaceKind: secret
#         workspaceRef: scr-labda
runs:
  packagesthings-cluster-0.2.1HelmChart:
    name: helm-sthings-cluster-0.2.1
    addRandomDateToRunName: false
    namespace: yacht-tekton
    kind: Pipeline
    ref: package-publish-helmchart
    params:
      git-repo-url: git@codehub.sva.de:Lab/stuttgart-things/stuttgart-things.git
      git-revision: master
      gitWorkspaceSubdirectory: /helm/sthings-cluster
      helm-chart-path: gitops/apps
      helm-chart-name: sthings-cluster
      helm-chart-tag: 0.2.1
      registry: scr.tiab.labda.sva.de
      working-image: scr.tiab.labda.sva.de/sthings-k8s-workspace/sthings-k8s-workspace:281126-1644
    workspaces:
      ssh-credentials:
        workspaceKind: secret
        workspaceRef: codehub-ssh
      source:
        workspaceKind: persistentVolumeClaim
        workspaceRef: tekton-kaniko-workspace
      dockerconfig:
        workspaceKind: secret
        workspaceRef: scr-labda

workspaces:
 sthings-kaniko-workspace:
   volumeMode: Filesystem
   namespace: yacht-tekton
   storageClassName: nfs4-csi
   storage: 5Gi
   accessModes:
     - ReadWriteOnce

secrets:
  # gitlab-pipeline-token:
  #   name: gitlab-pipeline-token
  #   labels:
  #     app: sthings-tekton
  #   secretKVs:
  #     token: <path:git/data/codehub#sthings_pipeline_token>
  msteams:
    name: msteams
    namespace: yacht-tekton
    labels:
      app: sthings-tekton
    secretKVs:
      #url: <path:apps/data/tekton#ms_teams_webhookurl>
      url: https://365sva.webhook.office.com/webhookb2/2f14a9f8-4736-46dd-9c8c-31547ec37180@0a65cb1e-37d5-41ff-980a-647d9d0e4f0b/IncomingWebhook/37a805a0a2624dc2ac1aedd7dec6ad49/dc3a27ed-396c-40b7-a9b2-f1a2b6b44efe
registryCredentials:
  scr-labda:
    labels:
      app: yacht-teton
    namespace: yacht-tekton
    #dockerConfigJson: <path:harbor/data/scr#dockerConfigJson>
    dockerConfigJson: eyJhdXRocyI6IHsic2NyLnRpYWIubGFiZGEuc3ZhLmRlIjogeyJ1c2VybmFtZSI6ICJzdGhpbmdzIiwgInBhc3N3b3JkIjogIkF0bGFuN2lzIiwgImF1dGgiOiAiYzNSb2FXNW5jenBCZEd4aGJqZHBjdz09In19fQ==
  scr-labda:
    labels:
      app: yacht-teton
    namespace: yacht-tekton
    #dockerConfigJson: <path:harbor/data/scr#dockerConfigJson>
    dockerConfigJson: eyJhdXRocyI6IHsic2NyLnRpYWIubGFiZGEuc3ZhLmRlIjogeyJ1c2VybmFtZSI6ICJzdGhpbmdzIiwgInBhc3N3b3JkIjogIkF0bGFuN2lzIiwgImF1dGgiOiAiYzNSb2FXNW5jenBCZEd4aGJqZHBjdz09In19fQ==
  scr-app-labda:
    labels:
      app: yacht-teton
    namespace: yacht-tekton
    #dockerConfigJson: <path:harbor/data/scr#dockerConfigJson>
    dockerConfigJson: eyJhdXRocyI6IHsic2NyLmFwcC5zdGhpbmdzLnRpYWIuc3NjLnN2YS5kZSI6IHsidXNlcm5hbWUiOiAic3RoaW5ncyIsICJwYXNzd29yZCI6ICJBdGxhbjdpcyIsICJhdXRoIjogImMzUm9hVzVuY3pwQmRHeGhiamRwY3c9PSJ9fX19
  scr-app-labul:
    labels:
      app: yacht-teton
    namespace: yacht-tekton
    #dockerConfigJson: <path:harbor/data/scr#dockerConfigJson>
    dockerConfigJson: eyJhdXRocyI6IHsic2NyLmFwcC5zdGhpbmdzLXZzcGhlcmUubGFidWwuc3ZhLmRlIjogeyJ1c2VybmFtZSI6ICJzdGhpbmdzIiwgInBhc3N3b3JkIjogIkF0bGFuN2lzIiwgImF1dGgiOiAiYzNSb2FXNW5jenBCZEd4aGJqZHBjdz09In19fX0K

gitSecretsSSH:
  codehub:
    name: codehub-ssh
    namespace: yacht-tekton
    labels:
      app: yacht-tekton
    dataType: data
    secretKVs:
      #id_rsa: <path:ssh/data/sthings#private_key>
      id_rsa: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBckpROElsVHZ4TDFpMVZXTlU4S1hPeTRhL1pXaXo0THZvb2pycnpCSVBCT0laeEF4CjBUMmFYUSttSjV5V0xDNTFSMjR2R054RHcwTmxBMng1MzRIbUQydmVGeDNZUmtnckNGL3JRT2ZqeXhVaFlLTWcKclFPYUZuTjc2NXVmRVYrZzBGMyszejhyY01TQkVqNHlJQkE3OWdVemhIUHFaTkV0UFh0NDdiWmhiS3lzd2U3VApyclFkeFpMWEM1OFJnKytTWUFXdmY0dE01bjNISVJkbFRXWElHVVZ5ZVNZakJpb1dpZ2U2bWVnS0RFSlE1Z3I1ClpTMG5Rc1JpTWJ2NnJvZ1hCb1dpUVRKcVpFazNrYUxsTldGb05PY0JJOG9PT3c4Q2NzaERNNzJIdWl5QjhUZDgKd1Z6RXdjMUNpUXRiWVJqUXZjbWhYc3NLOC9vbWlKT3VrUm5JeXdJREFRQUJBb0lCQVFDSXlOVUF3U0ZwWmxJMwpsSjkzaS93aHcrRlFySkZtdC9rSGNrNmJoRUU4bko2NFVYV3F5cERXd2RpSC9PeHFDRWljWFJDbk82M1p6a2o1CjliaURGb29xSHV6Z2xaOGQxWVdHRmNCNHFWTTdXM3doQkNxWjl3amlVcFlkb0RMcnFrZmozeHhzQmIyQW03OVIKbmtwTWI1R1c1WGgzdXdoRThDWlRYTkgwVjJIUXA1Mmdha2U4djhsa2ZrUnBzQS83L1lUWVpub2JjaURobDJXKwp2anpucmhXN3YrdHU3OW5XaTRiTDcwbTQxTTcvdHdyR1lKeXdtNG5xeXJnTnA1RWU3Y0FTWDB4TmNGQ0x0L3dhCmhvRTN5N0pzLzdKT2pvQ1h2dWQ3NjVMSUp3M0doMkhUSktRcXhpZnl5RkpTWWpyMWF1YW9zU1V5TW0yM2JsYUEKMi9hNm84WEJBb0dCQU9YTVBCTW93RjArVTdhMjc0NzRBalQ5M3dTWjJWK2FSdVpwcjkrMmJvd0dJUHFUdlU3OQpZR1lRcXlkSS9oM2VJYjBxdTJMY3hPZVU1Z09ROHA0WXZJc1BzQnBaTmNFSHk5ZXgrREZnQm0rMDhlSDNZc28rCjkrb0pkT3NOTWQyMndjb2xLZ084TzhKaE9JMm91NWIvaUZWYUFDWjR5ek5yTnBDL3BlTWkrS28vQW9HQkFNQkIKeXYrNnlXcWlranZ1RXdRQlVGeXZHS2laMnh0ZW9CeW5uU29DeUxrMUQ3Rzl4T0w4THlYNEt5VThMcThxQ1ZlZQpQSWVWZnZKQXJCWUtmZy9lRWd3YUFaUFVTa09VZzFRdzM2eU1PN3ZIV1hlVDJ5VmJ5RDY0ZXVWbVFDdmw1bVloCms5ZjJtN3Q3bGt4RFNtRHlvSXhUWXVhM0N5aHQ3d0VtRlRsSDZZWjFBb0dBT2tzcC9pNDdSaXdXYm1aUHRQUGoKRTNCSFQ5SjdXdzQyNkNKdFZCSGlUekVLMHFZQnd2VHhyRktVS0Y0UzRKN0Y3a2ZWeTBsM3hjdDI0ZmEySlRiZgpOV09nWjc2enJTaitJOVJvd3BXNmJFSDVqam9FWEl2R3RoNzZBdHFSQ001Z3NKZm01Wld0anl5OGZPc04wMHMxCldYbUFTa0lnUWdYempKcWhTVkpJeEY4Q2dZQXhSeXZmREdOZi83ZDN3UGdDeU10dVZqcjl6Q0hMRENBQitEeGkKYmtCQXFJY1RTYzdUVjB4R2NTdXQ2WlVWdExLY1VLUzNJK3hiNzVPc09waEJQT3huU2FzcDF2b0tCR0Q5RFdIbgplakk5V1VWblR2Q1d6TVd3dmR4U1BEa3FoMHpjMUxKdVlubGNQcnN4WlBZRmoycnpUTlJHeXBnRGp0bjU4MmJ4ClBhdHZtUUtCZ0cwQmtJVGlIMmpUM3VrMHBrVm1wWXZLc3RhUlVGZGtZMS9rV3MzdzZXbVBId1ZpQkFrb21zU0oKMzF0TFJKWmovc1E0UElpRHdBcGRuL0Z0Rk1CRUFBNWcreW9QbU9pOTJmVHVkWTZ6L3YrYzRMbXV0M0JNajRoMwpxVmxJeGoyalgwaDIycmlwa2orODJBVXhHUXBGRm9zQUY3WTE2VUx2VmdCaXBqWC9nSjBrCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0t
# gitSecretsBasicAuth:
#   codehub-basicauth:
#     labels:
#       app: sthings-tekton
#     namespace: tekton-cicd
#     hostname: codehub.sva.de
#     username: <path:git/data/codehub#git_token_username>
#     password: <path:git/data/codehub#git_token_password>

pipelines:
  package-publish-helmchart:
    workspaces:
      - source
      - ssh-credentials
      - dockerconfig
    params:
      git-repo-url:
        description: source git repo
      git-revision:
        description: revision of source git repo
      gitWorkspaceSubdirectory:
        description: subdirectory on workspace
        default: ""
      helm-chart-path:
        description: directory to helm chart in repo, e.g. "helm"
      helm-chart-name:
        description: name of helm chart, e.g. "sthings-k8s-operator"
      helm-chart-tag:
        description: tag of helm chart, e.g. "0.1.0"
      registry:
        description: registry url, e.g. "scr.tiab.labda.sva.de"
      working-image:
        description: working image
    tasks:
      fetch-repository:
        task: git-clone
        workspaces:
          output:
            workspace: source
          ssh-directory:
            workspace: ssh-credentials
        params:
          url:
            value: $(params.git-repo-url)
          revision:
            value: $(params.git-revision)
          subdirectory:
            value: $(params.gitWorkspaceSubdirectory)
          deleteExisting:
            value: "'true'"
      build-package-helmchart:
        task: create-publish-helm-chart
        runAfter:
          - fetch-repository
        workspaces:
          source:
            workspace: source
          dockerconfig:
            workspace: dockerconfig
        params:
          PATH:
            value: $(params.helm-chart-path)
          CHARTNAME:
            value: $(params.helm-chart-name)
          CHARTTAG:
            value: $(params.helm-chart-tag)
          REGISTRY:
            value: $(params.registry)
          IMAGE:
            value: $(params.working-image)
          SUBDIRECTORY:
            value: $(params.gitWorkspaceSubdirectory)
      send-webhook-msteams:
        task: send-msteams-webhook
        runAfter:
          - build-package-helmchart
        params:
          message:
            value: "helm chart $(params.helm-chart-name):$(params.helm-chart-tag) packaged & pushed successfully to oci://$(params.registry)/$(params.helm-chart-name)/"
          webhook-url-secret:
            value: msteams
          webhook-url-secret-key:
            value: url
  build-kaniko-image:
    workspaces:
      - shared-workspace
      - ssh-credentials
      - dockerconfig
    params:
      image:
        description: reference of the image to build
      tag:
        description: reference of the tag of the image to build
      registry:
        description: registry FROM (base image)
      gitRepoUrl:
        description: source git repo
      gitWorkspaceSubdirectory:
        description: subdirectory on workspace
        default: ""
      git-revision:
        description: revision of source git repo
        default: "main"
      context:
        description: path to context
      dockerfile:
        description: path to dockerfile
    tasks:
      fetch-repository:
        task: git-clone
        workspaces:
          output:
            workspace: shared-workspace
          ssh-directory:
            workspace: ssh-credentials
        params:
          url:
            value: $(params.gitRepoUrl)
          subdirectory:
            value: $(params.gitWorkspaceSubdirectory)
          deleteExisting:
            value: "'true'"
          revision:
            value: $(params.git-revision)
      kaniko:
        task: kaniko
        runAfter:
          - fetch-repository
        workspaces:
          source:
            workspace: shared-workspace
          dockerconfig:
            workspace: dockerconfig
        params:
          SUBDIRECTORY:
            value: $(params.gitWorkspaceSubdirectory)
          IMAGE:
            value: $(params.image)
          TAG:
            value: $(params.tag)
          REGISTRY:
            value: $(params.registry)
          CONTEXT:
            value: $(params.context)
          DOCKERFILE:
            value: $(params.dockerfile)
          EXTRA_ARGS:
            values:
              - --skip-tls-verify
      send-webhook-msteams:
        task: send-msteams-webhook
        runAfter:
          - kaniko
        params:
          message:
            value: "image $(params.image):$(params.tag) build & pushed successfully w/ kaniko ($(tasks.kaniko.results.IMAGE_DIGEST))"
          webhook-url-secret:
            value: msteams
          webhook-url-secret-key:
            value: url
    finally:
      notify-any-failure:
        task: send-msteams-webhook
        params:
          message:
            value: "kaniko image build for $(params.image):$(params.tag) failed!!"
          webhook-url-secret:
            value: msteams
          webhook-url-secret-key:
            value: url
        when:
          $(tasks.status):
            operator: in
            values: Failed



tasks:
  create-publish-helm-chart:
    labels:
      app.kubernetes.io/version: "0.2"
    annotations:
      tekton.dev/pipelines.minVersion: "0.45.0"
      tekton.dev/categories: helm chart Build
      tekton.dev/tags: helm-chart-build
      tekton.dev/platforms: "linux/amd64"
    description: create and publish helm chart to a registry
    workspaces:
      source:
        description: holds helm chart source
        optional: false
      dockerconfig:
        description: includes a docker `config.json`
        optional: false
        mountPath: /home/nonroot/.config/helm/registry/
    params:
      PATH:
        description: directory to helm chart in repo, e.g. "helm"
      CHARTNAME:
        description: name of helm chart, e.g. "sthings-k8s-operator"
      CHARTTAG:
        description: tag of helm chart, e.g. "0.1.0"
      REGISTRY:
        description: registry url, e.g. "scr.tiab.labda.sva.de"
      IMAGE:
        description: working image
        default: scr.tiab.labda.sva.de/sthings-k8s-workspace/sthings-k8s-workspace:281126-1644
      SUBDIRECTORY:
        description: subdirectory of workspace
        default: ""
    steps:
      publish-helm-chart:
        workingDir: $(workspaces.source.path)/$(params.SUBDIRECTORY)
        image: $(params.IMAGE)
        securityContext:
          runAsNonRoot: true
          runAsUser: 65532
        script: |
          #!/usr/bin/env sh
          helm dependency update $(params.PATH)/$(params.CHARTNAME)
          helm package --version $(params.CHARTTAG)-helm $(params.PATH)/$(params.CHARTNAME)
          helm push $(params.CHARTNAME)-$(params.CHARTTAG)-helm.tgz oci://$(params.REGISTRY)/$(params.CHARTNAME)/
  kaniko:
    labels:
      app.kubernetes.io/version: "0.6"
    annotations:
      tekton.dev/pipelines.minVersion: "0.45.0"
      tekton.dev/categories: Image Build
      tekton.dev/tags: image-build
      tekton.dev/displayName: "Build and upload container image using Kaniko"
      tekton.dev/platforms: "linux/amd64"
    description: build Dockerfile w/ kaniko and push to a registry
    workspaces:
      source:
        description: holds the context and Dockerfile
        optional: false
      dockerconfig:
        description: includes a docker `config.json`
        optional: true
        mountPath: /kaniko/.docker
    results:
      IMAGE_DIGEST:
        description: digest of the image just built
      IMAGE_URL:
        description: url of the image just built.
    params:
      IMAGE:
        description: name (reference) of the image to build
      TAG:
        description: name (reference) of the image to build
      REGISTRY:
        description: registry FROM (base image)
        default: scr.tiab.labda.sva.de
      DOCKERFILE:
        description: Path to the Dockerfile to build
        default: ./Dockerfile
      CONTEXT:
        description: the build context used by Kaniko
        default: ./
      SUBDIRECTORY:
        description: subdirectory of workspace
        default: ""
      EXTRA_ARGS:
        type: array
      BUILDER_IMAGE:
        description: the image on which builds will run (default is v1.5.1)
        default: gcr.io/kaniko-project/executor:v1.5.1@sha256:c6166717f7fe0b7da44908c986137ecfeab21f31ec3992f6e128fff8a94be8a5
    steps:
      build-and-push:
        workingDir: $(workspaces.source.path)/$(params.SUBDIRECTORY)
        image: $(params.BUILDER_IMAGE)
        securityContext:
          runAsNonRoot: false
          runAsUser: 0
        args:
          - $(params.EXTRA_ARGS)
          - --dockerfile=$(params.DOCKERFILE)
          - --context=$(workspaces.source.path)/$(params.CONTEXT) # The user does not need to care the workspace and the source.
          - --destination=$(params.IMAGE):$(params.TAG)
          - --destination=$(params.IMAGE):latest
          - --build-arg=REGISTRY=$(params.REGISTRY)
          - --digest-file=$(results.IMAGE_DIGEST.path)
          - --insecure
      write-url:
        image: docker.io/library/bash:5.1.4@sha256:b208215a4655538be652b2769d82e576bc4d0a2bb132144c060efc5be8c3f5d6
        script: |
          set -e
          image="$(params.IMAGE)"
          echo -n "${image}" | tee "$(results.IMAGE_URL.path)"
  send-msteams-webhook:
    labels:
      app.kubernetes.io/version: "0.1"
    annotations:
      tekton.dev/pipelines.minVersion: "0.45.0"
      tekton.dev/categories: Messaging
      tekton.dev/tags: messaging
      tekton.dev/displayName: "Send message to Microsoft Teams Channel"
      tekton.dev/platforms: "linux/amd64,linux/s390x,linux/ppc64le"
    description: sends simple message to a Microsoft Teams Channel
    params:
      webhook-url-secret:
        type: string
        description: name of the secret with incoming webhook URL
      webhook-url-secret-key:
        type: string
        description: key in the secret
      message:
        type: string
        description: message to notify about
    steps:
      post:
        image: curlimages/curl:7.84.0
        env:
          MESSAGE:
            value: $(params.message)
          WEBHOOK_URL:
            valueFrom:
              secretKeyRef:
                name: $(params.webhook-url-secret)
                key: $(params.webhook-url-secret-key)
        script: |
          #!/usr/bin/env sh
          MESSAGE=$(echo "${MESSAGE}" | sed -e 's/\"/\\\\"/g')
          JSON="{\"text\": \"${MESSAGE}\" }"
          curl -X POST -H 'Content-Type: application/json' -d "${JSON}" "${WEBHOOK_URL}"
  git-clone:
    labels:
      app.kubernetes.io/version: "0.8"
    annotations:
      tekton.dev/pipelines.minVersion: "0.45.0"
      tekton.dev/categories: Git
      tekton.dev/tags: git
      tekton.dev/displayName: "git clone"
      tekton.dev/platforms: "linux/amd64,linux/s390x,linux/ppc64le,linux/arm64"
    description: clone a git repo from the provided url
    workspaces:
      output:
        description: the git repo will be cloned onto the volume backing this Workspace
        optional: false
      ssh-directory:
        description: .ssh directory with private key, known_hosts, config..
        optional: true
      basic-auth:
        description: workspace containing a .gitconfig and .git-credentials file
        optional: true
      ssl-ca-directory:
        description: workspace containing CA certificates
        optional: true
    params:
      url:
        description: repository URL to clone from
        type: string
      revision:
        description: Revision to checkout
        type: string
      refspec:
        description: Refspec to fetch before checking out revision
        type: string
      submodules:
        description: Initialize and fetch git submodules
        type: string
        default: "true"
      depth:
        description: Perform a shallow clone
        type: string
        default: "1"
      sslVerify:
        description: Set the `http.sslVerify` global git config
        type: string
        default: "true"
      crtFileName:
        description: file name of mounted crt using ssl-ca-directory workspace
        type: string
        default: "ca-bundle.crt"
      subdirectory:
        description: subdirectory inside the `output` workspace to clone the repo into
        type: string
      sparseCheckoutDirectories:
        description: define the directory patterns to match or exclude
        type: string
      deleteExisting:
        description: Clean out the contents of the destination directoryå
        type: string
        default: "true"
      httpProxy:
        description: HTTP proxy server for non-SSL requests
        type: string
      httpsProxy:
        description: HTTPS proxy server for SSL requests
        type: string
      noProxy:
        description: Opt out of proxying HTTP/HTTPS requests
        type: string
      verbose:
        description: Log the commands that are executed during `git-clone`'s operation
        type: string
        default: "true"
      gitInitImage:
        description: the image providing the git-init binary that this Task runs
        type: string
        default: "gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/git-init:v0.29.0"
      userHome:
        description: absolute path to the user's home directory
        type: string
        default: "/home/nonroot"
    results:
      commit:
        description: the precise commit SHA
      url:
        description: the precise URL
    steps:
      clone:
        image: "$(params.gitInitImage)"
        securityContext:
          runAsNonRoot: true
          runAsUser: 65532
        env:
          HOME:
            value: $(params.userHome)
          PARAM_URL:
            value: $(params.url)
          PARAM_REVISION:
            value: $(params.revision)
          PARAM_REFSPEC:
            value: $(params.refspec)
          PARAM_SUBMODULES:
            value: $(params.submodules)
          PARAM_DEPTH:
            value: $(params.depth)
          PARAM_SSL_VERIFY:
            value: $(params.sslVerify)
          PARAM_CRT_FILENAME:
            value: $(params.crtFileName)
          PARAM_SUBDIRECTORY:
            value: $(params.subdirectory)
          PARAM_DELETE_EXISTING:
            value: $(params.deleteExisting)
          PARAM_HTTP_PROXY:
            value: $(params.httpProxy)
          PARAM_HTTPS_PROXY:
            value: $(params.httpsProxy)
          PARAM_NO_PROXY:
            value: $(params.noProxy)
          PARAM_VERBOSE:
            value: $(params.verbose)
          PARAM_SPARSE_CHECKOUT_DIRECTORIES:
            value: $(params.sparseCheckoutDirectories)
          PARAM_USER_HOME:
            value: $(params.userHome)
          WORKSPACE_OUTPUT_PATH:
            value: $(workspaces.output.path)
          WORKSPACE_SSH_DIRECTORY_BOUND:
            value: $(workspaces.ssh-directory.bound)
          WORKSPACE_SSH_DIRECTORY_PATH:
            value: $(workspaces.ssh-directory.path)
          WORKSPACE_BASIC_AUTH_DIRECTORY_BOUND:
            value: $(workspaces.basic-auth.bound)
          WORKSPACE_BASIC_AUTH_DIRECTORY_PATH:
            value: $(workspaces.basic-auth.path)
          WORKSPACE_SSL_CA_DIRECTORY_BOUND:
            value: $(workspaces.ssl-ca-directory.bound)
          WORKSPACE_SSL_CA_DIRECTORY_PATH:
            value: $(workspaces.ssl-ca-directory.path)
        script: |
          #!/usr/bin/env sh
          set -eu

          if [ "${PARAM_VERBOSE}" = "true" ] ; then
            set -x
          fi

          if [ "${WORKSPACE_BASIC_AUTH_DIRECTORY_BOUND}" = "true" ] ; then
            cp "${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/.git-credentials" "${PARAM_USER_HOME}/.git-credentials"
            cp "${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/.gitconfig" "${PARAM_USER_HOME}/.gitconfig"
            chmod 400 "${PARAM_USER_HOME}/.git-credentials"
            chmod 400 "${PARAM_USER_HOME}/.gitconfig"
          fi

          if [ "${WORKSPACE_SSH_DIRECTORY_BOUND}" = "true" ] ; then
            cp -R "${WORKSPACE_SSH_DIRECTORY_PATH}" "${PARAM_USER_HOME}"/.ssh
            chmod 700 "${PARAM_USER_HOME}"/.ssh
            chmod -R 400 "${PARAM_USER_HOME}"/.ssh/*
          fi

          if [ "${WORKSPACE_SSL_CA_DIRECTORY_BOUND}" = "true" ] ; then
            export GIT_SSL_CAPATH="${WORKSPACE_SSL_CA_DIRECTORY_PATH}"
            if [ "${PARAM_CRT_FILENAME}" != "" ] ; then
                export GIT_SSL_CAINFO="${WORKSPACE_SSL_CA_DIRECTORY_PATH}/${PARAM_CRT_FILENAME}"
            fi
          fi
          CHECKOUT_DIR="${WORKSPACE_OUTPUT_PATH}/${PARAM_SUBDIRECTORY}"

          cleandir() {
            if [ -d "${CHECKOUT_DIR}" ] ; then
              # Delete non-hidden files and directories
              rm -rf "${CHECKOUT_DIR:?}"/*
              # Delete files and directories starting with . but excluding ..
              rm -rf "${CHECKOUT_DIR}"/.[!.]*
              # Delete files and directories starting with .. plus any other character
              rm -rf "${CHECKOUT_DIR}"/..?*
            fi
          }

          if [ "${PARAM_DELETE_EXISTING}" = "true" ] ; then
            cleandir
          fi

          test -z "${PARAM_HTTP_PROXY}" || export HTTP_PROXY="${PARAM_HTTP_PROXY}"
          test -z "${PARAM_HTTPS_PROXY}" || export HTTPS_PROXY="${PARAM_HTTPS_PROXY}"
          test -z "${PARAM_NO_PROXY}" || export NO_PROXY="${PARAM_NO_PROXY}"

          /ko-app/git-init \
            -url="${PARAM_URL}" \
            -revision="${PARAM_REVISION}" \
            -refspec="${PARAM_REFSPEC}" \
            -path="${CHECKOUT_DIR}" \
            -sslVerify="${PARAM_SSL_VERIFY}" \
            -submodules="${PARAM_SUBMODULES}" \
            -depth="${PARAM_DEPTH}" \
            -sparseCheckoutDirectories="${PARAM_SPARSE_CHECKOUT_DIRECTORIES}"
          cd "${CHECKOUT_DIR}"
          RESULT_SHA="$(git rev-parse HEAD)"
          EXIT_CODE="$?"
          if [ "${EXIT_CODE}" != 0 ] ; then
            exit "${EXIT_CODE}"
          fi
          printf "%s" "${RESULT_SHA}" > "$(results.commit.path)"
          printf "%s" "${PARAM_URL}" > "$(results.url.path)"
