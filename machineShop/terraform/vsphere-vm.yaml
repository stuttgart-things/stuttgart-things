---
globals: |
  {{ .vm_name }}

defaults:
  project_name: vm_name

main:
  # cloudconfig.yaml
  
    ## Add users to the system. Users are added after groups are added.
    #users:
    #  - name: sthings
    #    sudo: ALL=(ALL) NOPASSWD:ALL
    #    lock_passwd: false
    #    passwd: $6$MqwEacdFhwUi0zxC$DHqK0Acr6ZKrOHPyLdh4J4qZWBSCCwoRJuVF7klR1eI75m5uXXUmsfgA8Mxp15eICbF0JuZFbAkdhqQM6i1Bn1
    #ssh_pwauth: true

  vsphere-vm-cloudinit: |
    resource "vsphere_virtual_machine" "{{ call .GetGlobalValue "vm_name" }}" {
      name = "{{ call .GetGlobalValue "vm_name" }}"
      folder = var.vsphere_vm_folder_path
      count = {{ call .SingleSelectSurvey "Vm count|1;2;3;4;5" }}
      firmware = "bios"
      num_cpus = {{ call .SingleSelectSurvey "CPU count|4;6;8"}}
      memory = {{ call .SingleSelectSurvey "Memory size|4096;6144;8192;10240"}}
      resource_pool_id = data.vsphere_resource_pool.pool.id
      datastore_id = data.vsphere_datastore.datastore.id
      guest_id = data.vsphere_virtual_machine.template.guest_id
      scsi_type = data.vsphere_virtual_machine.template.scsi_type
      annotation = "VSPHERE-VM Cloud Init BUILD w/ SHIPYARD FOR STUTTGART-THINGS"

       network_interface {
        network_id   = data.vsphere_network.network.id
        adapter_type = data.vsphere_virtual_machine.template.network_interface_types[0]
      }
      
      disk {
        label            = "disk0"
        size             = "{{ call .SingleSelectSurvey "Disk size|32;64;96;128"}}"
        eagerly_scrub    = data.vsphere_virtual_machine.template.disks.0.eagerly_scrub
        thin_provisioned = data.vsphere_virtual_machine.template.disks.0.thin_provisioned
      }

      clone {
        template_uuid = data.vsphere_virtual_machine.template.id
        linked_clone  = "false"
      }
    
      extra_config = {
        "guestinfo.userdata" = data.template_cloudinit_config.cloud_config.rendered
        "guestinfo.userdata.encoding" = "gzip+base64"
      }
    
      vapp {
        properties = {
          hostname = "{{ call .GetGlobalValue "vm_name" }}"
          user-data = data.template_cloudinit_config.cloud_config.rendered 
        }
      }
    
      cdrom {
        client_device = true
      }
    }

    data "template_cloudinit_config" "cloud_config" {
      gzip = true
      base64_encode = true
      part {
        content_type = "text/cloud-config"
        content = <<-EOF
          ${file("{{ call .SingleInputSurvey "Path to Cloud Config file|cloud_config/cloudconfig.yaml" }}")}  #TODO: change once path is determined
          EOF
      }
    }
    
    data "vsphere_datacenter" "dc" {
      name = var.vsphere_datacenter
    }
    
    data "vsphere_datastore" "datastore" {
      name          = var.vsphere_datastore
      datacenter_id = data.vsphere_datacenter.dc.id
    }
    
    data "vsphere_resource_pool" "pool" {
      name          = var.vsphere_resource_pool
      datacenter_id = data.vsphere_datacenter.dc.id
    }
    
    data "vsphere_network" "network" {
      name          = var.vsphere_network
      datacenter_id = data.vsphere_datacenter.dc.id
    }
    
    data "vsphere_virtual_machine" "template" {
      name          = var.vsphere_vm_template
      datacenter_id = data.vsphere_datacenter.dc.id
    }

    #provider
    
    terraform {
      backend "s3" {
        endpoint = "{{ call .SingleSelectSurvey "S3 backend|https://artifacts.labul.sva.de;https://artifacts.tiab.labda.sva.de" }}"
        key = "vm-{{ call .GetGlobalValue "vm_name" }}.tfstate"
        region = "main"
        bucket = "vsphere-vm"
        skip_credentials_validation = true
        skip_metadata_api_check = true
        skip_region_validation = true
        force_path_style = true
    }

    required_providers {
      vsphere = {
        source = "hashicorp/vsphere"
        version = ">= 2.3.1"
      }

    }
      required_version = ">= 1.3.7"
    }

    provider "vsphere" {
      user                 = var.vsphere_user
      password             = var.vsphere_password
      vsphere_server       = var.vsphere_server
      allow_unverified_ssl = true
    }

    #variables

    variable "vsphere_user" {
      default     = false
      description = "user for vsphere"
    }
    variable "vsphere_password" {
      default     = false
      description = "password for vsphere"
    }
    
    variable "vsphere_server" {
      default     = false
      description = "server for vsphere"
    }
    
    variable "vm_ssh_user" {
      default     = false
      description = "ssh user"
    }
    
    variable "vm_ssh_password" {
      default     = false
      description = "ssh password"
    }
    
    variable "vsphere_datacenter" {
      default     = false
      description = "name of datacenter"
    }
    
    variable "vsphere_datastore" {
      default     = false
      description = "name of vsphere datastore"
    }
    
    variable "vsphere_resource_pool" {
      default     = false
      description = "name of resource_pool"
    }
    
    variable "vsphere_network" {
      default     = false
      description = "name of vsphere network"
    }
    
    variable "vsphere_vm_template" {
      default     = false
      description = "name of vsphere vm template"
    }
    
    variable "vsphere_vm_folder_path" {
      default     = false
      description = "folder path of to be created vm on datacenter"
    }

    #output

    output "{{ call .GetGlobalValue "vm_name" }}_ip" {
      value = vsphere_virtual_machine.{{ call .GetGlobalValue "vm_name" }}.*.default_ip_address
    }
    
  vsphere-vm: |
    module "{{ call .GetGlobalValue "vm_name" }}" {
      vm_count = {{ call .SingleSelectSurvey "Vm count|1;2;3;4;5" }}
      vsphere_vm_name = "{{ call .GetGlobalValue "vm_name" }}"
      vm_memory = {{ call .SingleSelectSurvey "Memory size|4096;6144;8192;10240"}}
      vm_disk_size = "{{ call .SingleSelectSurvey "Disk size|32;64;96;128"}}"
      vm_num_cpus = {{ call .SingleSelectSurvey "CPU count|4;6;8"}}
      firmware = "bios"
      vsphere_vm_folder_path = var.vsphere_vm_folder_path
      source = "https://artifacts.tiab.labda.sva.de/modules/vsphere-vm.zip"
      vsphere_datacenter = var.vsphere_datacenter
      vsphere_datastore = var.vsphere_datastore
      vsphere_resource_pool = var.vsphere_resource_pool
      vsphere_network = var.vsphere_network
      vsphere_vm_template = var.vsphere_vm_template
      vm_ssh_user = var.vm_ssh_user
      vm_ssh_password = var.vm_ssh_password
      bootstrap = ["echo STUTTGART-THINGS"]
      annotation = "VSPHERE-VM BUILD w/ SHIPYARD FOR STUTTGART-THINGS"
    }

    #provider

    terraform {
      backend "s3" {
        endpoint = "{{ call .SingleSelectSurvey "S3 backend|https://artifacts.labul.sva.de;https://artifacts.tiab.labda.sva.de" }}"
        key = "vm-{{ call .GetGlobalValue "vm_name" }}.tfstate"
        region = "main"
        bucket = "vsphere-vm"
        skip_credentials_validation = true
        skip_metadata_api_check = true
        skip_region_validation = true
        force_path_style = true
    }

    required_providers {
      vsphere = {
        source = "hashicorp/vsphere"
        version = ">= 2.3.1"
      }

    }
      required_version = ">= 1.3.7"
    }

    provider "vsphere" {
      user                 = var.vsphere_user
      password             = var.vsphere_password
      vsphere_server       = var.vsphere_server
      allow_unverified_ssl = true
    }

    #variables

    variable "vsphere_server" {
      default     = false
      description = "vsphere server"
    }

    variable "vsphere_user" {
      default     = false
      description = "password of vsphere user"
    }

    variable "vsphere_password" {
      default     = false
      description = "password of vsphere user"
    }

    variable "vm_ssh_user" {
      default     = false
      description = "username of ssh user for vm"
    }

    variable "vm_ssh_password" {
      default     = false
      description = "password of ssh user for vm"
    }

    variable "vsphere_datastore" {
      default     = false
      description = "name of vsphere datastore"
    }

    variable "vsphere_datacenter" {
      default     = false
      description = "name of vsphere datacenter"
    }

    variable "vsphere_resource_pool" {
      default     = false
      description = "name of vsphere resource pool"
    }

    variable "vsphere_network" {
      default     = false
      description = "name of vsphere network"
    }

    variable "vsphere_vm_template" {
      default     = false
      description = "name/path of vsphere vm template"
    }

    variable "vsphere_vm_folder_path" {
      default     = false
      description = "folder path of to be created vm on datacenter"
    }

    #output

    output "{{ call .GetGlobalValue "vm_name" }}_ip" {
      value = module.{{ call .GetGlobalValue "vm_name" }}.ip
    }

tfvars:
  labda-vsphere-vm: |
    vsphere_datastore = "{{ call .SingleSelectSurvey "Datastore|/NetApp-HCI-Datacenter/datastore/DatastoreCluster/NetApp-HCI-Datastore-01;/NetApp-HCI-Datacenter/datastore/DatastoreCluster/NetApp-HCI-Datastore-02;/NetApp-HCI-Datacenter/datastore/DatastoreCluster/NetApp-HCI-Datastore-03;/NetApp-HCI-Datacenter/datastore/DatastoreCluster/NetApp-HCI-Datastore-04;/NetApp-HCI-Datacenter/datastore/DatastoreCluster/NetApp-HCI-Datastore-05;/NetApp-HCI-Datacenter/datastore/DatastoreCluster/NetApp-HCI-Datastore-06;/NetApp-HCI-Datacenter/datastore/DatastoreCluster/NetApp-HCI-Datastore-07" }}"
    vsphere_resource_pool = "{{ call .SingleInputSurvey "Resource pool|Resources" }}"
    vsphere_network = "{{ call .SingleSelectSurvey "Network|/NetApp-HCI-Datacenter/network/tiab-prod" }}"
    vsphere_vm_template = "{{ call .SingleSelectSurvey "VM-Template|/NetApp-HCI-Datacenter/vm/stuttgart-things/vm-templates/ubuntu22;/NetApp-HCI-Datacenter/vm/stuttgart-things/vm-templates/ubuntu23;/NetApp-HCI-Datacenter/vm/stuttgart-things/vm-templates/rocky9;/NetApp-HCI-Datacenter/vm/stuttgart-things/vm-templates/fedora38;/NetApp-HCI-Datacenter/vm/stuttgart-things/vm-templates/f38-cloudinit;/NetApp-HCI-Datacenter/vm/stuttgart-things/vm-templates/u22-rke2-upi;/NetApp-HCI-Datacenter/vm/stuttgart-things/vm-templates/u23-rke2-upi;/NetApp-HCI-Datacenter/vm/stuttgart-things/vm-templates/r9-rke2-upi" }}"
    vsphere_datacenter = "{{ call .SingleInputSurvey "Datacenter|/NetApp-HCI-Datacenter" }}"
    vsphere_vm_folder_path = "{{ call .SingleSelectSurvey "VM folder path|stuttgart-things/dev;stuttgart-things/testing;stuttgart-things/rancher-things;stuttgart-things/infra" }}"

  labul-vsphere-vm: |
    vsphere_datastore = "{{ call .SingleSelectSurvey "Datastore|/LabUL/datastore/UL-ESX-SAS-02;/LabUL/datastore/DD1;/LabUL/datastore/UL-ESX-SAS-01;/LabUL/datastore/UL-ESX-SATA-10"}}"
    vsphere_resource_pool = "{{ call .SingleInputSurvey "Resource pool|/LabUL/host/Cluster01/Resources"}}"
    vsphere_network = "{{ call .SingleSelectSurvey "Network|/LabUL/network/MGMT-10.31.101;/LabUL/network/LAB-10.31.102;/LabUL/network/LAB-10.31.103;/LabUL/network/LAB-10.31.104"}}"
    vsphere_vm_template = "{{ call .SingleSelectSurvey "VM-Template|/LabUL/vm/phermann/vm-templates/ubuntu22;/LabUL/vm/phermann/vm-templates/ubuntu23;/LabUL/vm/phermann/vm-templates/u23-cloudinit;/LabUL/vm/phermann/vm-templates/u23-cloudimg;/LabUL/vm/phermann/vm-templates/rocky9;/LabUL/vm/phermann/vm-templates/fedora38;/LabUL/vm/phermann/vm-templates/f38-cloudinit;/LabUL/vm/phermann/vm-templates/u22-rke2-upi;/LabUL/vm/phermann/vm-templates/u23-rke2-upi;/LabUL/vm/phermann/vm-templates/r9-rke2-upi"}}"
    vsphere_datacenter = "{{ call .SingleInputSurvey "Datacenter|LabUL"}}"
    vsphere_vm_folder_path = "{{ call .SingleSelectSurvey "VM folder path|phermann/dev;phermann/stuttgart-things;phermann/rancher-things;phermann/testing" }}"

backend:
  minio-labul: |
    access_key={{ call .VaultSecretSurvey "S3-Backend Access Key ID|s3/data/artifacts:minio_access_key" }}
    secret_key={{ call .VaultSecretSurvey "S3-Backend Secret Key |s3/data/artifacts:minio_secret_key" }}
  minio-labda: |
    access_key={{ call .VaultSecretSurvey "S3-Backend Access Key ID|s3/data/artifacts:minio_access_key" }}
    secret_key={{ call .VaultSecretSurvey "S3-Backend Secret Key |s3/data/artifacts:minio_secret_key" }}

secrets:
  vsphere-vm: |
    vsphere_user={{ call .VaultSecretSurvey "User|cloud/data/vsphere:username" }}
    vsphere_password={{ call .VaultSecretSurvey "Password|cloud/data/vsphere:password" }}
    vsphere_server={{ call .VaultSecretSurvey "Vsphere Server|cloud/data/vsphere:ip" }}
    vm_ssh_user={{ call .SingleInputSurvey "VM User Password|sthings" }}
    vm_ssh_password={{ call .VaultSecretSurvey "VM SSH Password|cloud/data/vsphere:vm_ssh_password" }}

msteams-webhook:
  message-title: |
    Build VM {{ call .GetGlobalValue "vm_name" }}
  message-text: |
    New virtual machine {{ call .GetGlobalValue "vm_name" }} was build by {{ call .SingleInputSurvey "User|sthings" }}
  channel-url: https://365sva.webhook.office.com/webhookb2/2f14a9f8-4736-46dd-9c8c-31547ec37180@0a65cb1e-37d5-41ff-980a-647d9d0e4f0b/IncomingWebhook/a993544595464ce6af4f2f0461d55a17/dc3a27ed-396c-40b7-a9b2-f1a2b6b44efe
  message-color: "#DF813D"
