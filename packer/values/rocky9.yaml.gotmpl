---
configmaps:
  {{ .Values.osVersion }}:
    rocky9-vsphere.pkr.hcl: |
      packer {
        required_version = ">= {{ .Values.rocky9PackerMinVersion }}"
        required_plugins {
          vmware = {
            version = ">= {{ .Values.rocky9PackerVMwarePluginMinVersion }}"
            source  = "{{ .Values.vmWareProvider }}"
          }
        }
      }

      locals {
        packerstarttime = formatdate("YYYYMMDD", timestamp())
      }

      variable "password" {
        type = string
      }

      variable "username" {
        type = string
      }

      source "vsphere-iso" "autogenerated_1" {
        CPUs                 = {{ .Values.cpu }}
        RAM                  = {{ .Values.ram }}
        RAM_reserve_all      = true
        boot_command         = ["<up><wait5><tab> inst.text inst.repo=cdrom:sr0 inst.ks=cdrom:sr1:/user-data<enter><wait>"]
        boot_order           = "disk,cdrom"
        boot_wait            = "{{ .Values.bootWait }}"
        cd_files             = ["{{ .Values.packerConfigMountPath }}/user-data"]
        cd_label             = "cidata"
        cluster              = "{{ .Values.cluster }}"
        convert_to_template  = "true"
        datastore            = "{{ .Values.datastore }}"
        disk_controller_type = ["pvscsi"]
        folder               = "{{ .Values.folder }}"
        guest_os_type        = "centos7_64Guest"
        host                 = "{{ .Values.host }}"
        insecure_connection  = "true"
        ip_wait_timeout      = "{{ .Values.ipWaitTimeout }}"
        iso_checksum         = "{{ .Values.rocky9IsoChecksum }}"
        iso_urls             = ["{{ .Values.rocky9IsoUrl }}"]
        network_adapters {
          network      = "{{ .Values.network }}"
          network_card = "vmxnet3"
        }
        notes                  = "stuttgart-things/{{ .Values.osVersion }}\n\nBuild Date: ${local.packerstarttime} w/ packer\nOS: {{ .Values.osVersion }}\nISO: {{ .Values.rocky9IsoUrl }}\nProvisioning: {{ .Values.ansibleOsProvioning }}\n\n/{{ .Values.templateCreator }}"
        password               = "${var.password}"
        ssh_handshake_attempts = "{{ .Values.sshHandshakeAttempts }}"
        ssh_password           = "{{ .Values.rocky9tmpSSHPassword }}"
        ssh_timeout            = "{{ .Values.sshTimeout }}"
        ssh_username           = "{{ .Values.rocky9tmpSSHUser }}"
        storage {
          disk_size             = {{ .Values.diskSize }}
          disk_thin_provisioned = {{ .Values.diskThinProvisioned }}
        }
        username       = "${var.username}"
        vcenter_server = "{{ .Values.vcenterServer }}"
        vm_name        = "{{ .Values.osVersion }}-{{ .Values.ansibleOsProvioning }}"
      }

      build {
        sources = ["source.vsphere-iso.autogenerated_1"]

        provisioner "shell" {
          inline = ["{{ .Values.rocky9ShellCmd }}"]
        }

        provisioner "ansible" {
          ansible_env_vars       = ["ANSIBLE_REMOTE_TEMP=/tmp", "ANSIBLE_HOST_KEY_CHECKING=False", "ANSIBLE_SSH_ARGS=-oForwardAgent=yes -oControlMaster=auto -oControlPersist=60s -oHostKeyAlgorithms=+ssh-rsa   -oPubkeyAcceptedKeyTypes=+ssh-rsa", "ANSIBLE_NOCOLOR=True"]
          extra_arguments        = ["--scp-extra-args", "'-O'"]
          keep_inventory_file    = "true"
          playbook_file          = "{{ .Values.ansiblePlayMountPath }}/{{ .Values.ansibleOsProvioning }}.yaml"
          user                   = "root"
        }
      }
    user-data: |
      # Generated by Anaconda 34.25.2.10
      # Generated by pykickstart v3.32
      #version=RHEL9
      # Use graphical install
      # graphical
      repo --name="AppStream" --baseurl=https://download.rockylinux.org/pub/rocky/9/AppStream/x86_64/os/

      %addon com_redhat_kdump --disable

      %end

      # Keyboard layouts
      keyboard --xlayouts='de'
      # System language
      lang en_US.UTF-8

      # Network information
      network  --bootproto=dhcp --ipv6=auto --activate

      # Use network installation
      url --url="{{ .Values.rocky9NetworkInstall }}"

      %packages
      @^minimal-environment
      openssh-server
      openssh-clients
      sudo
      kexec-tools
      curl
      open-vm-tools
      qemu-guest-agent
      # allow for ansible
      python3
      python3-libselinux

      %end

      # Run the Setup Agent on first boot
      firstboot --enable

      # Generated using Blivet version 3.4.0
      #ignoredisk --only-use=vda
      # Partition clearing information
      clearpart --none --initlabel
      # Disk partitioning information
      part /boot --fstype="xfs" --size=512
      part pv.465 --fstype="lvmpv" --size=14758
      #part /boot/efi --fstype="efi" --ondisk=vda --size=100 --fsoptions="umask=0077,shortname=winnt"
      volgroup vg_sthings --pesize=4096 pv.465
      logvol / --fstype="xfs" --size=6059 --name=root --vgname=vg_sthings
      logvol /var --fstype="xfs" --size=5120 --name=var --vgname=vg_sthings
      logvol swap --fstype="swap" --size=500 --name=swap --vgname=vg_sthings
      logvol /home --fstype="xfs" --size=3072 --name=home --vgname=vg_sthings

      # System timezone
      timezone Europe/Berlin --utc

      # Root password
      rootpw --iscrypted --allow-ssh $6$HPLl.wY.EoTXTLje$xOPDm4NHry1WrBXCyUy/OhOrx6K6fe5MB9sBwGxHNI9Ty8Fo9/hKq7l3IBOn2fo2FOCMU59QNi9BoAMmXgRSz0
      user --groups=wheel --name=sthings --password=$6$KO8rYBL5y1YX7b6C$/XSzeIq16ENPv80QulJGz1Q9KvrKcW1Y5LSnf5w97sURo/aSnsply5a4zBqAACawf3D8RquoBoEBTTjdXh5us1 --iscrypted

      # Reboot after setup
      reboot

      %post
      #sed -i 's/^.*requiretty/#Defaults requiretty/' /etc/sudoers
      sed -i 's/rhgb //' /etc/default/grub

      # sshd PermitRootLogin yes
      sed -i "s/#PermitRootLogin prohibit-password/PermitRootLogin yes/g" /etc/ssh/sshd_config
      #echo "user ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
      cat &lt;<EOF >> /etc/sudoers
      Defaults !requiretty
      root ALL=(ALL) ALL
      user ALL=(ALL) NOPASSWD: ALL
      EOF

      # Enable NetworkManager, sshd and disable firewalld
      #/usr/bin/systemctl enable NetworkManager
      /usr/bin/systemctl enable sshd
      /usr/bin/systemctl start sshd

      %end