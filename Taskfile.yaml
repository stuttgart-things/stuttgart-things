---
version: 3
vars:
  REGISTRY: eu.gcr.io
  REPOSITORY_NAME: stuttgart-things
  PROJECT:
    sh: echo ${PROJECT}
  TAG:
    sh: echo ${TAG}
  CONTAINER_RUNTIME_CMD: sudo nerdctl
  DATE:
    sh: date +"%y.%m%d.%H%M"
  BRANCH:
    sh: if [ $(git rev-parse --abbrev-ref HEAD) != "main" ]; then echo $(git rev-parse --abbrev-ref HEAD) ; fi

tasks:
  branch:
    desc: Create branch from main
    cmds:
      - git checkout main
      - git branch
      - git pull
      - |
        echo "Enter to be created (remote) branch:"
        read BRANCH_NAME;
        git checkout -b ${BRANCH_NAME}
        git push origin ${BRANCH_NAME}
      - git branch
      - git branch --set-upstream-to=origin/main ${BRANCH_NAME}

  commit:
    desc: Commit + push code into branch
    cmds:
      - git branch --set-upstream-to=origin/{{ .BRANCH }}
      - git pull
      - |
        echo "ENTER COMMIT MESSAGE"
        read COMMIT_MESSAGE;
        git add *
        git add .github/workflows/*
        git commit -am "$(echo ${COMMIT_MESSAGE})"
        git push origin -u {{ .BRANCH }}

  pr:
    desc: Create pull request into main
    cmds:
      - task: commit
      - gh pr create -t "{{ .BRANCH }}" -b "{{ .BRANCH }} branch into main"
      - sleep 2s
      # - gh pr checks $(gh pr list | grep "^[^#;]" | awk '{print $1}') --watch
      - gh pr merge $(gh pr list | grep "^[^#;]" | awk '{print $1}') --auto --rebase --delete-branch
      - git checkout main && git pull

  tag:
    desc: Tag repo
    cmds:
      - git pull
      - git commit -am 'updated for {{ .TAG }} on {{ .DATE }}'
      - git push
      - git tag -a {{ .TAG }} -m 'updated for {{ .TAG }} on {{ .DATE }}'
      - git push origin --tags

  build-local:
    desc: Build & push image local
    cmds:
      - '{{ .CONTAINER_RUNTIME_CMD }} build -t {{ .REGISTRY }}/{{ .REPOSITORY_NAME }}/{{ .PROJECT }}:{{ .VERSION }} ./images/{{ .PROJECT }}'
      - '{{ .CONTAINER_RUNTIME_CMD }} push {{ .REGISTRY }}/{{ .REPOSITORY_NAME }}/{{ .PROJECT }}:{{ .VERSION }}'
      - task: git-push
    vars:
      VERSION:
        sh: cat ./images/{{ .PROJECT }}/Dockerfile | grep version | awk -F= '{ print $2 }'

  # package-tekton:
  #   desc: Update tekton helm pipelineRuns
  #   cmds:
  #     - yq e -i '.runs.packageHelmChartSCR.name = "package-{{ .PROJECT }}-{{ .VERSION_NUMBER_PREFIX }}{{ .UPDATED_VERSION_NUMBER }}-{{ .DATE }}"' {{ .TKN_CHARTS_PIPELINERUNS }}
  #     - yq e -i '.runs.packageHelmChartSCR.params.helmChartTag = "{{ .VERSION_NUMBER_PREFIX }}{{ .UPDATED_VERSION_NUMBER }}"' {{ .TKN_CHARTS_PIPELINERUNS }}
  #     - yq e -i '.runs.packageHelmChartSCR.params.helmChartName = "{{ .PROJECT }}"' {{ .TKN_CHARTS_PIPELINERUNS }}
  #     - yq e -i '.runs.packageHelmChartSCR.params.gitWorkspaceSubdirectory = "/helm/{{ .PROJECT }}"' {{ .TKN_CHARTS_PIPELINERUNS }}
  #   vars:
  #     CURRENT_VERSION_NUMBER:
  #       sh: "echo $(yq e '.version' ./charts/{{ .PROJECT }}/Chart.yaml | awk -F'[.=]' ' { print $3 }')"
  #     UPDATED_VERSION_NUMBER:
  #       sh: "echo $(({{ .CURRENT_VERSION_NUMBER }}+1))"
  #     VERSION_NUMBER_PREFIX:
  #       sh: echo $(yq e '.version' ./charts/{{ .PROJECT }}/Chart.yaml | awk -F'[.=]' ' { print $1"."$2"." }')

  package:
    desc: Package & push chart
    cmds:
      - helm template ./charts/{{ .PROJECT }} || true # library are not tempateable
      - yq e -i '.version = "{{ .VERSION_NUMBER_PREFIX }}{{ .UPDATED_VERSION_NUMBER }}"' ./charts/{{ .PROJECT }}/Chart.yaml
      - "sed -i 's/appVersion: .*/appVersion: {{ .VERSION_NUMBER_PREFIX }}{{ .UPDATED_VERSION_NUMBER }}/g' ./charts/{{ .PROJECT }}/Chart.yaml"
      - cd ./charts/{{ .PROJECT }} && helm dep update
      - helm package ./charts/{{ .PROJECT }}
      - helm push {{ .PACKAGE }} oci://{{ .REGISTRY }}/{{ .REPOSITORY_NAME }}
      - gh release delete {{ .PROJECT }}-{{ .VERSION_NUMBER_PREFIX }}{{ .UPDATED_VERSION_NUMBER }} -y || true
      - gh release create {{ .PROJECT }}-{{ .VERSION_NUMBER_PREFIX }}{{ .UPDATED_VERSION_NUMBER }} --notes "released chart artifcact for {{ .PROJECT }}" {{ .PACKAGE }}
      - rm -rf {{ .PACKAGE }}
        #- task: package-tekton
      - task: git-push
    vars:
      PACKAGE:
        sh: "echo ${PROJECT}-*.tgz | head -n1"
      CURRENT_VERSION_NUMBER:
        sh: "echo $(yq e '.version' ./charts/{{ .PROJECT }}/Chart.yaml | awk -F'[.=]' ' { print $3 }')"
      UPDATED_VERSION_NUMBER:
        sh: "echo $(({{ .CURRENT_VERSION_NUMBER }}+1))"
      VERSION_NUMBER_PREFIX:
        sh: echo $(yq e '.version' ./charts/{{ .PROJECT }}/Chart.yaml | awk -F'[.=]' ' { print $1"."$2"." }')

  git-push:
    desc: Commit & push the module
    cmds:
      - git pull origin {{ .BRANCH }}
      - git config advice.addIgnoredFile false
      - |
        echo "Enter commit message:"
        read COMMIT_MESSAGE;
        git commit -am "${COMMIT_MESSAGE}"
      - git push origin -u {{ .BRANCH }}

  branch:
    desc: Create branch from main
    cmds:
      - git checkout main
      - git branch
      - git pull
      - |
        echo "Enter to be created (remote) branch:"
        read BRANCH_NAME;
        git checkout -b ${BRANCH_NAME}
        git push origin ${BRANCH_NAME}
      - git branch

  pull-request:
    desc: Create pull request into main
    cmds:
      - task: git-push
      - gh pr create -t "pr" -b "created pr for ${BRANCH_NAME} branch into main"
