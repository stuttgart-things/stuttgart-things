---
name: Call Ansible Execution
on:
  workflow_call:
    inputs:
      branch:
        required: true
        type: string
      inventory:
        required: true
        type: string
      playbook:
        required: false
        type: string
      runs-on:
        required: true
        type: string
      environment-name:
        default: k8s
        required: false
        type: string
      working-image:
        type: string
        default: eu.gcr.io/stuttgart-things/sthings-ansible:10.3.0
        required: false
      private-key:
        required: true
        type: string
      requirements-file:
        required: true
        type: string
      ansible-user:
        required: false
        type: string
        default: sthings
      extra-vars:
        required: false
        type: string
        default: target_host=all

jobs:
  execute-ansible:
    runs-on: ${{ inputs.runs-on }}
    environment: ${{ inputs.environment-name }}
    container:
      image: ${{ inputs.working-image }}
    env:
      VAULT_AUTH_METHOD: ${{ secrets.VAULT_AUTH_METHOD }}
      VAULT_ADDR: ${{ secrets.VAULT_ADDR }}
      VAULT_SECRET_ID: ${{ secrets.VAULT_SECRET_ID }}
      VAULT_ROLE_ID: ${{ secrets.VAULT_ROLE_ID }}
      VAULT_NAMESPACE: ${{ secrets.VAULT_NAMESPACE }}
      ANSIBLE_HOST_KEY_CHECKING: False
    steps:
      - name: Checkout code
        id: checkout-code
        uses: actions/checkout@v4.1.7
        with:
          fetch-depth: '0'
          ref: ${{ inputs.branch }}

      - name: Output Parameters
        id: output-parameters
        run: |
          ansible --version
          echo PATH-TO-PRIVATEKEY: ${{ inputs.private-key }}
          echo INVENTORY: ${{ inputs.inventory }}
          echo PLAYBOOK ${{ inputs.playbook }}
          echo PATH-TO-REQUIREMENTS_FILE: ${{ inputs.requirements-file }}
        shell: bash

      - name: Get Private Key
        id: get-private-key
        run: |
          mkdir ~/.ssh/
          machineshop get --path "${{ inputs.private-key }}" --b64 true | tail -n +8 > ~/.ssh/id_rsa
          chmod 0600 ~/.ssh/id_rsa
        shell: bash

      - name: Create Inventory
        id: create-inventory
        run: |
          if [[ ${{ inputs.inventory }} == *'['* ]] || [[ ${{ inputs.inventory }} == *']'* ]]; then
            echo ${{ inputs.inventory }} | tr '+' '\n' | sed 's/.\(.*\)/\0/'| sed 's/ //g' > inventory
          else
            echo ${{ inputs.inventory }} | tr ',' '\n' | sed 's/.\(.*\)/\0/'| sed 's/ //g' > inventory
          fi

          printf "[all:vars]\nansible_user=${{ inputs.ansible-user }}\n" >> inventory
          cat inventory
        shell: bash

      - name: Wait for ssh
        id: wait-for-ssh
        run: |
          cat << EOF > ./wait-for-ssh.yaml
          ---
          - hosts: all
            gather_facts: false
            become: true
            vars:
              delay_time: 15
            tasks:
              - name: "Wait for SSH (delay: {{ delay_time }})"
                delegate_to: localhost
                ansible.builtin.wait_for:
                  host: "{{ item }}"
                  port: 22
                  delay: "{{ delay_time }}"
                  timeout: 2400
                  sleep: 10
                with_items:
                  - "{{ groups['all'] }}"
          EOF
          ansible-playbook -i inventory ./wait-for-ssh.yaml -vv
        shell: bash

      - name: Execute Ansible
        id: execute-ansible
        run: |
          ansible-galaxy install -r ${{ inputs.requirements-file }} -f

          # EXECUTING PLAYBOOKS
          playbooks=$(echo ${{ inputs.playbook }})

          for play in ${playbooks//,/ }
          do
              ansible-playbook ${play} -i inventory ${{ inputs.extra-vars }} -vv
              echo "${play} playbook executed successfully"
          done
        shell: bash

      - name: Send Notification to Homerun
        if: always()
        env:
          STEPS_CONTEXT: ${{ toJson(steps) }}
        run: |
          WORKFLOW_STEP_RESULTS=$(echo ${STEPS_CONTEXT} | jq 'to_entries | map(select(.value.outcome == "failure" or .value.conclusion == "failure"))')
          if [ -z "$WORKFLOW_STEP_RESULTS" ] || [ "$WORKFLOW_STEP_RESULTS" == "[]" ]; then
            WORKFLOW_STATUS="SUCCESS"
          else
            WORKFLOW_STATUS="FAILED"
          fi

          printf "localhost ansible_connection=local\n" >> inventory
          ansible-playbook ansible/playbooks/send-homerun-notification.yaml -e severity=${WORKFLOW_STATUS} -i inventory -e target_host=localhost -vv
        shell: bash