---
name: Dispatch Terraform Flux
on:
  workflow_dispatch:
    inputs:
      lab:
        type: choice
        description: LAB
        options:
          - labul
          - labda
          - labul
      cloud:
        type: choice
        description: CLOUD
        options:
          - vsphere
          - proxmox
      cluster-name:
        required: true
        type: string
      environment-name:
        type: choice
        description: ENVIRONMENT
        options:
          - k8s
          - labul-vsphere
          - labda-vsphere
          - labul-proxmox
      working-image:
        description: WORKING IMAGE
        type: string
        default: ghcr.io/stuttgart-things/machineshop/machineshop-9c3178088556daa12a17db5edcc6b5b7@sha256:5e0a8cc6701035f49d8ec7831be05655dfa9df3e54d8e2aaa16142049f34f9c5
      runner:
        description: RUNNER NAME
        required: true
        type: string
        default: ghr-stuttgart-things-labul-automation

jobs:
  Create-Flux-Config:
    permissions:
      contents: write
      pull-requests: write
    runs-on: ${{ inputs.runner }}
    environment: ${{ inputs.environment-name }}
    container:
      image: ${{ inputs.working-image }}
    env:
      GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
    continue-on-error: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.7
        with:
          fetch-depth: '0'

      - name: Set config variables
        id: set
        run: |
          echo TF_PROJECT_DIR="terraform/flux/${{ inputs.lab }}-${{ inputs.cloud }}-${{ inputs.cluster-name }}" >> $GITHUB_ENV
          echo FLUX_DEFAULTS_CONFIG="terraform/defaults.yaml" >> $GITHUB_ENV
          echo FLUX_BOOTSTRAP_TEMPLATE="terraform/flux.tf.tpl" >> $GITHUB_ENV
          echo FLUX_STATE_TEMPLATE="terraform/state-provider.tf.tpl" >> $GITHUB_ENV
          echo FLUX_TFVARS_TEMPLATE="terraform/flux-tfvars.tf.tpl" >> $GITHUB_ENV
          echo FLUX_FILE_SECRETS="terraform/flux-file-secrets.yaml.tpl" >> $GITHUB_ENV

      - name: Create Flux config dir
        id: configDir
        run: |
          mkdir -p ${{ env.TF_PROJECT_DIR }}

      - name: Render Flux bootstrap config
        id: renderBootstrapConfig
        run: |
          machineshop render \
          --source local \
          --template ${{ env.FLUX_BOOTSTRAP_TEMPLATE }} \
          --defaults ${{ env.FLUX_DEFAULTS_CONFIG }} \
          --values "lab=${{ inputs.lab }}, cloud=${{ inputs.cloud }}, clusterName=${{ inputs.cluster-name }}" \
          --output file \
          --destination ./flux.tf

      - name: Render Flux bootstrap config
        id: renderStateConfig
        run: |
          machineshop render \
          --source local \
          --template ${{ env.FLUX_STATE_TEMPLATE }} \
          --defaults ${{ env.FLUX_DEFAULTS_CONFIG }} \
          --values "stateKey=${{ inputs.cluster-name }}" \
          --output file \
          --destination ./state.tf

      - name: Render terraform tfvars
        id: renderTfvars
        run: |
          machineshop render \
          --source local \
          --brackets square \
          --template ${{ env.FLUX_TFVARS_TEMPLATE }} \
          --output file \
          --destination ./terraform.tfvars

      - name: Render file secrets
        id: renderFileSecrets
        run: |
          machineshop render \
          --source local \
          --template ${{ env.FLUX_FILE_SECRETS }} \
          --output file \
          --defaults ${{ env.FLUX_DEFAULTS_CONFIG }} \
          --values "clusterName=${{ inputs.cluster-name }}" \
          --destination ./file-secrets.yaml

      - name: Create branch for flux config
        id: createBranch
        run: |
          ARTIFACTS="flux.tf:${{ env.TF_PROJECT_DIR }}/flux.tf,state.tf:${{ env.TF_PROJECT_DIR }}/state.tf,file-secrets.yaml:${{ env.TF_PROJECT_DIR }}/file-secrets.yaml,terraform.tfvars:${{ env.TF_PROJECT_DIR }}/terraform.tfvars" >> $GITHUB_ENV

          machineshop create \
          --kind branch \
          --branch ${{ env.TF_PROJECT_DIR }} \
          --repository stuttgart-things \
          --group stuttgart-things \
          --files "${ARTIFACTS}" \

          echo ARTIFACTS=${ARTIFACTS}" >> $GITHUB_ENV

      - name: Create pr for (newly created) flux branch into main
        id: createPR
        run: |
          machineshop create \
          --kind pr \
          --title "flux bootstrap terraform code for cluster ${{ inputs.cluster-name }} on lab ${{ inputs.lab }}-${{ inputs.cloud }} created" \
          --branch ${{ env.TF_PROJECT_DIR }} \
          --repository stuttgart-things \
          --group stuttgart-things \
          --labels terraform

      - name: Create homerun notification artifact
        id: homerunConfigCreation
        run: |
          printenv

          echo "---" >> homerun.yaml
          echo "title: PullRequest for bootstrap cluster: ${{ inputs.cluster-name }} w/ flux on github" >> homerun.yaml
          echo "system: github" >> homerun.yaml
          echo "message: 'REPOSITORY: ${GITHUB_REPOSITORY} WORKFLOW: ${GITHUB_WORKFLOW} RUNNER_NAME: ${RUNNER_NAME} WORKFLOW-IMAGE: ${{ inputs.kaniko-image }} ENV: k8s'" >> homerun.yaml
          echo "tags: flux, terraform, github-actions" >> homerun.yaml
          echo "author: ${GITHUB_ACTOR}" >> homerun.yaml
          echo "severity: SUCCESS" >> homerun.yaml
          echo "assignee: ${GITHUB_ACTOR}" >> homerun.yaml
          echo "assigneeUrl: ''" >> homerun.yaml
          echo "artifacts: ${{ env.ARTIFACTS }}" >> homerun.yaml
          echo "url: ''" >> homerun.yaml

          cat homerun.yaml

      - name: Upload homerun notification artifact
        uses: actions/upload-artifact@v4.4.0
        id: homerunConfigUpload
        with:
          name: homerun
          path: |-
            homerun.yaml

  Send-Homerun-Notification:
    if: ${{ always() }}
    name: Send-Homerun-Notification
    uses: stuttgart-things/stuttgart-things/.github/workflows/call-homerun-notification.yaml@main
    needs:
      -  Create-Flux-Config
    with:
      notification-artifact: homerun
      runs-on: ${{ inputs.runner }}
      environment-name: ${{ inputs.environment-name }}
      machineshop-image: ${{ inputs.working-image }}
      continue-on-error: true
    secrets: inherit
