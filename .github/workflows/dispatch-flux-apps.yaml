---
name: Dispatch Flux Apps
on:
  workflow_dispatch:
    inputs:
      lab:
        type: choice
        description: LAB
        options:
          - labul
          - labda
          - labul
      cloud:
        type: choice
        description: CLOUD
        options:
          - vsphere
          - proxmox
      cluster-name:
        required: true
        description: CLUSTER-NAME
        type: string
      apps:
        description: APPS (DELMITED BY SEMICOLON)
        required: false
        type: string
        default: ""
      app-values:
        description: APP VALUES (DELMITED BY COMMA)
        required: false
        type: string
        default: ""
      environment-name:
        type: choice
        description: ENVIRONMENT
        options:
          - k8s
          - labul-vsphere
          - labda-vsphere
          - labul-proxmox
      working-image:
        description: WORKING IMAGE
        type: string
        default: ghcr.io/stuttgart-things/machineshop/machineshop-9c3178088556daa12a17db5edcc6b5b7@sha256:5e0a8cc6701035f49d8ec7831be05655dfa9df3e54d8e2aaa16142049f34f9c5
      runner:
        description: RUNNER NAME
        required: true
        type: string
        default: ghr-stuttgart-things-skyami-cicd

jobs:
  Create-Flux-Apps:
    permissions:
      contents: write
      pull-requests: write
    runs-on: ${{ inputs.runner }}
    environment: ${{ inputs.environment-name }}
    outputs:
      rendered_apps: ${{ steps.renderFluxApps.outputs.APPS }}
    container:
      image: ${{ inputs.working-image }}
    env:
      GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
    continue-on-error: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.1
        with:
          fetch-depth: '0'

      - name: Set config variables
        id: set
        run: |
          echo FLUX_CLUSTER_FOLDER="clusters/${{ inputs.lab }}/${{ inputs.cloud }}/${{ inputs.cluster-name }}" >> $GITHUB_ENV
          echo FLUX_TEMPLATE_DIR="clusters/config" >> $GITHUB_ENV
          echo FLUX_APPS_TEMPLATE="apps.yaml.tpl" >> $GITHUB_ENV
          echo FLUX_SOPS_TEMPLATE="secrets-${{ inputs.lab }}-${{ inputs.cloud }}.yaml.tpl" >> $GITHUB_ENV
          echo FLUX_DEFAULTS="defaults.yaml" >> $GITHUB_ENV
          echo BRANCH_NAME="flux-updated-cluster-${{ inputs.lab }}-${{ inputs.cloud }}-${{ inputs.cluster-name }}" >> $GITHUB_ENV
          echo PR_TITLE="flux application ${{ inputs.apps }} for cluster ${{ inputs.cluster-name }} on lab ${{ inputs.lab }}-${{ inputs.cloud }} created" >> $GITHUB_ENV
          echo WORKFLOW_URL="${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}" >> $GITHUB_ENV

          mkdir -p /tmp/flux
          echo FLUX_TMP_DIR="/tmp/flux" >> $GITHUB_ENV

      - name: Render apps
        id: renderFluxApps
        #if: github.event.inputs.apps != ''
        run: |
          apps=$(echo "${{ inputs.apps }}" | tr -d ' ')
          IFS=';'

          VALUES=""

          if [ -n "${{ inputs.app-values }}" ]; then
            VALUES="${{ inputs.app-values }}, clusterName=${{ inputs.cluster-name }}"
          else
            VALUES="clusterName=${{ inputs.cluster-name }}"
          fi


          for app in $apps; do

            echo "RENDERING APP: ${app}"

            values=${{ inputs.app-values }},

            machineshop render \
            --source local \
            --template ${{ env.FLUX_TEMPLATE_DIR }}/${{ env.FLUX_APPS_TEMPLATE }} \
            --defaults ${{ env.FLUX_TEMPLATE_DIR }}/${{ env.FLUX_DEFAULTS }} \
            --values "${VALUES}" \
            --kind multikey \
            --key ${app} \
            --output file \
            --destination "${{ env.FLUX_TMP_DIR }}/${app}.yaml"

          done

          echo "APPS=FLUX-APPS: ${apps}" >> $GITHUB_OUTPUT

      - name: Render sops secrets
        id: renderSopsSecrets
        run: |
          apps=$(echo "${{ inputs.apps }}" | tr -d ' ')
          IFS=';'

          for app in $apps; do

            if yq e '.secrets | has("${app}")' ${{ env.FLUX_TEMPLATE_DIR }}/${{ env.FLUX_SOPS_TEMPLATE }}; then
              echo "Secret key(s) for '${app}' found"
              secret_keys=$(yq e ".secrets.\"${app}\"[]" ${{ env.FLUX_TEMPLATE_DIR }}/${{ env.FLUX_SOPS_TEMPLATE }})
              echo "SECRET KEYS: ${secret_keys}"

              for key in $secret_keys; do

                echo "RENDERING SECRET: ${key} for APP: ${app}"

                VALUES=$(echo "$key" | cut -d':' -f2-)
                SECRET_KEY=$(echo "$key" | cut -d':' -f1)

                machineshop render \
                --source local \
                --template ${{ env.FLUX_TEMPLATE_DIR }}/${{ env.FLUX_SOPS_TEMPLATE }} \
                --defaults ${{ env.FLUX_TEMPLATE_DIR }}/${{ env.FLUX_DEFAULTS }} \
                --values "${VALUES}" \
                --kind multikey \
                --key ${SECRET_KEY} \
                --output file \
                --destination "${{ env.FLUX_TMP_DIR }}/${app}-${SECRET_KEY}-secret.yaml"

              done

            else
              echo "No secret keys for '${app}' found."
            fi

          done

      - name: Output all rendered apps
        id: findRenderedApps
        shell: bash
        run: |
          # OUTPUT ALL FILE RENDERED FILE CONTENTS
          find "${{ env.FLUX_TMP_DIR }}" -type f -name "*.yaml" -exec cat {} \;

          # GET ALL FILENAMES
          all_rendered_files=$(find ${{ env.FLUX_TMP_DIR }} -type f -name "*.yaml")

          COMMIT_STRING=""

          for file in $all_rendered_files; do

            echo ${file}

            var=$(echo "$file:${{ env.FLUX_CLUSTER_FOLDER }}/$(basename $file)")
            COMMIT_STRING="${COMMIT_STRING}${var},"

          done

          echo ${COMMIT_STRING} | rev | cut -c2- | rev

          echo BRANCH_COMMIT_STRING="$(echo ${COMMIT_STRING} | rev | cut -c2- | rev)" >> $GITHUB_ENV

      - name: Create branch for flux config
        id: createBranch
        run: |
          machineshop create \
          --kind branch \
          --branch "${{ env.BRANCH_NAME }}" \
          --repository stuttgart-things \
          --group stuttgart-things \
          --files "${{ env.BRANCH_COMMIT_STRING }}"

      - name: Create pr for (newly created) flux branch into main
        id: createPR
        run: |
          machineshop create \
          --kind pr \
          --title "${{ env.PR_TITLE }}" \
          --branch ${{ env.BRANCH_NAME }} \
          --repository stuttgart-things \
          --group stuttgart-things \
          --labels "flux, k8s"

      - name: Create homerun notification artifact
        id: homerunConfigCreation
        run: |
          echo "---" >> homerun.yaml
          echo "title: '${{ env.PR_TITLE }}'" >> homerun.yaml
          echo "system: github" >> homerun.yaml
          echo "message: 'REPOSITORY: ${GITHUB_REPOSITORY} WORKFLOW: ${GITHUB_WORKFLOW} RUNNER_NAME: ${RUNNER_NAME} WORKFLOW-IMAGE: ${{ inputs.working-image }} ENV: k8s BRANCH: ${{ env.BRANCH_NAME }}'" >> homerun.yaml
          echo "tags: flux, k8s, apps, github-actions" >> homerun.yaml
          echo "author: ${GITHUB_ACTOR}" >> homerun.yaml
          echo "severity: SUCCESS" >> homerun.yaml
          echo "assignee: ${GITHUB_ACTOR}" >> homerun.yaml
          echo "assigneeUrl: ''" >> homerun.yaml
          echo "artifacts: ${{ env.BRANCH_COMMIT_STRING }}" >> homerun.yaml
          echo "url: ${{ env.WORKFLOW_URL }}" >> homerun.yaml

          cat homerun.yaml

      - name: Upload homerun notification artifact
        uses: actions/upload-artifact@v4.4.0
        id: homerunConfigUpload
        with:
          name: homerun
          path: |-
            homerun.yaml

  Send-Homerun-Notification:
    if: ${{ always() }}
    name: Send-Homerun-Notification
    uses: stuttgart-things/stuttgart-things/.github/workflows/call-homerun-notification.yaml@main
    needs:
      -  Create-Flux-Apps
    with:
      notification-artifact: homerun
      # notification-message: "terraform vm"
      runs-on: ${{ inputs.runner }}
      environment-name: ${{ inputs.environment-name }}
      machineshop-image: ${{ inputs.working-image }}
      continue-on-error: true
    secrets: inherit


  # Send-Homerun-Notification:
  #   if: ${{ always() }}
  #   name: Send-Homerun-Notification
  #   uses: stuttgart-things/stuttgart-things/.github/workflows/call-homerun-notification.yaml@main
  #   needs:
  #     - Create-Flux-Apps
  #   with:
  #     notification-tags: "flux, github-actions"
  #     notification-message: ${{ needs.Create-Flux-Apps.outputs.rendered_apps }}
  #     runs-on: ${{ inputs.runner }}
  #     environment-name: ${{ inputs.environment-name }}
  #     machineshop-image: ${{ inputs.working-image }}
  #     continue-on-error: true
  #   secrets: inherit
