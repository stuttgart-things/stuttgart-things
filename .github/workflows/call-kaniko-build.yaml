---
name: Kaniko Build
on:
  workflow_call:
    inputs:
      runs-on:
        required: true
        type: string
      environment-name:
        default: k8s
        required: false
        type: string
      dockerfile:
        required: false
        default: Dockerfile
        type: string
      context:
        required: false
        default: git://github.com/stuttgart-things/stuttgart-things
        type: string
      kaniko-image:
        required: false
        type: string
        default: eu.gcr.io/stuttgart-things/sthings-container:1.23.2
      context-sub-path:
        required: true
        type: string
      registry-config:
        required: false
        default: images/dev-registries.yaml
        type: string
    outputs:
      build-image-artifact:
        description: build image artifact
        value: ${{ jobs.Kaniko-Build-Push.outputs.build-image-artifact }}

jobs:
  Kaniko-Build-Push:
    runs-on: ${{ inputs.runs-on }}
    outputs:
      build-image-artifact: ${{ steps.build.outputs.DIR_EXISTS }}
    environment: ${{ inputs.environment-name }}
    container:
      image: ${{ inputs.kaniko-image }}
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.S3_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.S3_SECRET_ACCESS_KEY }}
      VAULT_ADDR: ${{ secrets.VAULT_ADDR }}
      VAULT_AUTH_METHOD: ${{ secrets.VAULT_AUTH_METHOD }}
      VAULT_NAMESPACE: ${{ secrets.VAULT_NAMESPACE }}
      VAULT_ROLE_ID: ${{ secrets.VAULT_ROLE_ID }}
      VAULT_SECRET_ID: ${{ secrets.VAULT_SECRET_ID }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # - name: Send build notification to homerun
      #   run: |

      #     SEVERITY=INFO
      #     TITLE="Start of building a container image for ${{ inputs.context-sub-path }} w/ kaniko on github actions"
      #     BODY="REPOSITORY: ${GITHUB_REPOSITORY} WORKFLOW: ${GITHUB_WORKFLOW} RUNNER_NAME: ${RUNNER_NAME} WORKFLOW-IMAGE: ${{ inputs.kaniko-image }}"
      #     SYSTEM="github"
      #     TAGS="kaniko, github-actions"

      #     machineshop push \
      #     --destination https://homerun.homerun-dev.sthings-vsphere.labul.sva.de/generic \
      #     --target homerun \
      #     --title "${TITLE}" \
      #     --system "${SYSTEM}" \
      #     --info "${BODY}" \
      #     --tags "${TAGS}" \
      #     --author "${GITHUB_ACTOR}" \
      #     --severity "${SEVERITY}"
      #   shell: bash

      - name: Build and push image w/ kaniko
        # shell: bash
        id: build
        run: |
          # CONFIGURE GIT
          export GIT_USERNAME="kaniko-bot"
          export GIT_PASSWORD="${{ secrets.GITHUB_TOKEN }}"

          # LOGIN INTO BUILD REGISTRY
          REGISTRY_URL=$(yq -r ".build.reg.url" ${{ inputs.registry-config }})
          vault_username_path=$(yq -r ".build.reg.username" ${{ inputs.registry-config }})
          vault_password_path=$(yq -r ".build.reg.password" ${{ inputs.registry-config }})

          skopeo login ${REGISTRY_URL} \
          --username $(machineshop get --path ${vault_username_path} | tail -n +8) \
          --password $(machineshop get --path ${vault_password_path} | tail -n +8)

          # ADD DELTE STEP FOR ALL EXISTING IMAGES
          curl --user $(machineshop get --path ${vault_username_path} | tail -n +8):$(machineshop get --path ${vault_password_path} | tail -n +8) https://${REGISTRY_URL}/v2/_catalog | jq -r '.repositories[]' | while read repo; do
            echo ${repo}
          #   curl --user $(machineshop get --path ${vault_username_path} | tail -n +8):$(machineshop get --path ${vault_password_path} | tail -n +8) https://registry.homerun-dev.sthings-vsphere.labul.sva.de/v2/${repo}/tags/list | jq -r '.tags[]' | while read tag; do
          #     echo "Deleting ${repo}:${tag}"
          #     curl -X DELETE --user $(machineshop get --path ${vault_username_path} | tail -n +8):$(machineshop get --path ${vault_password_path} | tail -n +8) https://registry.homerun-dev.sthings-vsphere.labul.sva.de/v2/${repo}/manifests/${tag}
          #   done
          done

          # BUILD AND CREATE IMAGE LOCAL
          BUILD_TAG=$(date "+%Y-%m-%d")

          /kaniko/executor \
          --dockerfile=${{ inputs.dockerfile }} \
          --context ${{ inputs.context }} \
          --context-sub-path ${{ inputs.context-sub-path }} \
          --destination ${REGISTRY_URL}/${{ inputs.context-sub-path }}:${BUILD_TAG}

          echo "BUILD_IMAGE=${REGISTRY_URL}/${{ inputs.context-sub-path }}:${BUILD_TAG}" >> $GITHUB_ENV
          echo "BUILD_TAG=${BUILD_TAG}" >> $GITHUB_ENV

          echo BUILD_IMAGE=$(echo ${REGISTRY_URL}/${{ inputs.context-sub-path }}:${BUILD_TAG})
          #echo "DIR_EXISTS=nginx" >> "$GITHUB_OUTPUT"

          TO_SCAN=$(echo ${REGISTRY_URL}/${{ inputs.context-sub-path }}:${BUILD_TAG} | base64 -w 0)

          echo "DIR_EXISTS=$(echo ${TO_SCAN})" >> "$GITHUB_OUTPUT"

  Scan-Image:
    needs:
      - Kaniko-Build-Push
    uses: stuttgart-things/stuttgart-things/.github/workflows/call-trivy-scan.yaml@main
    with:
      runs-on: ghr-stuttgart-things-skyami-cicd
      environment-name: labul-vsphere
      kind: image
      object: ${{ needs.Kaniko-Build-Push.outputs.build-image-artifact }}
      trivy-image: eu.gcr.io/stuttgart-things/sthings-container:1.23.2
    secrets: inherit

      # - name: Push w/ skopeo to registries
      #   id: build
      #   run: |
      #     for registry in $(yq eval -o=j ${{ inputs.registry-config }} | jq -cr '.registries[]'); do

      #       alias=$(echo $registry | jq -r '.name' -)
      #       url=$(echo $registry | jq -r '.url' -)
      #       vault_path_username=$(echo $registry | jq -r '.username' -)
      #       vault_path_password=$(echo $registry | jq -r '.password' -)

      #       echo pushing to ${url}

      #       skopeo login ${url} --username $(machineshop get --path ${vault_path_username} | tail -n +8) --password $(machineshop get --path ${vault_path_password} | tail -n +8)
      #       skopeo copy docker://${{ env.BUILD_IMAGE }} docker://${url}/$(echo ${{ inputs.context-sub-path }} | sed 's:.*/::')/$(echo ${{ inputs.context-sub-path }} | sed 's:.*/::'):${{ env.BUILD_TAG }}

      #     done
      #   shell: bash
