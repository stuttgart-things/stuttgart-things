---
name: Kaniko Build
on:
  workflow_call:
    inputs:
      runs-on:
        required: true
        type: string
      environment-name:
        default: k8s
        required: false
        type: string
      dockerfile:
        required: false
        default: Dockerfile
        type: string
      context:
        required: false
        default: git://github.com/stuttgart-things/stuttgart-things
        type: string
      kaniko-image:
        required: false
        type: string
        default: eu.gcr.io/stuttgart-things/sthings-container:v1.23.1
      context-sub-path:
        required: true
        type: string
      registry-config:
        required: false
        default: images/dev-registries.yaml
        type: string

jobs:
  kaniko-build-push:
    runs-on: ${{ inputs.runs-on }}
    environment: ${{ inputs.environment-name }}
    container:
      image: ${{ inputs.kaniko-image }}
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.S3_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.S3_SECRET_ACCESS_KEY }}
      VAULT_ADDR: ${{ secrets.VAULT_ADDR }}
      VAULT_AUTH_METHOD: ${{ secrets.VAULT_AUTH_METHOD }}
      VAULT_NAMESPACE: ${{ secrets.VAULT_NAMESPACE }}
      VAULT_ROLE_ID: ${{ secrets.VAULT_ROLE_ID }}
      VAULT_SECRET_ID: ${{ secrets.VAULT_SECRET_ID }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build and push image w/ kaniko
        run: |
          # CONFIGURE GIT
          export GIT_USERNAME="kaniko-bot"
          export GIT_PASSWORD="${{ secrets.GITHUB_TOKEN }}"

          # BUILD AND CREATE IMAGE LOCAL
          /kaniko/executor \
          --dockerfile=${{ inputs.dockerfile }} \
          --context ${{ inputs.context }} \
          --context-sub-path ${{ inputs.context-sub-path }} \
          --tar-path /tmp/$(echo ${{ inputs.context-sub-path }} | sed 's:.*/::').tar \
          --no-push
        shell: bash

      - name: Scan image w/ trivy
        run: |
          # SCAN LOCAL IMAGE FROM TARBALL
          trivy image --input /tmp/$(echo ${{ inputs.context-sub-path }} | sed 's:.*/::').tar
        shell: bash

      - name: Push w/ skopeo to dev registires
        run: |
          # GENERATE TAG IF NONE IS GIVEN
          if [ -z "${IMAGE_TAG}" ]
          then
            IMAGE_TAG=$(date '+%Y-%m-%d-%H-%M-%S')
          fi

          for registry in $(yq eval -o=j ${{ inputs.registry-config }} | jq -cr '.registries[]'); do

            alias=$(echo $registry | jq -r '.name' -)
            url=$(echo $registry | jq -r '.url' -)
            vault_path_username=$(echo $registry | jq -r '.username' -)
            vault_path_password=$(echo $registry | jq -r '.password' -)

            echo pushing to $url

            skopeo login $url --username $(machineshop get --path ${vault_path_username} | tail -n +8) --password $(machineshop get --path ${vault_path_password} | tail -n +8)
            skopeo --insecure-policy copy -f oci tarball:/tmp/$(echo ${{ inputs.context-sub-path }} | sed 's:.*/::').tar docker://${url}/$(echo ${{ inputs.context-sub-path }} | sed 's:.*/::')/${IMAGE_TAG}

          done
        shell: bash