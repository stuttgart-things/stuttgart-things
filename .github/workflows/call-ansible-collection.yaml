---
name: Build ansible collection
on:
  workflow_call:
    inputs:
      runs-on:
        required: true
        type: string
      environment-name:
        default: k8s
        required: true
        type: string
      ansible-image:
        default: eu.gcr.io/stuttgart-things/sthings-ansible:10.1.0-1
        type: string
        required: false
      continue-error:
        default: false
        required: true
        type: boolean
      collection-file:
        required: true
        type: string
      s3-instance-profiles:
        required: true
        type: string
      requirements-file:
        required: true
        type: string

jobs:
  Ansible-Collection-Build:
    outputs:
      version: ${{ steps.version.outputs.version }}
      artifact: ${{ steps.build.outputs.artifact }}
    runs-on: ${{ inputs.runs-on }}
    container:
      image: ${{ inputs.ansible-image }}
    env:
      VAULT_ADDR: ${{ secrets.VAULT_ADDR }}
      VAULT_AUTH_METHOD: ${{ secrets.VAULT_AUTH_METHOD }}
      VAULT_NAMESPACE: ${{ secrets.VAULT_NAMESPACE }}
      VAULT_ROLE_ID: ${{ secrets.VAULT_ROLE_ID }}
      VAULT_SECRET_ID: ${{ secrets.VAULT_SECRET_ID }}
    environment: ${{ inputs.environment-name }}
    continue-on-error: ${{ inputs.continue-error }}
    steps:
      - name: Checkout code
        id: git
        uses: actions/checkout@v4.1.7
        with:
          path: source
          fetch-depth: '0'

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v44
        with:
          since_last_remote_commit: true
          path: source
          files: |
            ansible/collections/**.yaml

      - name: List all changed files
        env:
          ALL_CHANGED_FILES: ${{ steps.changed-files.outputs.all_changed_files }}
        run: |
          collections=()
          for file in ${ALL_CHANGED_FILES}; do
            echo "$file was changed"
            collections+=("$file")
          done

          echo hello $(jq -c -n '$ARGS.positional' --args "${collections[@]}" )
        shell: bash

      - name: Init collection
        id: init
        run: |
          echo 'READ COLLECTION FILE'
          cat source/${{ inputs.collection-file }}
          yq -r ".requirements" source/${{ inputs.collection-file }} > ./roles.yaml

          echo 'INIT COLLECTION'
          ansible-galaxy collection init $(yq -r ".namespace" source/${{ inputs.collection-file }}).$(yq -r ".name" source/${{ inputs.collection-file }})

          # SET WORKING DIRS AS ENV-VARS
          echo "COLLECTION_NAME=$(yq -r ".name" source/${{ inputs.collection-file }})" >> $GITHUB_ENV
          echo "COLLECTION_NAMESPACE=$(yq -r ".namespace" source/${{ inputs.collection-file }})" >> $GITHUB_ENV
          echo "COLLECTION_FILEPATH=source/${{ inputs.collection-file }}" >> $GITHUB_ENV
          echo "COLLECTION_ROLES_DIR=$GITHUB_WORKSPACE/$(yq -r ".namespace" source/${{ inputs.collection-file }})/$(yq -r ".name" source/${{ inputs.collection-file }})/roles" >> $GITHUB_ENV
          echo "COLLECTION_DIR=$GITHUB_WORKSPACE/$(yq -r ".namespace" source/${{ inputs.collection-file }})/$(yq -r ".name" source/${{ inputs.collection-file }})" >> $GITHUB_ENV

          UPDATED_TAG=`date "+%y.%d%M.%S"` #DEV TAG
          #echo "COLLECTION_VERSION=$(yq -r ".version" source/${{ inputs.collection-file }})" >> $GITHUB_ENV
          echo "COLLECTION_VERSION=$(echo ${UPDATED_TAG} | sed 's/\0//g')" >> $GITHUB_ENV

      - name: Install roles into collection
        id: roles
        run: |
          if [ "$(yq -r ".requirements" source/${{ inputs.collection-file }})" = "null" ]; then
            echo 'NO ROLES FOUND IN COLLECTION FILE'
            echo "ROLES_INCLUDED=FALSE" >> $GITHUB_ENV

          else
            echo 'INSTALL ROLES INTO COLLECTION'
            yq -r ".requirements" source/${{ inputs.collection-file }} > ./roles.yaml
            ansible-galaxy install -r ./roles.yaml -p ${{ env.COLLECTION_ROLES_DIR }}
            echo "COLLECTION_FILEPATH=source/${{ inputs.collection-file }}" >> $GITHUB_ENV
            echo "ROLES_INCLUDED=TRUE" >> $GITHUB_ENV

          fi
        shell: bash

      - name: Change role references
        id: role-refs
        if: ${{ env.ROLES_INCLUDED == 'TRUE' }}
        run: |
          for role in "${{ env.COLLECTION_ROLES_DIR }}"/*
          do
            # SET/ECHO ROLE NAMES
            collection_role_name=$(echo "$( basename $role)" | tr - _)
            echo existing role names: $(basename $role)
            echo "collection role names: $collection_role_name"

            # GET ALL FILES IN ROLE
            all_files_role=$(find ${{ env.COLLECTION_ROLES_DIR }}/$(basename $role) -type f)
            echo all_files_role: $all_files_role

            echo REPLACE ALL ROLE REFERENCES
            sed -i "s/$(basename $role)/${collection_role_name}/g" $all_files_role

            echo RENAME ROLE DIR
            mv ${{ env.COLLECTION_ROLES_DIR }}/$(basename $role) ${{ env.COLLECTION_ROLES_DIR }}/$collection_role_name
          done

          ls -lta ${{ env.COLLECTION_ROLES_DIR }}

      - name: Rewrite role includes
        id: rewrite-role-includes
        run: |
          # SET ROLES DIR
          ROLES_DIR=$(ls ${{ env.COLLECTION_ROLES_DIR }})

          # LOOP OVER ALL ROLES
          for ROLE in ${ROLES_DIR};
            do

            echo CHECKING: ${ROLE}

              for ROLE_NAME in ${ROLES_DIR};

                do
                  OLD_ROLE_NAME=$(echo ${ROLE} | tr _ -)
                  NEW_ROLE_NAME=$(echo ${{ env.COLLECTION_NAMESPACE }}.${{ env.COLLECTION_NAME }}.${ROLE})

                  echo OLD ROLE NAME: $OLD_ROLE_NAME
                  echo NEW ROLE NAME: $NEW_ROLE_NAME

                  ls ${{ env.COLLECTION_ROLES_DIR }}/${ROLE_NAME}/tasks

                  # FIND FILES
                  find ${{ env.COLLECTION_ROLES_DIR }}/${ROLE_NAME}/tasks -type f

                  # REPLACE
                  sed -i "s/${OLD_ROLE_NAME}/${NEW_ROLE_NAME}/g" $(find ${{ env.COLLECTION_ROLES_DIR }}/${ROLE_NAME}/tasks -type f)
              done
          done

      - name: Adding playbooks
        id: plays
        run: |
          play_dir=${{ env.COLLECTION_DIR }}/playbooks
          mkdir -p ${play_dir}

          # GET COUNT OF ALL KEYS OF SUBKEY PLAYBOOKS
          count_plays=$(yq '.playbooks | keys' ${{ env.COLLECTION_FILEPATH }} | wc -l)
          echo FOUND $count_plays PLAYBOOKS FOR THIS COLLECTION

          COUNTER=0
          while [ $COUNTER != $count_plays ]; do
             echo PROCESS PLAYBOOK: $COUNTER

             # GET PLAYBOOK NAME AND CONTENT
             yq ".playbooks[$COUNTER].name" ${{ env.COLLECTION_FILEPATH }}
             filename=$(yq ".playbooks[$COUNTER].name" ${{ env.COLLECTION_FILEPATH }})
             play_content=$(yq ".playbooks[$COUNTER].play" ${{ env.COLLECTION_FILEPATH }})

             # CREATE PLAYBOOK ON FS
             echo "$play_content" > "${play_dir}/${filename}.yaml"
             let COUNTER=COUNTER+1
          done

          # LIST CREATED PLAYS
          ls -lta ${play_dir}

      - name: Adding vars
        id: vars
        run: |
          vars_dir=${{ env.COLLECTION_DIR }}/playbooks/vars
          mkdir -p ${vars_dir}

          # GET COUNT OF ALL KEYS OF SUBKEY VARS
          count_vars_files=$(yq '.vars | keys' ${{ env.COLLECTION_FILEPATH }} | wc -l)
          echo FOUND $count_vars_files VARS FILES FOR THIS COLLECTION

          COUNTER=0
          while [ $COUNTER != $count_vars_files ]; do
             echo PROCESS VARS FILE: $COUNTER

             # GET VARS FILE NAME AND CONTENT
             yq ".vars[$COUNTER].name" ${{ env.COLLECTION_FILEPATH }}
             filename=$(yq ".vars[$COUNTER].name" ${{ env.COLLECTION_FILEPATH }})
             vars_file_content=$(yq ".vars[$COUNTER].file" ${{ env.COLLECTION_FILEPATH }})

             # CREATE VARS FILE ON FS
             echo "$vars_file_content" > "${vars_dir}/${filename}.yaml"
             let COUNTER=COUNTER+1
          done

          # LIST CREATED VARS FILES
          ls -lta ${vars_dir}

      - name: Adding templates
        id: templates
        run: |
          templates_dir=${{ env.COLLECTION_DIR }}/playbooks/templates
          mkdir -p ${templates_dir}

          # GET COUNT OF ALL KEYS OF SUBKEY TEMPLATES
          count_template_files=$(yq '.templates | keys' ${{ env.COLLECTION_FILEPATH }} | wc -l)
          echo FOUND $count_template_files TEMPLATE FILES FOR THIS COLLECTION

          COUNTER=0
          while [ $COUNTER != $count_template_files ]; do
              echo PROCESS TEMPLATE FILE: $COUNTER

              # GET TEMPLATE FILE NAME AND CONTENT
              yq ".templates[$COUNTER].name" ${{ env.COLLECTION_FILEPATH }}
              filename=$(yq ".templates[$COUNTER].name" ${{ env.COLLECTION_FILEPATH }})
              template_file_content=$(yq ".templates[$COUNTER].file" ${{ env.COLLECTION_FILEPATH }})

              # CREATE VARS FILE ON FS
              echo "$template_file_content" > "${templates_dir}/${filename}.yaml"
              let COUNTER=COUNTER+1
          done

          # LIST CREATED TEMPLATE FILES
          ls -lta ${templates_dir}

      - name: Adding plugins modules
        id: modules
        run: |
          modules_dir=${{ env.COLLECTION_DIR }}/plugins/modules
          mkdir -p ${modules_dir}

          # GET COUNT OF ALL KEYS OF SUBKEY MODULES
          count_module_files=$(yq '.modules | keys' ${{ env.COLLECTION_FILEPATH }} | wc -l)
          echo FOUND $count_module_files MODULE FILES FOR THIS COLLECTION

          COUNTER=0
          while [ $COUNTER != $count_module_files ]; do
              echo PROCESS MODULE FILE: $COUNTER

              # GET MODULE FILE NAME AND CONTENT
              yq ".modules[$COUNTER].name" ${{ env.COLLECTION_FILEPATH }}
              filename=$(yq ".modules[$COUNTER].name" ${{ env.COLLECTION_FILEPATH }})
              modules_file_content=$(yq ".modules[$COUNTER].file" ${{ env.COLLECTION_FILEPATH }})

              # CREATE MODULES FILE ON FS
              echo "$modules_file_content" > "${modules_dir}/${filename}.py"
              let COUNTER=COUNTER+1
          done

          # LIST CREATED MODULE FILES
          ls -lta ${vars_dir}

      - name: Update meta information
        id: meta
        run: |
          echo 'UPDATE META INFORMATION'
          yq e -i '.version = "${{ env.COLLECTION_VERSION }}"' ${{ env.COLLECTION_DIR }}/galaxy.yml

      - name: Build collection
        id: build
        run: |
          echo 'BUILD COLLECTION'
          ansible-galaxy collection build ${{ env.COLLECTION_DIR }}
          echo "COLLECTION_PACKAGE=$(ls -t *.gz | head -1)" >> $GITHUB_ENV
          echo "COLLECTION_PACKAGE_PATH=$PWD/$(ls -t *.gz | head -1)" >> $GITHUB_ENV
          # echo "artifact=$(ls -t *.gz | head -1)"  >> $GITHUB_OUTPUT

      - name: Push collection to s3
        id: instances
        run: |
          ARTIFACT=$(ls -t *.gz | head -1)

          for instance in $(yq eval -o=j source/${{ inputs.s3-instance-profiles }} | jq -cr '.instances[]'); do

            ADDR=$(echo $instance | jq -r '.addr' -)
            SEURE=$(echo $instance | jq -r '.secure' -)
            VAULT_PATH_ACCESSKEY=$(echo $instance | jq -r '.accessKey' -)
            VAULT_PATH_SECRETKEY=$(echo $instance | jq -r '.secretKey' -)
            BUCKET=$(echo $instance | jq -r '.bucket' -)

            echo PUSHING COLLECTION TO BUCKET: ${BUCKET} ON ${MINIO_ADDR}

            export MINIO_SECURE=${SEURE}
            export MINIO_ADDR=${ADDR}
            export MINIO_ACCESS_KEY=$(machineshop get --path ${VAULT_PATH_ACCESSKEY} | tail -n +8)
            export MINIO_SECRET_KEY=$(machineshop get --path ${VAULT_PATH_SECRETKEY} | tail -n +8)

            machineshop push \
            --target minio \
            --source ${{ env.COLLECTION_PACKAGE_PATH }} \
            --destination ${BUCKET}:${ARTIFACT}

          done

      - name: Update requirements file
        id: update
        run: |
          COLLECTION_NAME=$(yq -r ".name" source/${{ inputs.collection-file }})
          requirements_file="source/${{ inputs.requirements-file }}"

          UPDATED_TAG=`date "+%y%m%d.%H%M.%S"` # DEV TAG
          echo UPDATED VERSION: ${UPDATED_TAG}

          sed -i "s|\(${COLLECTION_NAME}.*-\)[0-9]\+\.[0-9]\+\.[0-9]\+\(.tar.gz\)|\1${UPDATED_TAG}\2|" $requirements_file
          cat $requirements_file

          echo ${{ github.head_ref || github.ref_name }} 
          
          #machineshop create \
          #--kind branch \
          #--branch hello \
          #--repository stuttgart-things \
          #--group stuttgart-things \
          #--files "artifact.txt:Dockerfile" 

      - name: Upload collection
        id: upload
        uses: actions/upload-artifact@v4.3.4
        with:
          name: ${{ env.COLLECTION_PACKAGE }}
          path: ${{ env.COLLECTION_PACKAGE_PATH }}

      - name: Release module
        if: ${{ github.ref == 'refs/heads/main' }}
        uses: ncipollo/release-action@v1.14.0
        with:
          name: "${{ env.COLLECTION_NAMESPACE }}.${{ env.COLLECTION_NAME }}-${{ env.COLLECTION_VERSION }}"
          artifacts: ${{ env.COLLECTION_PACKAGE_PATH }}
          body: "${{ env.COLLECTION_NAMESPACE }}.${{ env.COLLECTION_NAME }}-${{ env.COLLECTION_VERSION }}"
          tag: ${{ env.COLLECTION_VERSION }}
          allowUpdates: true # existing release can be overwritten
