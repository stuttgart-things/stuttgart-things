---
name: Create CrossplaneVM
on:
  workflow_dispatch:
    inputs:
      count-vm:
        type: choice
        description: COUNT OF VMS
        options:
          - 1
          - 2
          - 3
          - 4
          - 5
      vm-name:
        required: true
        type: string
      vm-size:
        type: choice
        description: T-Shirt Size of VM
        options:
          - S
          - M
          - L
          - XL
      os-version:
        type: choice
        description: TEMPLATE OF VM
        options:
          - ubuntu22
          - ubuntu23
          - rocky9
      lab-cloud:
        type: choice
        description: Lab + Cloud
        options:
          - labul-vsphere
          - labda-vsphere
          - labul-pve
      vm-folder:
        type: choice
        description: FOLDER ON PVE
        options:
          - testing
          - infra
      overwrites:
        required: false
        type: string
        default: ""
      crossplane-provider:
        type: choice
        description: CROSSPLANE PROVIDER NAME
        options:
          - minio
          - incluster
      runner:
        required: true
        type: string
        default: ghr-stuttgart-things-sthings-cicd

jobs:
  Create-VM-Config:
    permissions:
      contents: write
      pull-requests: write
    runs-on: ${{ inputs.runner }}
    outputs:
      template: ${{ steps.check.outputs.template }}
      provider: ${{ steps.check.outputs.provider }}
      ansible: ${{ steps.check.outputs.ansible }}
      destination: ${{ steps.check.outputs.destination }}

    environment: k8s
    container:
      image: eu.gcr.io/stuttgart-things/machineshop:v1.7.2
    continue-on-error: false
    steps:
      - name: Pip install
        id: pip
        run: |
          pip install jinja2 pyyaml argparse

      - name: Create VM config
        id: renderConfig
        uses: jannekem/run-python-script-action@v1.7
        with:
          script: |
            from jinja2 import Template
            import os
            import random
            import yaml

            # WRITE YAML TO DISK
            def write_yaml_todisk(output_path):
              with open(output_path, 'w') as outfile:
                yaml.dump(vm_config, outfile, default_flow_style=False, sort_keys=False)

            # RENDER INVENTORY
            def render_inventory(values):
              template = Template(inventoryTemplate)
              renderedTemplate = template.render(values)

              return str(renderedTemplate)

            # GET RANDOM ITEM FROM LIST
            def get_random_fromlist(list):
              random_num = random.choice(list)

              return str(random_num)

            inventoryTemplate = "[{% for count in range(0, vm_count) %}{% if loop.first%}{{ vm }}.{{ domain }}{% else %}{{ vm }}.{{ domain }}-{{ loop.index }}{% endif %}{% if not loop.last %}, {% endif %}{% endfor %}]"

            domain = {
                'labul': 'labul.sva.de',
                'labda': 'tiab.labda.sva.de',
            }

            inventory = {
                'vm': '${{ inputs.vm-name }}',
                'domain': domain['labul'],
                'vm_count': ${{ inputs.count-vm }},
            }

            cpu = {
                'S': 2,
                'M': 4,
                'L': 6,
                'XL': 8,
            }

            memory = {
                'S': 4096,
                'M': 6144,
                'L': 8192,
                'XL': 12288,
            }

            disk = {
                'S': 32,
                'M': 64,
                'L': 96,
                'XL': 128,
            }

            os = {
                'labul-vsphere': {
                    'ubuntu22': 'sthings-u22',
                    'ubuntu23': 'sthings-u23',
                    'rocky9': 'sthings-r9'
                }
            }

            datastores = {
                'labul-vsphere': ['/LabUL/datastore/UL-ESX-SAS-01', '/LabUL/datastore/UL-ESX-SAS-02', '/LabUL/datastore/UL-V5010-01-LUN1', '/LabUL/datastore/UL-V5010-01-LUN2', '/LabUL/datastore/UL-V5010-01-LUN3'],
                'labda-vsphere': ['/NetApp-HCI-Datacenter/datastore/DatastoreCluster/NetApp-HCI-Datastore-01', '/NetApp-HCI-Datacenter/datastore/DatastoreCluster/NetApp-HCI-Datastore-02', '/NetApp-HCI-Datacenter/datastore/DatastoreCluster/NetApp-HCI-Datastore-03', '/NetApp-HCI-Datacenter/datastore/DatastoreCluster/NetApp-HCI-Datastore-04'],
            }

            networks = {
                'labul-vsphere': ['/LabUL/network/MGMT-10.31.101', '/LabUL/network/LAB-10.31.102', '/LabUL/network/LAB-10.31.103', '/LabUL/network/LAB-10.31.104'],
                'labda-vsphere': ['/NetApp-HCI-Datacenter/network/tiab-prod'],
            }

            env = {
                'labul-vsphere': {
                    'lab': 'labul',
                    'rootFolder': 'stuttgart-things',
                    'vmFirmware': 'bios',
                    'datacenter': '/LabUL',
                    'resourcePool': '/LabUL/host/Cluster-V6.5/Resources',
                    'templatePath': '/LabUL/vm/stuttgart-things/vm-templates',
                },
                'labda-vsphere': {
                    'lab': 'labda',
                    'rootFolder': 'stuttgart-things',
                    'vmFirmware': 'bios',
                    'datacenter': '/NetApp-HCI-Datacenter',
                    'resourcePool': 'Resources',
                    'templatePath': '/NetApp-HCI-Datacenter/vm/stuttgart-things/vm-templates',
                }
            }

            crossplane = {
                'labul-vsphere' : {
                    'namespace' : 'crossplane-system',
                    'tfvars' : 'vsphere-tfvars',
                    'secretKey' : 'terraform.tfvars',
                    's3_region' : 'main',
                    's3_bucket' : 'vspherevm-labul',
                    's3_endpoint' : 'https://artifacts.app1.sthings-vsphere.labul.sva.de',
                },
                'labda-vsphere' : {
                    'namespace' : 'crossplane-system',
                    'tfvars' : 'vsphere-labda-tfvars',
                    'secretKey' : 'terraform.tfvars',
                    's3_region' : 'main',
                    's3_bucket' : 'vspherevm-labda',
                    's3_endpoint' : 'https://artifacts.app1.sthings-vsphere.labul.sva.de',
                }
            }

            tekton = {
              'workingImage' : 'eu.gcr.io/stuttgart-things/sthings-ansible:9.3.0',
              'tektonProviderRef': 'kubernetes-incluster',
              'playbooks': ['ansible/playbooks/prepare-env.yaml', 'ansible/playbooks/base-os.yaml'],
              'roles': ['https://github.com/stuttgart-things/install-requirements.git', 'https://github.com/stuttgart-things/manage-filesystem.git', 'https://github.com/stuttgart-things/install-configure-vault.git'],
            }

            vm_config = {
              "vmCount" : '${{ inputs.count-vm }}',
              "vmName" : '${{ inputs.vm-name }}',
              "vmMemory" : memory['${{ inputs.vm-size }}'],
              "vmCpu" : cpu['${{ inputs.vm-size }}'],
              "vmTemplate" : os['${{ inputs.lab-cloud }}']['${{ inputs.os-version }}'],
              "vmDisk" : disk['${{ inputs.vm-size }}'],
              "vmDatastore" : get_random_fromlist(datastores['${{ inputs.lab-cloud }}']),
              "vmNetwork" : get_random_fromlist(networks['${{ inputs.lab-cloud }}']),
              "hosts" : render_inventory(inventory),
              "lab" : env['${{ inputs.lab-cloud }}']['lab'],
              "vmFolder" : env['${{ inputs.lab-cloud }}']['rootFolder']+'/${{ inputs.vm-folder }}',
              "namespace" : crossplane['${{ inputs.lab-cloud }}']['namespace'],
              "vmFirmware" : env['${{ inputs.lab-cloud }}']['vmFirmware'],
              "datacenter" : env['${{ inputs.lab-cloud }}']['datacenter'],
              "resourcePool" : env['${{ inputs.lab-cloud }}']['resourcePool'],
              "templatePath" : env['${{ inputs.lab-cloud }}']['templatePath'],
              "tfvars" : crossplane['${{ inputs.lab-cloud }}']['tfvars'],
              "secretKey" : crossplane['${{ inputs.lab-cloud }}']['secretKey'],
              "crossplaneProvider" : '${{ inputs.crossplane-provider }}-${{ inputs.vm-name }}',
              "s3Region" : crossplane['${{ inputs.lab-cloud }}']['s3_region'],
              "s3Bucket" : crossplane['${{ inputs.lab-cloud }}']['s3_bucket'],
              "s3Endpoint" : crossplane['${{ inputs.lab-cloud }}']['s3_endpoint'],
              "stateKey" : '${{ inputs.vm-name }}',
              "workingImage" : tekton['workingImage'],
              "tektonProviderRef" : tekton['tektonProviderRef'],
              "playbooks" : tekton['playbooks'],
              "roles" : tekton['roles'],
            }

            def main():
                # WRITE VM CONFIG YAML TO DISK
                write_yaml_todisk('./${{ inputs.vm-name }}.yaml')

            if __name__ == '__main__':
                main()

      - name: Merge overwrites
        id: mergeOverwrites
        uses: jannekem/run-python-script-action@v1.7
        with:
          script: |
            import argparse
            import yaml

            def merge_two_dicts(x, y):
                z = x.copy() 
                z.update(y)
                return z

            def write_yaml_todisk(vm_config, output_path):
              with open(output_path, 'w') as outfile:
                yaml.dump(vm_config, outfile, default_flow_style=False, sort_keys=False)

            def main():
              with open('./${{ inputs.vm-name }}.yaml', 'r') as f:
                  values = yaml.load(f, Loader=yaml.SafeLoader)

              # SPLIT ARGS BY DELIMITER
              overwrites = '${{ inputs.overwrites }}'
              overwrite = overwrites.split(";")
              
              all_overwrites = {}
              
              # LOOP OVER ARGS
              for x in overwrite:
                split = x.split("=")
                all_overwrites[split[0].strip()]=split[1].strip()
              
              # COMBINE DICTS
              print(all_overwrites)
              updated_vm_config = merge_two_dicts(values, all_overwrites)
              print(updated_vm_config)

              write_yaml_todisk(updated_vm_config, './${{ inputs.vm-name }}.yaml')
              
            if __name__ == '__main__':
                main()

      - name: Output VM config
        id: check
        run: |
          cat ${{ inputs.vm-name }}.yaml
          LAB=$(echo "${{ inputs.lab-cloud }}" | cut -d'-' -f1)
          CR_NAME=$(echo "${{ inputs.lab-cloud }}" | cut -d'-' -f2)vm

          echo "template=crossplane/claims/${CR_NAME}.yaml" >> "$GITHUB_OUTPUT"
          echo "provider=crossplane/providerConfig/terraform-${{ inputs.crossplane-provider }}.yaml" >> "$GITHUB_OUTPUT"
          echo "ansible=crossplane/claims/ansiblerun-baseos.yaml" >> "$GITHUB_OUTPUT"
          echo "destination=crossplane/claims/${CR_NAME}/${LAB}/" >> "$GITHUB_OUTPUT"

      - name: Upload VM config
        id: upload
        uses: actions/upload-artifact@v4.1.0
        with:
          name: ${{ inputs.vm-name }}
          path: ${{ inputs.vm-name }}.yaml

  Create-VM-Claim:
    name: Render VM Claim
    uses: stuttgart-things/stuttgart-things/.github/workflows/render-pr-vm.yaml@main
    needs: Create-VM-Config
    with:
      environment-name: k8s
      runs-on: ${{ inputs.runner }}
      vm-name: ${{ inputs.vm-name }}
      template-path: ${{ needs.Create-VM-Config.outputs.template }}
      provider-template-path: ${{ needs.Create-VM-Config.outputs.provider }}
      ansible-template-path: ${{ needs.Create-VM-Config.outputs.ansible }}
      destination-dir: ${{ needs.Create-VM-Config.outputs.destination }}
    secrets: inherit
