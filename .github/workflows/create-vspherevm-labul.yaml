---
name: Create VsphereVM LabUL
on:
  workflow_dispatch:
    inputs:
      count-vm:
        type: choice
        description: COUNT OF VMS
        options:
          - 1
          - 2
          - 3
          - 4
          - 5
      vm-name:
        required: true
        type: string
      vm-cpu:
        type: choice
        description: COUNT OF CPUS
        options:
          - 2
          - 4
          - 6
          - 8
      vm-memory:
        type: choice
        description: MEMORY OF VM
        options:
          - 2048
          - 4096
          - 6144
          - 8196
      vm-disk:
        type: choice
        description: SIZE OF DISK
        options:
          - 64
          - 96
          - 128
          - 20
          - 32
      vm-template:
        type: choice
        description: TEMPLATE OF VM
        options:
          - sthings-u22
          - sthings-u23
          - sthings-r9
      vm-network:
        type: choice
        description: NETWORK OF VM
        options:
          - /LabUL/network/MGMT-10.31.101
          - /LabUL/network/LAB-10.31.102
          - /LabUL/network/LAB-10.31.103
          - /LabUL/network/LAB-10.31.104
      datastore:
        type: choice
        description: DATASTORE OF VM
        options:
          - /LabUL/datastore/UL-ESX-SAS-01
          - /LabUL/datastore/UL-ESX-SAS-02
          - /LabUL/datastore/UL-V5010-01-LUN1
          - /LabUL/datastore/UL-V5010-01-LUN2
          - /LabUL/datastore/UL-V5010-01-LUN3
      vm-folder:
        type: choice
        description: FOLDER ON PVE
        options:
          - stuttgart-things/testing
          - stuttgart-things/infra
      crossplane-provider:
        type: choice
        description: CROSSPLANE PROVIDER NAME
        options:
          - minio
          - incluster

jobs:
  Create-VM-Config:
    permissions:
      contents: write
      pull-requests: write
    runs-on: ghr-stuttgart-things-sthings-cicd
    environment: k8s
    container:
      image: eu.gcr.io/stuttgart-things/machineshop:v1.7.2
    continue-on-error: false
    steps:
      - name: Pip install
        id: pip
        run: |
          pip install jinja2

      - name: Create vm config
        id: config1
        uses: jannekem/run-python-script-action@v1.7
        with:
          script: |
            from jinja2 import Template
            import os
            import random

            inventoryTemplate = "[{% for count in range(0, vm_count) %}{% if loop.first%}{{ vm }}.{{ domain }}{% else %}{{ vm }}.{{ domain }}-{{ loop.index }}{% endif %}{% if not loop.last %}, {% endif %}{% endfor %}]"

            domain = {
                'labul': 'labul.sva.de',
                'labda': 'tiab.labda.sva.de',
            }

            values = {
                'vm': 'minnesota',
                'domain': domain['labul'],
                'vm_count': 4,
            }

            cpu = {
                'S': 2,
                'M': 4,
                'L': 6,
                'XL': 8,
            }

            memory = {
                'S': 4069,
                'M': 6144,
                'L': 8192,
                'XL': 12288,
            }

            disk = {
                'S': 32,
                'M': 64,
                'L': 96,
                'XL': 128,
            }

            os = {
                'labul-vsphere': {
                    'ubuntu22': 'sthings-u2',
                    'ubuntu23': 'sthings-u23',
                    'rocky9': 'sthings-r9'
                }
            }

            datastores = {
                'labul-vsphere': ['/LabUL/datastore/UL-ESX-SAS-01', '/LabUL/datastore/UL-ESX-SAS-02', '/LabUL/datastore/UL-V5010-01-LUN1', '/LabUL/datastore/UL-V5010-01-LUN2', '/LabUL/datastore/UL-V5010-01-LUN3'],
            }

            networks = {
                'labul-vsphere': ['/LabUL/network/MGMT-10.31.101', '/LabUL/network/LAB-10.31.102', '/LabUL/network/LAB-10.31.103', '/LabUL/network/LAB-10.31.104'],
            }

            def render_template(values):
              template = Template(inventoryTemplate)
              renderedTemplate = template.render(values)

              return str(renderedTemplate)

            # GET RANDOM ITEM FROM LIST
            def get_random_fromlist(list):
              random_num = random.choice(list)

              return str(random_num)

            def main():

                # SET VM STATS


                set_env("DISK", print(disk['L']))

                print(memory['L'])
                print(cpu['L'])
                print(os['labul-vsphere']['ubuntu23'])

                print(get_random_fromlist(datastores['labul-vsphere']))
                print(get_random_fromlist(networks['labul-vsphere']))

                # TEKTON RENDER HOSTS
                renderedHosts = render_template(values)
                print(renderedHosts)

            if __name__ == '__main__':
                main()


      - name: Create vm config
        id: config2
        run: |
          echo '---' >> ./${{ inputs.vm-name }}.yaml
          echo 'DISKKK: ${{ env.DISK }}' >> ./${{ inputs.vm-name }}.yaml
          echo 'vmCount: ${{ inputs.count-vm }}' >> ./${{ inputs.vm-name }}.yaml
          echo 'vmName: ${{ inputs.vm-name }}' >> ./${{ inputs.vm-name }}.yaml
          echo 'vmCpu: ${{ inputs.vm-cpu }}' >> ./${{ inputs.vm-name }}.yaml
          echo 'vmMemory: ${{ inputs.vm-memory }}' >> ./${{ inputs.vm-name }}.yaml
          echo 'vmDisk: ${{ inputs.vm-disk }}' >> ./${{ inputs.vm-name }}.yaml
          echo 'vmTemplate: ${{ inputs.vm-template }}' >> ./${{ inputs.vm-name }}.yaml
          echo 'vmNetwork: ${{ inputs.vm-network }}' >> ./${{ inputs.vm-name }}.yaml
          echo 'vmDatastore: ${{ inputs.datastore }}' >> ./${{ inputs.vm-name }}.yaml
          echo 'vmFolder: ${{ inputs.vm-folder }}' >> ./${{ inputs.vm-name }}.yaml
          echo 'lab: labul' >> ./${{ inputs.vm-name }}.yaml
          echo 'namespace: crossplane-system' >> ./${{ inputs.vm-name }}.yaml
          echo 'vmFirmware: bios' >> ./${{ inputs.vm-name }}.yaml
          echo 'datacenter: /LabUL' >> ./${{ inputs.vm-name }}.yaml
          echo 'resourcePool: /LabUL/host/Cluster-V6.5/Resources' >> ./${{ inputs.vm-name }}.yaml
          echo 'templatePath: /LabUL/vm/stuttgart-things/vm-templates' >> ./${{ inputs.vm-name }}.yaml
          echo 'tfvars: vsphere-tfvars' >> ./${{ inputs.vm-name }}.yaml
          echo 'secretKey: terraform.tfvars' >> ./${{ inputs.vm-name }}.yaml
          echo 'crossplaneProvider: ${{ inputs.crossplane-provider }}-${{ inputs.vm-name }}' >> ./${{ inputs.vm-name }}.yaml
          echo 's3Region: main' >> ./${{ inputs.vm-name }}.yaml
          echo 's3Bucket: vspherevm-labul' >> ./${{ inputs.vm-name }}.yaml
          echo 's3Endpoint: https://artifacts.app1.sthings-vsphere.labul.sva.de' >> ./${{ inputs.vm-name }}.yaml
          echo 'stateKey: ${{ inputs.vm-name }}' >> ./${{ inputs.vm-name }}.yaml
          # TEKTON
          echo 'playbooks: [ansible/playbooks/prepare-env.yaml, ansible/playbooks/base-os.yaml]' >> ./${{ inputs.vm-name }}.yaml
          echo 'ansibleWorkingImage: eu.gcr.io/stuttgart-things/sthings-ansible:9.21.0' >> ./${{ inputs.vm-name }}.yaml
          echo 'tektonProviderRef: kubernetes-incluster' >> ./${{ inputs.vm-name }}.yaml
          cat ${{ inputs.vm-name }}.yaml

      - name: Upload VM config
        id: upload
        uses: actions/upload-artifact@v4.1.0
        with:
          name: ${{ inputs.vm-name }}
          path: ${{ inputs.vm-name }}.yaml

  # Create-VsphereVM-CR:
  #   name: Render And Create VsphereVM CR
  #   uses: stuttgart-things/stuttgart-things/.github/workflows/render-pr-vm.yaml@main
  #   needs: Create-VM-Config
  #   with:
  #     environment-name: k8s
  #     runs-on: ghr-stuttgart-things-sthings-cicd
  #     vm-name: ${{ inputs.vm-name }}
  #     template-path: crossplane/claims/vspherevm.yaml
  #     destination-dir: crossplane/claims/vspherevm/labul/
  #     provider-template-path: crossplane/providerConfig/terraform-${{ inputs.crossplane-provider }}.yaml
  #   secrets: inherit
