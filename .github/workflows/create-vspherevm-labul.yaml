---
name: Create VsphereVM LabUL
on:
  workflow_dispatch:
    inputs:
      count-vm:
        type: choice
        description: COUNT OF VMS
        options:
          - 1
          - 2
          - 3
          - 4
          - 5
      vm-name:
        required: true
        type: string
      vm-size:
        type: choice
        description: T-Shirt Size of VM
        options:
          - S
          - M
          - L
          - XL
      os-version:
        type: choice
        description: TEMPLATE OF VM
        options:
          - ubuntu22
          - ubuntu23
          - rocky9
      lab-cloud:
        type: choice
        description: Lab + Cloud
        options:
          - labul-vsphere
          - labda-vsphere
          - labul-pve
      vm-folder:
        type: choice
        description: FOLDER ON PVE
        options:
          - testing
          - infra
      crossplane-provider:
        type: choice
        description: CROSSPLANE PROVIDER NAME
        options:
          - minio
          - incluster

jobs:
  Create-VM-Config:
    permissions:
      contents: write
      pull-requests: write
    runs-on: ghr-stuttgart-things-sthings-cicd
    environment: k8s
    container:
      image: eu.gcr.io/stuttgart-things/machineshop:v1.7.2
    continue-on-error: false
    steps:
      - name: Pip install
        id: pip
        run: |
          pip install jinja2 pyyaml

      - name: Create vm config
        id: config1
        uses: jannekem/run-python-script-action@v1.7
        with:
          script: |
            from jinja2 import Template
            import os
            import random
            import yaml

            # WRITE YAML TO DISK
            def write_yaml_todisk(output_path):
              with open(output_path, 'w') as outfile:
                yaml.dump(vm_config, outfile, default_flow_style=False, sort_keys=False)

            # RENDER INVENTORY
            def render_inventory(values):
              template = Template(inventoryTemplate)
              renderedTemplate = template.render(values)

              return str(renderedTemplate)

            # GET RANDOM ITEM FROM LIST
            def get_random_fromlist(list):
              random_num = random.choice(list)

              return str(random_num)

            inventoryTemplate = "[{% for count in range(0, vm_count) %}{% if loop.first%}{{ vm }}.{{ domain }}{% else %}{{ vm }}.{{ domain }}-{{ loop.index }}{% endif %}{% if not loop.last %}, {% endif %}{% endfor %}]"

            domain = {
                'labul': 'labul.sva.de',
                'labda': 'tiab.labda.sva.de',
            }

            inventory = {
                'vm': '${{ inputs.vm-name }}',
                'domain': domain['labul'],
                'vm_count': ${{ inputs.count-vm }},
            }

            cpu = {
                'S': 2,
                'M': 4,
                'L': 6,
                'XL': 8,
            }

            memory = {
                'S': 4069,
                'M': 6144,
                'L': 8192,
                'XL': 12288,
            }

            disk = {
                'S': 32,
                'M': 64,
                'L': 96,
                'XL': 128,
            }

            os = {
                'labul-vsphere': {
                    'ubuntu22': 'sthings-u2',
                    'ubuntu23': 'sthings-u23',
                    'rocky9': 'sthings-r9'
                }
            }

            datastores = {
                'labul-vsphere': ['/LabUL/datastore/UL-ESX-SAS-01', '/LabUL/datastore/UL-ESX-SAS-02', '/LabUL/datastore/UL-V5010-01-LUN1', '/LabUL/datastore/UL-V5010-01-LUN2', '/LabUL/datastore/UL-V5010-01-LUN3'],
            }

            networks = {
                'labul-vsphere': ['/LabUL/network/MGMT-10.31.101', '/LabUL/network/LAB-10.31.102', '/LabUL/network/LAB-10.31.103', '/LabUL/network/LAB-10.31.104'],
            }

            env = {
                'labul-vsphere': {
                    'lab': 'labul',
                    'rootFolder': 'stuttgart-things',
                    'vmFirmware': 'bios',
                    'datacenter': '/LabUL',
                    'resourcePool': '/LabUL/host/Cluster-V6.5/Resources',
                    'templatePath': '/LabUL/vm/stuttgart-things/vm-templates',

                }
            }

            crossplane = {
                'labul-vsphere' : {
                    'namespace' : 'crossplane-system',
                    'rootFolder' : 'stuttgart-things',
                    'tfvars' : 'vsphere-tfvars',
                    'secretKey' : 'terraform.tfvars',
                    's3_region' : 'main',
                    's3_bucket' : 'vspherevm-labul',
                    's3_endpoint' : 'https://artifacts.app1.sthings-vsphere.labul.sva.de',
                    'state_key' : '${{ inputs.count-vm }}',
                }
            }

            vm_config = {
              "vmCount" : '${{ inputs.count-vm }}',
              "vmName" : '${{ inputs.vm-name }}',
              "vmMemory" : memory['${{ inputs.vm-size }}'],
              "vmCpu" : cpu['${{ inputs.vm-size }}'],
              "vmTemplate" : os['${{ inputs.lab-cloud }}']['${{ inputs.os-version }}'],
              "vmDisk" : disk['${{ inputs.vm-size }}'],
              "vmDatastore" : get_random_fromlist(datastores['${{ inputs.lab-cloud }}']),
              "vmNetwork" : get_random_fromlist(networks['${{ inputs.lab-cloud }}']),
              "hosts" : render_inventory(inventory),
              "lab" : env['${{ inputs.lab-cloud }}']['lab'],
              "vmFolder" : env['${{ inputs.lab-cloud }}']['rootFolder']+'/${{ inputs.vm-folder }}',
              "namespace" : crossplane['${{ inputs.lab-cloud }}']['namespace'],
              "vmFirmware" : env['${{ inputs.lab-cloud }}']['lab'],
              "datacenter" : env['${{ inputs.lab-cloud }}']['datacenter'],
              "resourcePool" : env['${{ inputs.lab-cloud }}']['resourcePool'],
              "templatePath" : env['${{ inputs.lab-cloud }}']['templatePath'],
              "tfvars" : crossplane['${{ inputs.lab-cloud }}']['tfvars'],
              "secretKey" : crossplane['${{ inputs.lab-cloud }}']['secretKey'],
              "crossplaneProvider" : '${{ inputs.crossplane-provider }}-${{ inputs.vm-name }}',
              "s3Region" : crossplane['${{ inputs.lab-cloud }}']['s3_region'],
              "s3Bucket" : crossplane['${{ inputs.lab-cloud }}']['s3_bucket'],
              "s3Endpoint" : crossplane['${{ inputs.lab-cloud }}']['s3_endpoint'],
              "stateKey" : crossplane['${{ inputs.lab-cloud }}']['state_key'],
            }

            def main():

                # WRITE VM CONFIG YAML TO DISK
                write_yaml_todisk('./${{ inputs.vm-name }}.yaml')

            if __name__ == '__main__':
                main()


      - name: Create vm config
        id: config2
        run: |
          echo 'vmFolder: ${{ inputs.vm-folder }}' >> ./${{ inputs.vm-name }}.yaml
          echo 'lab: labul' >> ./${{ inputs.vm-name }}.yaml
          echo 'namespace: crossplane-system' >> ./${{ inputs.vm-name }}.yaml
          echo 'vmFirmware: bios' >> ./${{ inputs.vm-name }}.yaml
          echo 'datacenter: /LabUL' >> ./${{ inputs.vm-name }}.yaml
          echo 'resourcePool: /LabUL/host/Cluster-V6.5/Resources' >> ./${{ inputs.vm-name }}.yaml
          echo 'templatePath: /LabUL/vm/stuttgart-things/vm-templates' >> ./${{ inputs.vm-name }}.yaml
          echo 'tfvars: vsphere-tfvars' >> ./${{ inputs.vm-name }}.yaml
          echo 'secretKey: terraform.tfvars' >> ./${{ inputs.vm-name }}.yaml
          echo 'crossplaneProvider: ${{ inputs.crossplane-provider }}-${{ inputs.vm-name }}' >> ./${{ inputs.vm-name }}.yaml
          echo 's3Region: main' >> ./${{ inputs.vm-name }}.yaml
          echo 's3Bucket: vspherevm-labul' >> ./${{ inputs.vm-name }}.yaml
          echo 's3Endpoint: https://artifacts.app1.sthings-vsphere.labul.sva.de' >> ./${{ inputs.vm-name }}.yaml
          echo 'stateKey: ${{ inputs.vm-name }}' >> ./${{ inputs.vm-name }}.yaml
          # TEKTON
          echo 'playbooks: [ansible/playbooks/prepare-env.yaml, ansible/playbooks/base-os.yaml]' >> ./${{ inputs.vm-name }}.yaml
          echo 'ansibleWorkingImage: eu.gcr.io/stuttgart-things/sthings-ansible:9.21.0' >> ./${{ inputs.vm-name }}.yaml
          echo 'tektonProviderRef: kubernetes-incluster' >> ./${{ inputs.vm-name }}.yaml
          cat ${{ inputs.vm-name }}.yaml

      - name: Upload VM config
        id: upload
        uses: actions/upload-artifact@v4.1.0
        with:
          name: ${{ inputs.vm-name }}
          path: ${{ inputs.vm-name }}.yaml

  # Create-VsphereVM-CR:
  #   name: Render And Create VsphereVM CR
  #   uses: stuttgart-things/stuttgart-things/.github/workflows/render-pr-vm.yaml@main
  #   needs: Create-VM-Config
  #   with:
  #     environment-name: k8s
  #     runs-on: ghr-stuttgart-things-sthings-cicd
  #     vm-name: ${{ inputs.vm-name }}
  #     template-path: crossplane/claims/vspherevm.yaml
  #     destination-dir: crossplane/claims/vspherevm/labul/
  #     provider-template-path: crossplane/providerConfig/terraform-${{ inputs.crossplane-provider }}.yaml
  #   secrets: inherit
