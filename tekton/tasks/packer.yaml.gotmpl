tasks:
  build-packer-template:
    namespace: {{ .Release.Namespace }}
    labels:
      app.kubernetes.io/version: "0.1"
    annotations:
      tekton.dev/pipelines.minVersion: "0.48.0"
      tekton.dev/categories: Messaging
      tekton.dev/tags: messaging
      tekton.dev/displayName: "Send message to Microsoft Teams Channel"
      tekton.dev/platforms: "linux/amd64,linux/s390x,linux/ppc64le"
    description: sends simple message to a Microsoft Teams Channel
    workspaces:
      source:
        description: holds the working data
        optional: false
    params:
      OS_VERSION:
        type: string
        description: name of the secret with incoming webhook URL
      OS_TEMPLATE_PATH:
        type: string
        description: path to the os template
      DEFAULT_ENVIRONMENT_PATH:
        type: string
        description: path to the default environment
      BOOT_CONFIG_PATH:
        type: string
        description: kickstart config for installation
      WORKING_IMAGE:
        description: the image on which ansible will run
        default: "eu.gcr.io/stuttgart-things/sthings-packer:1.9.4-8.3.0-4"
      SUB_DIRECTORY:
        description: subdirectory of workspace
      vault-secret-name:
        default: "vault"
        description: name of the secret with incoming webhook URL
      vault-secret-key-addr:
        default: "VAULT_ADDR"
        description: vaul addr key in the secret
      vault-secret-key-approleId:
        default: "VAULT_ROLE_ID"
        description: approle id key in the secret
      vault-secret-key-approleSecret:
        default: "VAULT_SECRET_ID"
        description: approle secret key in the secret
      vault-secret-key-namespace:
        default: "VAULT_NAMESPACE"
        description: namespace key in the secret
    steps:
      packer-build:
        image: $(params.WORKING_IMAGE)
        securityContext:
          runAsNonRoot: true
          runAsUser: 65532
        workingDir: $(workspaces.source.path)/$(params.SUB_DIRECTORY)
        env:
          ANSIBLE_HOST_KEY_CHECKING:
            value: '"False"'
          VAULT_ADDR:
            valueFrom:
              secretKeyRef:
                name: $(params.vault-secret-name)
                key: $(params.vault-secret-key-addr)
          VAULT_ROLE_ID:
            valueFrom:
              secretKeyRef:
                name: $(params.vault-secret-name)
                key: $(params.vault-secret-key-approleId)
          VAULT_SECRET_ID:
            valueFrom:
              secretKeyRef:
                name: $(params.vault-secret-name)
                key: $(params.vault-secret-key-approleSecret)
          VAULT_NAMESPACE:
            valueFrom:
              secretKeyRef:
                name: $(params.vault-secret-name)
                key: $(params.vault-secret-key-namespace)
        script: |
          #!/usr/bin/env sh
          set -eu

          echo "create packer workdir"
          rm -rf ./$(params.OS_VERSION) && mkdir ./$(params.OS_VERSION)
          
          echo "render packer config"
          machineShop render --source local \
          --template ./$(params.OS_TEMPLATE_PATH) \
          --defaults ./$(params.DEFAULT_ENVIRONMENT_PATH) \
          --destination ./$(params.OS_VERSION)/$(params.OS_VERSION).pkr.hcl \
          --values "packerConfigMountPath=$(workspaces.source.path)/$(params.SUB_DIRECTORY)/$(params.OS_VERSION), ansiblePlayMountPath=$(workspaces.source.path)/$(params.SUB_DIRECTORY)/$(params.OS_VERSION)" \
          --output file

          touch ./$(params.OS_VERSION)/meta-data

          cat ./$(params.OS_VERSION)/$(params.OS_VERSION).pkr.hcl
          pwd ./$(params.OS_VERSION)
          ls -lta ./$(params.OS_VERSION)

          echo "render kickstart config"
          machineShop render --source local \
          --template ./$(params.BOOT_CONFIG_PATH) \
          --destination ./$(params.OS_VERSION)/user-data \
          --output file

          echo "render playbook"
          machineShop render \
          --template ./packer/ansible/base-os.yaml \
          --source local \
          --defaults ./$(params.DEFAULT_ENVIRONMENT_PATH) \
          --destination ./$(params.OS_VERSION)/base-os.yaml \
          --output file

          echo "packer init"
          cd $(params.OS_VERSION)
          packer init $(params.OS_VERSION).pkr.hcl

          echo "get vcenter credentials"
          packer build \
          -force \
          -var "username=$(machineShop get --path apps/data/scr:username | tail -n +8)" \
          -var "password=$(machineShop get --path apps/data/scr:password | tail -n +8)" \
          $(params.OS_VERSION).pkr.hcl