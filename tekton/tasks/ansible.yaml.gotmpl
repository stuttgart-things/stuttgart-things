tasks:
  ansible:
    namespace: {{ .Release.Namespace }}
    labels:
      app.kubernetes.io/version: "0.5"
    annotations:
      tekton.dev/categories: configuration-mgmt
      tekton.dev/pipelines.minVersion: "0.17.0"
      tekton.dev/tags: image-build
      tekton.dev/platforms: "linux/amd64,linux/s390x,linux/ppc64le,linux/arm64"
    description: execute ansible
    workspaces:
      source:
        description: holds the context and Dockerfile
        optional: false
    params:
      SUB_DIRECTORY:
        description: subdirectory of workspace
        default: ""
      WORKING_IMAGE:
        description: the image on which ansible will run
        default: eu.gcr.io/stuttgart-things/sthings-ansible:8.2.0-3
      EXTRA_VARS:
        description: ansible extra vars
        type: array
      EXTRA_ROLES:
        description: ansible extra roles
        type: array
      INVENTORY_VARS:
        description: ansible inventory vars
        type: array
      CREATE_INVENTORY:
        description: create inventory
        type: string
        default: "false"
      PLAYBOOKS:
        description: ansible playbooks to execute
        type: array
      USER_HOME:
        description: absolute path to the user's home directory
        default: "/home/nonroot"
      vault-secret-name:
        default: "vault"
        description: name of the secret with incoming webhook URL
      vault-secret-key-addr:
        default: "VAULT_ADDR"
        description: vaul addr key in the secret
      vault-secret-key-approleId:
        default: "VAULT_ROLE_ID"
        description: approle id key in the secret
      vault-secret-key-approleSecret:
        default: "VAULT_SECRET_ID"
        description: approle secret key in the secret
      vault-secret-key-namespace:
        default: "VAULT_NAMESPACE"
        description: namespace key in the secret
      INSTALL_EXTRA_ROLES:
        description: install roles and collections
        type: string
        default: "false"
    steps:
      create-inventory-vars:
        workingDir: $(workspaces.source.path)/$(params.SUB_DIRECTORY)
        image: $(params.WORKING_IMAGE)
        securityContext:
          runAsNonRoot: true
          runAsUser: 65532
        args: ["$(params.INVENTORY_VARS[*])"]
        script: |
          #!/usr/bin/env sh
          set -eu

          echo "creating vars file"
          rm -rf ./vars.yaml
          echo "---" >> ./vars.yaml

          if [ "$(params.CREATE_INVENTORY)" = "true" ] ; then

          echo -e "inventory_groups:\n  host_groups:" >> ./vars.yaml

          for param in "$@"
          do
            yq -i '.inventory_groups.host_groups.'$(echo "$param" | cut -d "+" -f1)' += '$(echo "$param" | cut -d "+" -f2)'' ./vars.yaml
          done

          else
            echo "skipped creating special inventory"
          fi

          cat ./vars.yaml
      create-vars-file:
        workingDir: $(workspaces.source.path)/$(params.SUB_DIRECTORY)
        image: $(params.WORKING_IMAGE)
        securityContext:
          runAsNonRoot: true
          runAsUser: 65532
        args: ["$(params.EXTRA_VARS[*])"]
        script: |
          #!/usr/bin/env sh
          set -eu

          for argument in "$@"; do echo $argument | sed -e "s/+-/: /g" >> vars.yaml ; done

          cat ./vars.yaml
      install-roles:
        workingDir: $(workspaces.source.path)/$(params.SUB_DIRECTORY)
        image: $(params.WORKING_IMAGE)
        securityContext:
          runAsNonRoot: true
          runAsUser: 65532
        args: ["$(params.EXTRA_ROLES[*])"]
        script: |
          #!/usr/bin/env sh
          set -eu

          if [ "$(params.INSTALL_EXTRA_ROLES)" = "true" ] ; then
            echo "you know.. for install"
            for param in "$@"
            do
              ansible-galaxy install git+${param} -f
            done

          else
            echo "skipped installing additional roles"
          fi
      run-ansible-playbook:
        workingDir: $(workspaces.source.path)/$(params.SUB_DIRECTORY)
        image: $(params.WORKING_IMAGE)
        securityContext:
          runAsNonRoot: true
          runAsUser: 65532
        args: ["$(params.PLAYBOOKS[*])"]
        env:
          ANSIBLE_HOST_KEY_CHECKING:
            value: '"False"'
          HOME:
            value: $(params.USER_HOME)
          VAULT_ADDR:
            valueFrom:
              secretKeyRef:
                name: $(params.vault-secret-name)
                key: $(params.vault-secret-key-addr)
          VAULT_ROLE_ID:
            valueFrom:
              secretKeyRef:
                name: $(params.vault-secret-name)
                key: $(params.vault-secret-key-approleId)
          VAULT_SECRET_ID:
            valueFrom:
              secretKeyRef:
                name: $(params.vault-secret-name)
                key: $(params.vault-secret-key-approleSecret)
          VAULT_NAMESPACE:
            valueFrom:
              secretKeyRef:
                name: $(params.vault-secret-name)
                key: $(params.vault-secret-key-namespace)
        script: |
          #!/usr/bin/env sh
          set -eu

          echo "you know.. for running a playbook or 2"

          touch inventory

          for playbook in "$@"
          do
            ansible-playbook -vv \
            -i $(workspaces.source.path)/$(params.SUB_DIRECTORY)/inventory \
            -e inv_path=$(workspaces.source.path)/$(params.SUB_DIRECTORY)/inventory \
            -e path_to_vars_file=$(workspaces.source.path)/$(params.SUB_DIRECTORY)/vars \
            $playbook
          done