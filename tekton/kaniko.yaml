---
# Source: yacht-tekton-resources/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: codehub-ssh
  namespace: tekton-kaniko
  labels:
    app: yacht-tekton
type: Opaque
data:
  id_rsa: "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBckpROElsVHZ4TDFpMVZXTlU4S1hPeTRhL1pXaXo0THZvb2pycnpCSVBCT0laeEF4CjBUMmFYUSttSjV5V0xDNTFSMjR2R054RHcwTmxBMng1MzRIbUQydmVGeDNZUmtnckNGL3JRT2ZqeXhVaFlLTWcKclFPYUZuTjc2NXVmRVYrZzBGMyszejhyY01TQkVqNHlJQkE3OWdVemhIUHFaTkV0UFh0NDdiWmhiS3lzd2U3VApyclFkeFpMWEM1OFJnKytTWUFXdmY0dE01bjNISVJkbFRXWElHVVZ5ZVNZakJpb1dpZ2U2bWVnS0RFSlE1Z3I1ClpTMG5Rc1JpTWJ2NnJvZ1hCb1dpUVRKcVpFazNrYUxsTldGb05PY0JJOG9PT3c4Q2NzaERNNzJIdWl5QjhUZDgKd1Z6RXdjMUNpUXRiWVJqUXZjbWhYc3NLOC9vbWlKT3VrUm5JeXdJREFRQUJBb0lCQVFDSXlOVUF3U0ZwWmxJMwpsSjkzaS93aHcrRlFySkZtdC9rSGNrNmJoRUU4bko2NFVYV3F5cERXd2RpSC9PeHFDRWljWFJDbk82M1p6a2o1CjliaURGb29xSHV6Z2xaOGQxWVdHRmNCNHFWTTdXM3doQkNxWjl3amlVcFlkb0RMcnFrZmozeHhzQmIyQW03OVIKbmtwTWI1R1c1WGgzdXdoRThDWlRYTkgwVjJIUXA1Mmdha2U4djhsa2ZrUnBzQS83L1lUWVpub2JjaURobDJXKwp2anpucmhXN3YrdHU3OW5XaTRiTDcwbTQxTTcvdHdyR1lKeXdtNG5xeXJnTnA1RWU3Y0FTWDB4TmNGQ0x0L3dhCmhvRTN5N0pzLzdKT2pvQ1h2dWQ3NjVMSUp3M0doMkhUSktRcXhpZnl5RkpTWWpyMWF1YW9zU1V5TW0yM2JsYUEKMi9hNm84WEJBb0dCQU9YTVBCTW93RjArVTdhMjc0NzRBalQ5M3dTWjJWK2FSdVpwcjkrMmJvd0dJUHFUdlU3OQpZR1lRcXlkSS9oM2VJYjBxdTJMY3hPZVU1Z09ROHA0WXZJc1BzQnBaTmNFSHk5ZXgrREZnQm0rMDhlSDNZc28rCjkrb0pkT3NOTWQyMndjb2xLZ084TzhKaE9JMm91NWIvaUZWYUFDWjR5ek5yTnBDL3BlTWkrS28vQW9HQkFNQkIKeXYrNnlXcWlranZ1RXdRQlVGeXZHS2laMnh0ZW9CeW5uU29DeUxrMUQ3Rzl4T0w4THlYNEt5VThMcThxQ1ZlZQpQSWVWZnZKQXJCWUtmZy9lRWd3YUFaUFVTa09VZzFRdzM2eU1PN3ZIV1hlVDJ5VmJ5RDY0ZXVWbVFDdmw1bVloCms5ZjJtN3Q3bGt4RFNtRHlvSXhUWXVhM0N5aHQ3d0VtRlRsSDZZWjFBb0dBT2tzcC9pNDdSaXdXYm1aUHRQUGoKRTNCSFQ5SjdXdzQyNkNKdFZCSGlUekVLMHFZQnd2VHhyRktVS0Y0UzRKN0Y3a2ZWeTBsM3hjdDI0ZmEySlRiZgpOV09nWjc2enJTaitJOVJvd3BXNmJFSDVqam9FWEl2R3RoNzZBdHFSQ001Z3NKZm01Wld0anl5OGZPc04wMHMxCldYbUFTa0lnUWdYempKcWhTVkpJeEY4Q2dZQXhSeXZmREdOZi83ZDN3UGdDeU10dVZqcjl6Q0hMRENBQitEeGkKYmtCQXFJY1RTYzdUVjB4R2NTdXQ2WlVWdExLY1VLUzNJK3hiNzVPc09waEJQT3huU2FzcDF2b0tCR0Q5RFdIbgplakk5V1VWblR2Q1d6TVd3dmR4U1BEa3FoMHpjMUxKdVlubGNQcnN4WlBZRmoycnpUTlJHeXBnRGp0bjU4MmJ4ClBhdHZtUUtCZ0cwQmtJVGlIMmpUM3VrMHBrVm1wWXZLc3RhUlVGZGtZMS9rV3MzdzZXbVBId1ZpQkFrb21zU0oKMzF0TFJKWmovc1E0UElpRHdBcGRuL0Z0Rk1CRUFBNWcreW9QbU9pOTJmVHVkWTZ6L3YrYzRMbXV0M0JNajRoMwpxVmxJeGoyalgwaDIycmlwa2orODJBVXhHUXBGRm9zQUY3WTE2VUx2VmdCaXBqWC9nSjBrCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0t"
---
# Source: yacht-tekton-resources/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: github-ssh
  namespace: tekton-kaniko
  labels:
    app: yacht-tekton
type: Opaque
data:
  id_rsa: "LS0tLS1CRUdJTiBPUEVOU1NIIFBSSVZBVEUgS0VZLS0tLS0KYjNCbGJuTnphQzFyWlhrdGRqRUFBQUFBQkc1dmJtVUFBQUFFYm05dVpRQUFBQUFBQUFBQkFBQUJsd0FBQUFkemMyZ3RjbgpOaEFBQUFBd0VBQVFBQUFZRUFvNHhLcFFrb3VCWEJ1SndnTDQ0ZlQ5T3RVSlQwa1Q2Nzc3WXZTSXpuVVpBSXhEakpoR0tNCkQ1a1RRd3NFenl3UHdtMEVvanlPVVFoMzBIMmF4VnF1Q3V6OEM0ZXA0WjRBb1ZOU25FVGJldEhzRmpWVVg5Q2kxRnBCU1EKWXRuU2MzVGcwS3hZaWxaK2FYQ1gxUjkrYk5xbWhneEYvNEZBbmxJZ2NMMzB1QkdhRlYvMlZOcmhQeG9rU2dlaXI4cTg2RApJOVRpTHNHdm02bTN0Z2MyanlVZk9PVUNGbGNqR3ZHc2FOaVRnVDZ2L01MUlJ1aVh3SXAzL0NlZzF0MTZ1QjNYMllJWEVvCm1XUzZLOWliZjYzazFIOFQ4ME42WnBUcmwyOXZLTVZucDg1bStpV0Vxc09pcVZ3OERRUDlvakVkM2w4N2pNWDRuWjZPQysKanNxQnZHeFZzSTQ2RDBaYkFJNnU2UWltcmZ1TFp4VnFSWWY5Y0p0b093ZkVhcFF4eHVvN0JiVnRDSi9DT2FQanY5cGpoSgpQL1ozWnQ4NVptUFVFckxtemY4bzcranJHUTdIdFNzd095cFA5bG9PSTVJb1NxcHN5V1ZTWFNuTCtyNUxwS0NYM1krU2pICkxUN3pTTTJmTldidTJXNzZWZUlOTW14NU5jNGJiWVFWQ0tyUTZsdFJBQUFGa01HV1MyZkJsa3RuQUFBQUIzTnphQzF5YzIKRUFBQUdCQUtPTVNxVUpLTGdWd2JpY0lDK09IMC9UclZDVTlKRSt1KysyTDBpTTUxR1FDTVE0eVlSaWpBK1pFME1MQk04cwpEOEp0QktJOGpsRUlkOUI5bXNWYXJncnMvQXVIcWVHZUFLRlRVcHhFMjNyUjdCWTFWRi9Rb3RSYVFVa0dMWjBuTjA0TkNzCldJcFdmbWx3bDlVZmZtemFwb1lNUmYrQlFKNVNJSEM5OUxnUm1oVmY5bFRhNFQ4YUpFb0hvcS9Ldk9neVBVNGk3QnI1dXAKdDdZSE5vOGxIempsQWhaWEl4cnhyR2pZazRFK3IvekMwVWJvbDhDS2Qvd25vTmJkZXJnZDE5bUNGeEtKbGt1aXZZbTMrdAo1TlIvRS9ORGVtYVU2NWR2YnlqRlo2Zk9adm9saEtyRG9xbGNQQTBEL2FJeEhkNWZPNHpGK0oyZWpndm83S2dieHNWYkNPCk9nOUdXd0NPcnVrSXBxMzdpMmNWYWtXSC9YQ2JhRHNIeEdxVU1jYnFPd1cxYlFpZndqbWo0Ny9hWTRTVC8yZDJiZk9XWmoKMUJLeTVzMy9LTy9vNnhrT3g3VXJNRHNxVC9aYURpT1NLRXFxYk1sbFVsMHB5L3ErUzZTZ2w5MlBrb3h5MCs4MGpObnpWbQo3dGx1K2xYaURUSnNlVFhPRzIyRUZRaXEwT3BiVVFBQUFBTUJBQUVBQUFHQURWRVB4ZUxhU0N6clZtVU9BTmxGWnVwUkx5CkhGelNyS3dqQzNKbVRrcytFeXVZbDNMUnFhRlc0TkliVWN1ZUs0VU1nd0s2YWJIdkY5MGdIY0w0d2I1a05ZSFhjNUo2Z0cKSEp5c2VoRm9QcGFucnNJK1ljUGE4a2Y4RDE1YnFmTm12eW4wTWRQWHhmOUNWcEUzOHFPK0pNMDFiZC96a3V3Z1ZsWTFDdwpRNm1aUG5yUEU2Y3oxbi9DS3kzMmV2SmEwZHcvWGlTZFRXLyttQWppZUZzMytlREhPbktSc0V2bjJsb0c3Y0NkYkpIUjllCnkzT0dZYlRVb3JrMlVUQjgvTTlmSWQ5M0FxUTU2b3dnWlVZZHZPRVphbkVMLzJ1NmJwcmR4aG1md3dHRWVCaGlCMldIYWoKVDEvT1FIbi9FcG1MdStaNzBnRkVLaEp6SVVzZHllOFNWK0hVdGorY2NReU1vNzRFRlVKb3VaeG5jRjNIOHdXRVU3WndicApsRCswVkd4UmdJUFJYdCtENnlhZjQwa2x0QzZGSGMzM253Q29IUUxUb28vTFdWTkpPN0h5dG0wNk5ZTytIc2w3a1o4VTEzCnVJT010akc2SlVCY3lLVmx6YUlsWENJYjh1S1h6cU1jT2ducW5lSXYyQjZkUmZqb293N1RIY2dPSWhHNkVhK05DOUFBQUEKd0UvSUhXUmVHRnNVZGFNSzA0blloSjdyYTJjVW9IajFMVVdYNnhpazZjUDJiMEVQVWxHbVYzS1c3NUovcVNGbEd2SXMvWApRNFJFNnNwcDBLVWEyTjJLZG1FTjBmenE3RFoxTm5rU0l3ZVM3MDg1Uk5lUEs1UnI0V2ZON3RnRVNOdkwrdmNpcGUyaDIrCmw2eGQrREExYVhxMzlyNjE4UGt6Wmt1amprYnJEVktTRGdlWXFIdjlxdnRPOUROUy9yNFdGVDZCbEM1SDd1YkRPdnhTMlEKbG1McXFTSzV1R0NHNDZlN0pYUUxsMjZPdUZ6WlRhZkpzTFMzV3p1R3gvRk5WdldBQUFBTUVBeDVHV0hDMDd3YyswMXQ3MApMOTRlYUhHcTh1WmNCcStBNHdjQzRnWFNvQ2FZRFFXM0w1Qy9kK25GNm1Db3IwZUlRVGs2bzBoalhFc0V3UGNYOVhIRGhsCjF1NWJsWDA0YWE2WDZTSk92dTd0eVB1VjRxejRPcUVDTElieG90SFRNL2pKd2s3THNvWUx3b2hmdWt4dFlEQnZvUUpzQ2UKT0RYTkJteklZazN2SXBQNWJ3Q0gzWVlveEU4aU04dXpjVnVkWVEvU3dvS1JkWVNBcGlna1JMK0RjTnNoU2hUdS9OOENKbgpUbXowQmg1WDdaN3A4bEp4R1RYc3BEbzc3U3R2Y3RBQUFBd1FEUnl6dld5MjhrV0lZU0lwVFEzUHZvek5mdlljMXZzdXN0CmFUa0xiWUdaY1dSbU9sUDdiMmd0K2JtQzdZbG42SHA3ZTZIV0NCY3luR0FibWFOaGhIV0N2T2w1UWR2SXpTNnZJelI2MzIKZjdzUjdLREJBSm9zbFlVcEF6bDZOajJJc21oVU9kUDJuT09wMjlEWHZvOFpweVptWGltaEtKOVdhYTRINWRrMHZrNTZNLwo3cVIzb2N6Zkl1MTIwY2NRc2JVUnFCZUpzWlJDL2pBTzliZWNubHgyNHNkZ2dQOFlTTzRBQ2Nhb2lWZXJsZHFnSUs4emdhCnVPOFB6NlhLUjdTelVBQUFBV2NHRjBjbWxqYXk1b1pYSnRZVzV1UUhOMllTNWtaUUVDQXdRRgotLS0tLUVORCBPUEVOU1NIIFBSSVZBVEUgS0VZLS0tLS0K"
---
# Source: yacht-tekton-resources/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: scr-labda-vsphere
  namespace: tekton-kaniko
data:
  config.json: eyJhdXRocyI6IHsic2NyLmFwcC40c3RoaW5ncy50aWFiLnNzYy5zdmEuZGUiOiB7InVzZXJuYW1lIjogInN0aGluZ3MiLCAicGFzc3dvcmQiOiAiQXRsYW43aXMiLCAiYXV0aCI6ICJjM1JvYVc1bmN6cEJkR3hoYmpkcGN3PT0ifX19
---
# Source: yacht-tekton-resources/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: msteams
  namespace: tekton-kaniko
  labels:
    app: yacht
type: Opaque
stringData:
  url: "https://365sva.webhook.office.com/webhookb2/2f14a9f8-4736-46dd-9c8c-31547ec37180@0a65cb1e-37d5-41ff-980a-647d9d0e4f0b/IncomingWebhook/37a805a0a2624dc2ac1aedd7dec6ad49/dc3a27ed-396c-40b7-a9b2-f1a2b6b44efe"
---
# Source: yacht-tekton-resources/templates/workspaces.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: kaniko-workspace
  namespace: tekton-kaniko
spec:
  storageClassName: nfs3-csi2
  accessModes:
    - ReadWriteOnce
  volumeMode: Filesystem
  resources:
    requests:
      storage: 10Gi
---
# Source: yacht-tekton-resources/templates/pipelines.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: build-kaniko-image
  namespace: tekton-kaniko
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-credentials
    - name: dockerconfig
  params:
    - name: context
      type: string
      default: ""
      description: path to context
    - name: dockerfile
      type: string
      default: ""
      description: path to dockerfile
    - name: git-revision
      type: string
      default: "main"
      description: revision of source git repo
    - name: gitRepoUrl
      type: string
      default: ""
      description: source git repo
    - name: gitWorkspaceSubdirectory
      type: string
      default: ""
      description: subdirectory on workspace
    - name: image
      type: string
      default: ""
      description: reference of the image to build
    - name: registry
      type: string
      default: ""
      description: registry FROM (base image)
    - name: tag
      type: string
      default: ""
      description: reference of the tag of the image to build
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-credentials
      params:
        - name: deleteExisting
          value: 'true'
        - name: revision
          value: $(params.git-revision)
        - name: subdirectory
          value: $(params.gitWorkspaceSubdirectory)
        - name: url
          value: $(params.gitRepoUrl)
    - name: kaniko
      runAfter:
        - fetch-repository
      taskRef:
        kind: Task
        name: kaniko
      workspaces:
        - name: dockerconfig
          workspace: dockerconfig
        - name: source
          workspace: shared-workspace
      params:
        - name: CONTEXT
          value: $(params.context)
        - name: DOCKERFILE
          value: $(params.dockerfile)
        - name: EXTRA_ARGS
          value:
            - --skip-tls-verify
        - name: IMAGE
          value: $(params.image)
        - name: REGISTRY
          value: $(params.registry)
        - name: SUBDIRECTORY
          value: $(params.gitWorkspaceSubdirectory)
        - name: TAG
          value: $(params.tag)
    - name: send-msteams-notification
      runAfter:
        - kaniko
      taskRef:
        kind: Task
        name: send-msteams-notification
      params:
        - name: message
          value: image $(params.image):$(params.tag) build & pushed successfully w/ kaniko ($(tasks.kaniko.results.IMAGE_DIGEST))
        - name: webhook-url-secret
          value: msteams
        - name: webhook-url-secret-key
          value: url
  finally:
    - name: notify-any-failure
      taskRef:
        kind: Task
        name: send-msteams-notification
      params:
        - name: message
          value: kaniko image build for $(params.image):$(params.tag) failed!!
        - name: webhook-url-secret
          value: msteams
        - name: webhook-url-secret-key
          value: url
      when:
        - input: $(tasks.status)
          operator: in
          values: ["Failed"]
---
# Source: yacht-tekton-resources/templates/runs.yaml
apiVersion: tekton.dev/v1
kind: PipelineRun
metadata:
  name: build-kaniko-image-testrun-codehub-msjna
  namespace: tekton-kaniko
spec:
  pipelineRef:
    name: build-kaniko-image
  workspaces:
    - name: dockerconfig
      secret:
        secretName: scr-labda-vsphere
    - name: shared-workspace
      persistentVolumeClaim:
        claimName: kaniko-workspace
    - name: ssh-credentials
      secret:
        secretName: codehub-ssh
  params:
    - name: context
      value: "/kaniko/sthings-alpine"
    - name: dockerfile
      value: "build/images/sthings-alpine/Dockerfile"
    - name: git-revision
      value: "master"
    - name: gitRepoUrl
      value: "git@codehub.sva.de:Lab/stuttgart-things/stuttgart-things.git"
    - name: gitWorkspaceSubdirectory
      value: "/kaniko/sthings-alpine-codehub"
    - name: image
      value: "scr.app.4sthings.tiab.ssc.sva.de/sthings-alpine/sthings-alpine"
    - name: registry
      value: "scr.app.4sthings.tiab.ssc.sva.de"
    - name: tag
      value: "230305-0403"
---
# Source: yacht-tekton-resources/templates/runs.yaml
apiVersion: tekton.dev/v1
kind: PipelineRun
metadata:
  name: build-kaniko-image-testrun-github-oznnr
  namespace: tekton-kaniko
spec:
  pipelineRef:
    name: build-kaniko-image
  workspaces:
    - name: dockerconfig
      secret:
        secretName: scr-labda-vsphere
    - name: shared-workspace
      persistentVolumeClaim:
        claimName: kaniko-workspace
    - name: ssh-credentials
      secret:
        secretName: github-ssh
  params:
    - name: context
      value: "/kaniko/sthings-ansible-github/images/sthings-ansible"
    - name: dockerfile
      value: "images/sthings-ansible/Dockerfile"
    - name: git-revision
      value: "main"
    - name: gitRepoUrl
      value: "git@github.com:stuttgart-things/stuttgart-things.git"
    - name: gitWorkspaceSubdirectory
      value: "/kaniko/sthings-ansible-github"
    - name: image
      value: "scr.app.4sthings.tiab.ssc.sva.de/sthings-ansible/ansible"
    - name: registry
      value: "eu.gcr.io"
    - name: tag
      value: "8.0.0-5"
---
# Source: yacht-tekton-resources/templates/tasks.yaml
apiVersion: tekton.dev/v1 
kind: Task
metadata:
  name: git-clone
  namespace: tekton-kaniko
  labels:
    app.kubernetes.io/version: "0.9"
  annotations:
    tekton.dev/categories: "Git"
    tekton.dev/displayName: "git clone"
    tekton.dev/pipelines.minVersion: "0.48.0"
    tekton.dev/platforms: "linux/amd64,linux/s390x,linux/ppc64le,linux/arm64"
    tekton.dev/tags: "git"
spec:
  description: clone a git repo from the provided url
  workspaces:
    - name: basic-auth
      description: workspace containing a .gitconfig and .git-credentials file
      optional: true
    - name: output
      description: the git repo will be cloned onto the volume backing this Workspace
      optional: false
    - name: ssh-directory
      description: .ssh directory with private key, known_hosts, config..
      optional: true
    - name: ssl-ca-directory
      description: workspace containing CA certificates
      optional: true
  params:
    - name: crtFileName
      description: file name of mounted crt using ssl-ca-directory workspace
      type: string
      default: "ca-bundle.crt"
    - name: deleteExisting
      description: Clean out the contents of the destination directoryå
      type: string
      default: "true"
    - name: depth
      description: Perform a shallow clone
      type: string
      default: "1"
    - name: gitInitImage
      description: the image providing the git-init binary that this Task runs
      type: string
      default: "gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/git-init:v0.40.2"
    - name: httpProxy
      description: HTTP proxy server for non-SSL requests
      type: string
      default: ""
    - name: httpsProxy
      description: HTTPS proxy server for SSL requests
      type: string
      default: ""
    - name: noProxy
      description: Opt out of proxying HTTP/HTTPS requests
      type: string
      default: ""
    - name: refspec
      description: Refspec to fetch before checking out revision
      type: string
      default: ""
    - name: revision
      description: Revision to checkout
      type: string
      default: ""
    - name: sparseCheckoutDirectories
      description: define the directory patterns to match or exclude
      type: string
      default: ""
    - name: sslVerify
      description: Set the `http.sslVerify` global git config
      type: string
      default: "true"
    - name: subdirectory
      description: subdirectory inside the `output` workspace to clone the repo into
      type: string
      default: ""
    - name: submodules
      description: Initialize and fetch git submodules
      type: string
      default: "true"
    - name: url
      description: repository URL to clone from
      type: string
      default: ""
    - name: userHome
      description: absolute path to the user's home directory
      type: string
      default: "/home/git"
    - name: verbose
      description: Log the commands that are executed during `git-clone`'s operation
      type: string
      default: "true"
  results:
    - name: commit
      description: the precise commit SHA
    - name: committer-date
      description: The epoch timestamp of the commit that was fetched by this Task.
    - name: url
      description: the precise URL
  steps:
    - name: clone
      image: "$(params.gitInitImage)"
      env:
        - name: HOME
          value: $(params.userHome)
        - name: PARAM_CRT_FILENAME
          value: $(params.crtFileName)
        - name: PARAM_DELETE_EXISTING
          value: $(params.deleteExisting)
        - name: PARAM_DEPTH
          value: $(params.depth)
        - name: PARAM_HTTPS_PROXY
          value: $(params.httpsProxy)
        - name: PARAM_HTTP_PROXY
          value: $(params.httpProxy)
        - name: PARAM_NO_PROXY
          value: $(params.noProxy)
        - name: PARAM_REFSPEC
          value: $(params.refspec)
        - name: PARAM_REVISION
          value: $(params.revision)
        - name: PARAM_SPARSE_CHECKOUT_DIRECTORIES
          value: $(params.sparseCheckoutDirectories)
        - name: PARAM_SSL_VERIFY
          value: $(params.sslVerify)
        - name: PARAM_SUBDIRECTORY
          value: $(params.subdirectory)
        - name: PARAM_SUBMODULES
          value: $(params.submodules)
        - name: PARAM_URL
          value: $(params.url)
        - name: PARAM_USER_HOME
          value: $(params.userHome)
        - name: PARAM_VERBOSE
          value: $(params.verbose)
        - name: WORKSPACE_BASIC_AUTH_DIRECTORY_BOUND
          value: $(workspaces.basic-auth.bound)
        - name: WORKSPACE_BASIC_AUTH_DIRECTORY_PATH
          value: $(workspaces.basic-auth.path)
        - name: WORKSPACE_OUTPUT_PATH
          value: $(workspaces.output.path)
        - name: WORKSPACE_SSH_DIRECTORY_BOUND
          value: $(workspaces.ssh-directory.bound)
        - name: WORKSPACE_SSH_DIRECTORY_PATH
          value: $(workspaces.ssh-directory.path)
        - name: WORKSPACE_SSL_CA_DIRECTORY_BOUND
          value: $(workspaces.ssl-ca-directory.bound)
        - name: WORKSPACE_SSL_CA_DIRECTORY_PATH
          value: $(workspaces.ssl-ca-directory.path)
      securityContext:
        runAsNonRoot: true
        runAsUser: 65532
      script: |-
        #!/usr/bin/env sh
        set -eu
      
        if [ "${PARAM_VERBOSE}" = "true" ] ; then
          set -x
        fi
      
        if [ "${WORKSPACE_BASIC_AUTH_DIRECTORY_BOUND}" = "true" ] ; then
          cp "${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/.git-credentials" "${PARAM_USER_HOME}/.git-credentials"
          cp "${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/.gitconfig" "${PARAM_USER_HOME}/.gitconfig"
          chmod 400 "${PARAM_USER_HOME}/.git-credentials"
          chmod 400 "${PARAM_USER_HOME}/.gitconfig"
        fi
      
        if [ "${WORKSPACE_SSH_DIRECTORY_BOUND}" = "true" ] ; then
          cp -R "${WORKSPACE_SSH_DIRECTORY_PATH}" "${PARAM_USER_HOME}"/.ssh
          chmod 700 "${PARAM_USER_HOME}"/.ssh
          chmod -R 400 "${PARAM_USER_HOME}"/.ssh/*
        fi
      
        if [ "${WORKSPACE_SSL_CA_DIRECTORY_BOUND}" = "true" ] ; then
          export GIT_SSL_CAPATH="${WORKSPACE_SSL_CA_DIRECTORY_PATH}"
          if [ "${PARAM_CRT_FILENAME}" != "" ] ; then
              export GIT_SSL_CAINFO="${WORKSPACE_SSL_CA_DIRECTORY_PATH}/${PARAM_CRT_FILENAME}"
          fi
        fi
        CHECKOUT_DIR="${WORKSPACE_OUTPUT_PATH}/${PARAM_SUBDIRECTORY}"
      
        cleandir() {
          # Delete any existing contents of the repo directory if it exists.
          #
          # We don't just "rm -rf ${CHECKOUT_DIR}" because ${CHECKOUT_DIR} might be "/"
          # or the root of a mounted volume.
          if [ -d "${CHECKOUT_DIR}" ] ; then
            # Delete non-hidden files and directories
            rm -rf "${CHECKOUT_DIR:?}"/*
            # Delete files and directories starting with . but excluding ..
            rm -rf "${CHECKOUT_DIR}"/.[!.]*
            # Delete files and directories starting with .. plus any other character
            rm -rf "${CHECKOUT_DIR}"/..?*
          fi
        }
      
        if [ "${PARAM_DELETE_EXISTING}" = "true" ] ; then
          cleandir || true
        fi
      
        test -z "${PARAM_HTTP_PROXY}" || export HTTP_PROXY="${PARAM_HTTP_PROXY}"
        test -z "${PARAM_HTTPS_PROXY}" || export HTTPS_PROXY="${PARAM_HTTPS_PROXY}"
        test -z "${PARAM_NO_PROXY}" || export NO_PROXY="${PARAM_NO_PROXY}"
      
        git config --global --add safe.directory "${WORKSPACE_OUTPUT_PATH}"
        /ko-app/git-init \
          -url="${PARAM_URL}" \
          -revision="${PARAM_REVISION}" \
          -refspec="${PARAM_REFSPEC}" \
          -path="${CHECKOUT_DIR}" \
          -sslVerify="${PARAM_SSL_VERIFY}" \
          -submodules="${PARAM_SUBMODULES}" \
          -depth="${PARAM_DEPTH}" \
          -sparseCheckoutDirectories="${PARAM_SPARSE_CHECKOUT_DIRECTORIES}"
        cd "${CHECKOUT_DIR}"
        RESULT_SHA="$(git rev-parse HEAD)"
        EXIT_CODE="$?"
        if [ "${EXIT_CODE}" != 0 ] ; then
          exit "${EXIT_CODE}"
        fi
        RESULT_COMMITTER_DATE="$(git log -1 --pretty=%ct)"
        printf "%s" "${RESULT_COMMITTER_DATE}" > "$(results.committer-date.path)"
        printf "%s" "${RESULT_SHA}" > "$(results.commit.path)"
        printf "%s" "${PARAM_URL}" > "$(results.url.path)"
---
# Source: yacht-tekton-resources/templates/tasks.yaml
apiVersion: tekton.dev/v1 
kind: Task
metadata:
  name: kaniko
  namespace: tekton-kaniko
  labels:
    app.kubernetes.io/version: "0.6"
  annotations:
    tekton.dev/categories: "Image Build"
    tekton.dev/displayName: "Build and upload container image using Kaniko"
    tekton.dev/pipelines.minVersion: "0.45.0"
    tekton.dev/platforms: "linux/amd64"
    tekton.dev/tags: "image-build"
spec:
  description: build Dockerfile w/ kaniko and push to a registry
  workspaces:
    - name: dockerconfig
      description: includes a docker `config.json`
      optional: true
      mountPath: /kaniko/.docker
    - name: source
      description: holds the context and Dockerfile
      optional: false
  params:
    - name: BUILDER_IMAGE
      description: the image on which builds will run (default is v1.5.1)
      type: string
      default: "gcr.io/kaniko-project/executor:v1.5.1@sha256:c6166717f7fe0b7da44908c986137ecfeab21f31ec3992f6e128fff8a94be8a5"
    - name: CONTEXT
      description: the build context used by Kaniko
      type: string
      default: "./"
    - name: DOCKERFILE
      description: Path to the Dockerfile to build
      type: string
      default: "./Dockerfile"
    - name: EXTRA_ARGS
      description: 
      type: array
      default: []
      
    - name: IMAGE
      description: name (reference) of the image to build
      type: string
      default: ""
    - name: REGISTRY
      description: registry FROM (base image)
      type: string
      default: "scr.tiab.labda.sva.de"
    - name: SUBDIRECTORY
      description: subdirectory of workspace
      type: string
      default: ""
    - name: TAG
      description: name (reference) of the image to build
      type: string
      default: ""
  results:
    - name: IMAGE_DIGEST
      description: digest of the image just built
    - name: IMAGE_URL
      description: url of the image just built.
  steps:
    - name: build-and-push
      workingDir: $(workspaces.source.path)/$(params.SUBDIRECTORY)
      args:
        - $(params.EXTRA_ARGS)
        - --dockerfile=$(params.DOCKERFILE)
        - --context=$(workspaces.source.path)/$(params.CONTEXT)
        - --destination=$(params.IMAGE):$(params.TAG)
        - --destination=$(params.IMAGE):latest
        - --build-arg=REGISTRY=$(params.REGISTRY)
        - --digest-file=$(results.IMAGE_DIGEST.path)
        - --insecure
      image: "$(params.BUILDER_IMAGE)"
      securityContext:
        runAsNonRoot: false
        runAsUser: 0
    - name: write-url
      image: "docker.io/library/bash:5.1.4@sha256:b208215a4655538be652b2769d82e576bc4d0a2bb132144c060efc5be8c3f5d6"
      script: |
        set -e
        image="$(params.IMAGE)"
        echo -n "${image}" | tee "$(results.IMAGE_URL.path)"
---
# Source: yacht-tekton-resources/templates/tasks.yaml
apiVersion: tekton.dev/v1 
kind: Task
metadata:
  name: send-msteams-notification
  namespace: tekton-kaniko
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/categories: "Messaging"
    tekton.dev/displayName: "Send message to Microsoft Teams Channel"
    tekton.dev/pipelines.minVersion: "0.48.0"
    tekton.dev/platforms: "linux/amd64,linux/s390x,linux/ppc64le"
    tekton.dev/tags: "messaging"
spec:
  description: sends simple message to a Microsoft Teams Channel
  params:
    - name: message
      description: message to notify about
      type: string
      default: ""
    - name: webhook-url-secret
      description: name of the secret with incoming webhook URL
      type: string
      default: ""
    - name: webhook-url-secret-key
      description: key in the secret
      type: string
      default: ""
  steps:
    - name: post
      image: "curlimages/curl:7.84.0"
      env:
        - name: MESSAGE
          value: $(params.message)
        - name: WEBHOOK_URL
          valueFrom:
            secretKeyRef:
              key: $(params.webhook-url-secret-key)
              name: $(params.webhook-url-secret)
      script: |-
        #!/usr/bin/env sh
        MESSAGE=$(echo "${MESSAGE}" | sed -e 's/\"/\\\\"/g')
        JSON="{\"text\": \"${MESSAGE}\" }"
        curl -X POST -H 'Content-Type: application/json' -d "${JSON}" "${WEBHOOK_URL}"

