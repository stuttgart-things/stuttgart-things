# Source: tekton-resources/templates/pipelines.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: build-buildah-image
  namespace: buildah2
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-credentials
    - name: dockerconfig
  params:
    - name: buildahImage
      type: string
      default: "quay.io/buildah/stable:v1.23.3"
      description: buildah image
    - name: context
      type: string
      default: ""
      description: path to context
    - name: dockerfile
      type: string
      default: ""
      description: path to dockerfile
    - name: git-revision
      type: string
      default: "main"
      description: revision of source git repo
    - name: gitRepoUrl
      type: string
      default: ""
      description: source git repo
    - name: gitWorkspaceSubdirectory
      type: string
      default: ""
      description: subdirectory on workspace
    - name: image
      type: string
      default: ""
      description: reference of the image to build
    - name: registry
      type: string
      default: ""
      description: registry FROM (base image)
    - name: storagDriver
      type: string
      default: "vfs"
      description: buildah storage driver
    - name: tlsVerify
      type: string
      default: "true"
      description: buildah image
  tasks:
    - name: buildah
      runAfter:
        - fetch-repository
      taskRef:
        kind: Task
        name: buildah
      workspaces:
        - name: dockerconfig
          workspace: dockerconfig
        - name: source
          workspace: shared-workspace
      params:
        - name: BUILDER_IMAGE
          value: $(params.buildahImage)
        - name: CONTEXT
          value: $(params.context)
        - name: DOCKERFILE
          value: $(params.dockerfile)
        - name: IMAGE
          value: $(params.image)
        - name: STORAGE_DRIVER
          value: $(params.storagDriver)
        - name: SUBDIRECTORY
          value: $(params.gitWorkspaceSubdirectory)
        - name: TLSVERIFY
          value: $(params.tlsVerify)
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-credentials
      params:
        - name: deleteExisting
          value: 'true'
        - name: revision
          value: $(params.git-revision)
        - name: subdirectory
          value: $(params.gitWorkspaceSubdirectory)
        - name: url
          value: $(params.gitRepoUrl)
    - name: send-msteams-notification
      runAfter:
        - buildah
      taskRef:
        kind: Task
        name: send-msteams-notification
      params:
        - name: message
          value: image $(params.image) build & pushed successfully w/ buildah ($(tasks.buildah.results.IMAGE_DIGEST))
        - name: webhook-url-secret
          value: msteams
        - name: webhook-url-secret-key
          value: url
  finally:
    - name: notify-any-failure
      taskRef:
        kind: Task
        name: send-msteams-notification
      params:
        - name: message
          value: buildah image build for $(params.image) failed!!
        - name: webhook-url-secret
          value: msteams
        - name: webhook-url-secret-key
          value: url
      when:
        - input: $(tasks.status)
          operator: in
          values: ["Failed"]
---
# Source: tekton-resources/templates/runs.yaml
apiVersion: tekton.dev/v1
kind: PipelineRun
metadata:
  name: build-buildah-image-testrun-ankit2
  namespace: buildah2
spec:
  pipelineRef:
    name: build-buildah-image
  workspaces:
    - name: dockerconfig
      secret:
        secretName: gcr-labda-vsphere
    - name: shared-workspace
      persistentVolumeClaim:
        claimName: kaniko-workspace
    - name: ssh-credentials
      secret:
        secretName: github-ssh
  params:
    - name: context
      value: "/buildah/sthings-minio/images/sthings-minio"
    - name: dockerfile
      value: "images/sthings-minio/Dockerfile"
    - name: git-revision
      value: "main"
    - name: gitRepoUrl
      value: "git@github.com:stuttgart-things/stuttgart-things.git"
    - name: gitWorkspaceSubdirectory
      value: "/buildah/sthings-minio"
    - name: image
      value: "scr.app.4sthings.tiab.ssc.sva.de/sthings-minio/sthings-minio:12.6.11"
    - name: storagDriver
      value: "overlay"
    - name: tlsVerify
      value: "false"
---
# Source: tekton-resources/templates/tasks.yaml
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: buildah
  namespace: buildah2
  labels:
    app.kubernetes.io/version: "0.5"
  annotations:
    tekton.dev/categories: "Image Build"
    tekton.dev/pipelines.minVersion: "0.17.0"
    tekton.dev/platforms: "linux/amd64,linux/s390x,linux/ppc64le,linux/arm64"
    tekton.dev/tags: "image-build"
spec:
  description: buildah task builds source into a container image and then pushes it to a container registry
  workspaces:
    - name: dockerconfig
      description: includes a docker `config.json`
      optional: true
      mountPath: /root/secrets
    - name: source
      description: holds the context and Dockerfile
      optional: false
    - name: sslcertdir
      description: CA certificates have their own directory
      optional: true
  params:
    - name: BUILDER_IMAGE
      description: the image on which builds will run (default is v1.5.1)
      type: string
      default: "quay.io/buildah/stable:v1.23.3"
    - name: BUILD_EXTRA_ARGS
      description: format of the built container, oci or docker
      type: string
      default: "oci"
    - name: REGISTRY
      description: login registry
      type: string
      default: ""
    - name: CONTEXT
      description: the build context used by Kaniko
      type: string
      default: "./"
    - name: DOCKERFILE
      description: Path to the Dockerfile to build
      type: string
      default: "./Dockerfile"
    - name: FORMAT
      description: format of the built container, oci or docker
      type: string
      default: "oci"
    - name: IMAGE
      description: name (reference) of the image to build
      type: string
      default: ""
    - name: PUSH_EXTRA_ARGS
      description: extra parameters passed for the push command when pushing images.
      type: string
      default: ""
    - name: STORAGE_DRIVER
      description: buildah storage driver
      type: string
      default: "overlay"
    - name: SUBDIRECTORY
      description: subdirectory of workspace
      type: string
      default: ""
    - name: TLSVERIFY
      description: verify the TLS on the registry endpoint (for push/pull to a non-TLS registry)
      type: string
      default: "true"
  results:
    - name: IMAGE_DIGEST
      description: digest of the image just built
    - name: IMAGE_URL
      description: url of the image just built.
  steps:
    - name: build
      workingDir: $(workspaces.source.path)/$(params.SUBDIRECTORY)
      image: "$(params.BUILDER_IMAGE)"
      env:
        - name: CERT_DIR_FLAG
          value: $(workspaces.sslcertdir.path)
        # - name: REGISTRY_USER
        #   valueFrom:
        #     secretKeyRef:
        #       key: username
        #       name: regcerts
        # - name: REGISTRY_PASSWORD
        #   valueFrom:
        #     secretKeyRef:
        #       key: password
        #       name: regcerts
      volumeMounts:
        - name: varlibcontainers
          mountPath: /var/lib/containers
      securityContext:
        privileged: true
      script: |
        #!/usr/bin/env sh
        set -eu

        [[ "$(workspaces.sslcertdir.bound)" == "true" ]] && CERT_DIR_FLAG="--cert-dir $(workspaces.sslcertdir.path)"

        cat $(params.DOCKERFILE)

        #buildah login --tls-verify=false -u ${REGISTRY_USER} -p ${REGISTRY_PASSWORD} $(params.REGISTRY)

        buildah login --tls-verify=false -u sthings -p Atlan7is scr.app.4sthings.tiab.ssc.sva.de

        buildah ${CERT_DIR_FLAG} --storage-driver=$(params.STORAGE_DRIVER) bud \
        --format=$(params.FORMAT) --tls-verify=$(params.TLSVERIFY) --no-cache \
        -f $(params.DOCKERFILE) \
        -t $(params.IMAGE)

        buildah ${CERT_DIR_FLAG} --storage-driver=$(params.STORAGE_DRIVER) push \
        $(params.PUSH_EXTRA_ARGS) --tls-verify=$(params.TLSVERIFY) \
        --digestfile /tmp/image-digest $(params.IMAGE) \
        docker://$(params.IMAGE)

        cat /tmp/image-digest | tee $(results.IMAGE_DIGEST.path)
        echo -n "$(params.IMAGE)" | tee $(results.IMAGE_URL.path)
  volumes:
    - name: varlibcontainers
      emptyDir: {}
