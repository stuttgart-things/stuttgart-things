---
apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: vsphere-vm
  labels:
    crossplane.io/xrd: xvmspherevms.resources.stuttgart-things.com
spec:
  compositeTypeRef:
    apiVersion: resources.stuttgart-things.com/v1alpha1
    kind: XVsphereVM
  resources:
    - name: vsphere-vm
      base:
        kind: Workspace
        apiVersion: tf.upbound.io/v1beta1
        metadata:
          annotations:
            crossplane.io/external-name: vsphere-vm
        spec:
          # providerConfigRef:
          #   name: default
          writeConnectionSecretToRef:
            name: vsphere-vm-test
            namespace: crossplane-system
          forProvider:
            source: Inline
            vars:
              - key: vmcount
                type: integer
              - key: os
                type: string
              - key: name
                type: string
              - key: cpu
                type: integer
              - key: ram
                type: string
              - key: disk
                type: string
              - key: templatepath
                type: string
              - key: network
                type: string
              - key: folder
                type: string
            varFiles:
              - source: SecretKey
                secretKeyRef:
                  namespace: default
                  name: vsphere-tfvars
                  key: terraform.tfvars
              # - source: ConfigMap
              #   configMapKeyRef:
              #     namespace: default
              #     name: my-config
              #     key: labda.tfvars
            module: |
              module "vsphere-vm" {
                source = "github.com/stuttgart-things/vsphere-vm"
                vm_count               = var.vmcount
                vsphere_vm_name        = var.name
                vm_memory              = var.ram
                vm_num_cpus            = var.cpu
                vm_disk_size           = var.disk
                firmware               = var.firmware
                vsphere_vm_folder_path = var.folder
                vsphere_datacenter     = var.vsphere_datacenter
                vsphere_datastore      = var.vsphere_datastore
                vsphere_resource_pool  = var.vsphere_resource_pool
                vsphere_network        = var.network
                vsphere_vm_template    = "${var.templatepath}/${var.os}"
                vm_ssh_user            = var.ssh_user
                vm_ssh_password        = var.ssh_password
                bootstrap              = var.bootstrapcmd
                annotation             = var.annotation
              }

              variable "os" {
                description = "Name/version of vm template"
                type        = string
                default     = false
              }

              variable "templatepath" {
                description = "Path to vm-template"
                type        = string
                default     = false
              }

              variable "network" {
                description = "Bootstrap os"
                type        = string
                default     = false
              }

              variable "bootstrapcmd" {
                description = "Bootstrap os"
                type        = list(string)
                default     = ["whoami", "hostname"]
              }

              variable "annotation" {
                description = "Bootstrap os"
                type        = string
                default     = "VSPHERE-VM BUILD w/ TERRAFORM CROSSPLANE PROVIDER FOR STUTTGART-THINGS"
              }

              variable "folder" {
                default     = false
                type        = string
                description = "target (vm) folder path of vsphere virtual machine"
              }

              variable "firmware" {
                default     = "bios"
                type        = string
                description = "The firmware interface to use on the virtual machine. Can be one of bios or EFI. Default: bios"
              }

              provider "vsphere" {
                user                 = var.vsphere_user
                password             = var.vsphere_password
                vsphere_server       = var.vsphere_server
                allow_unverified_ssl = true
              }

              variable "name" {
                type        = string
                default     = false
                description = "vm name"
              }

              variable "vmcount" {
                default     = 1
                type        = number
                description = "amount of vms"
              }

              variable "vsphere_server" {
                type        = string
                default     = false
                description = "vsphere server"
              }

              variable "vsphere_datacenter" {
                default     = false
                type        = string
                description = "name of datacenter"
              }

              variable "vsphere_datastore" {
                default     = false
                type        = string
                description = "name of vsphere datastore"
              }

              variable "vsphere_resource_pool" {
                default     = false
                type        = string
                description = "name of resource_pool"
              }

              variable "vsphere_user" {
                type        = string
                default     = false
                description = "password of vsphere user"
              }

              variable "vsphere_password" {
                type        = string
                default     = false
                description = "password of vsphere user"
              }

              variable "ssh_user" {
                type        = string
                default     = false
                description = "username of ssh user for vm"
              }

              variable "ssh_password" {
                type        =  string
                default     = false
                description = "password of ssh user for vm"
              }

              variable "ram" {
                default     = 4096
                type        = number
                description = "amount of memory of the vm"
              }

              variable "disk" {
                default     = "32"
                type        = string
                description = "size of disk"
              }

              variable "cpu" {
                default     = 4
                type        = number
                description = "amount of cpus from the vm"
              }
      patches:
        - type: FromCompositeFieldPath
          fromFieldPath: spec.tfvars.secretName
          toFieldPath: spec.forProvider.varFiles[0].secretKeyRef.name
        - type: FromCompositeFieldPath
          fromFieldPath: spec.tfvars.secretNamespace
          toFieldPath: spec.forProvider.varFiles[0].secretKeyRef.namespace
        - type: FromCompositeFieldPath
          fromFieldPath: spec.tfvars.secretKey
          toFieldPath: spec.forProvider.varFiles[0].secretKeyRef.key
        - type: FromCompositeFieldPath
          fromFieldPath: spec.vm.count
          toFieldPath: spec.forProvider.vars[0].value
        - type: FromCompositeFieldPath
          fromFieldPath: spec.vm.os
          toFieldPath: spec.forProvider.vars[1].value
        - type: FromCompositeFieldPath
          fromFieldPath: spec.vm.name
          toFieldPath: spec.forProvider.vars[2].value
        - type: FromCompositeFieldPath
          fromFieldPath: spec.vm.cpu
          toFieldPath: spec.forProvider.vars[3].value
        - type: FromCompositeFieldPath
          fromFieldPath: spec.vm.ram
          toFieldPath: spec.forProvider.vars[4].value
        - type: FromCompositeFieldPath
          fromFieldPath: spec.vm.disk
          toFieldPath: spec.forProvider.vars[5].value
        - type: FromCompositeFieldPath
          fromFieldPath: spec.vm.templatepath
          toFieldPath: spec.forProvider.vars[6].value
        - type: FromCompositeFieldPath
          fromFieldPath: spec.vm.network
          toFieldPath: spec.forProvider.vars[7].value
        - type: FromCompositeFieldPath
          fromFieldPath: spec.vm.folder
          toFieldPath: spec.forProvider.vars[8].value
        - type: FromCompositeFieldPath
          fromFieldPath: spec.connectionSecret.name
          toFieldPath: spec.writeConnectionSecretToRef.name
        - type: FromCompositeFieldPath
          fromFieldPath: spec.connectionSecret.namespace
          toFieldPath: spec.writeConnectionSecretToRef.namespace
