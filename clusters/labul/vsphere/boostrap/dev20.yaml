---
# Source: sthings-cluster/templates/custom-resource.yaml
apiVersion: machineshop.sthings.tiab.ssc.sva.de/v1beta1
kind: Terraform
metadata:
  name: dev20
  namespace: machine-shop
  labels:
    app.kubernetes.io/created-by: machine-shop-operator
    app.kubernetes.io/name: terraform
    app.kubernetes.io/part-of: machine-shop-operator
spec:
  backend:
  - access_key=apps/data/artifacts:accessKey
  - secret_key=apps/data/artifacts:secretKey
  module:
  - moduleName=dev20
  - backendKey=dev20.tfstate
  - moduleSourceUrl=https://artifacts.app.4sthings.tiab.ssc.sva.de/modules/vsphere-vm.zip
  - backendEndpoint=https://artifacts.app.4sthings.tiab.ssc.sva.de
  - backendRegion=main
  - backendBucket=vsphere-vm
  - tfProviderName=vsphere
  - tfProviderSource=hashicorp/vsphere
  - tfProviderVersion=2.4.1
  - tfVersion=1.5.3
  secrets:
  - vsphere_user=cloud/data/vsphere:username
  - vsphere_password=cloud/data/vsphere:password
  - vsphere_server=cloud/data/vsphere:ip
  - vm_ssh_user=cloud/data/vsphere:vm_ssh_user
  - vm_ssh_password=cloud/data/vsphere:vm_ssh_password
  template: vsphere-vm
  terraform-version: 1.5.3
  variables:
  - vsphere_vm_name="dev20"
  - vm_count=3
  - vm_num_cpus=6
  - vm_memory=8192
  - vm_disk_size=92
  - vsphere_vm_template="/LabUL/vm/phermann/vm-templates/ubuntu23"
  - vsphere_vm_folder_path="phermann/testing"
  - vsphere_network="/LabUL/network/LAB-10.31.103"
  - vsphere_datastore="//LabUL/datastore/UL-ESX-SAS-01"
  - vsphere_resource_pool="/LabUL/host/Cluster01/Resources"
  - vsphere_datacenter="/LabUL"
---
# Source: sthings-cluster/templates/config-map.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ansible
  namespace: 
data:
  baseos-setup.yaml: |
    - hosts: all
      become: true
      gather_facts: true
  
      vars:
        manage_filesystem: true
        update_packages: true
        install_requirements: true
        install_motd: true
        username: sthings
        lvm_home_sizing: "15%"
        lvm_root_sizing: "35%"
        lvm_var_sizing: "50%"
        send_to_msteams: true
        msteams_webhook_url: "https://365sva.webhook.office.com/webhookb2/2f14a9f8-4736-46dd-9c8c-31547ec37180@0a65cb1e-37d5-41ff-980a-647d9d0e4f0b/IncomingWebhook/a23d672b86dc42f7a58c9de10632339e/dc3a27ed-396c-40b7-a9b2-f1a2b6b44efe"
        reboot_all: true
  
        vault_instances:
          - https://vault.tiab.labda.sva.de:8200
          - https://vault.labul.sva.de:8200
          - https://vault-vsphere.labul.sva.de:8200
          - https://vault-pve.labul.sva.de:8200
          - https://vault-vsphere.tiab.labda.sva.de:8200
  
      roles:
        - role: manage-filesystem
          when: manage_filesystem|bool
  
        - role: install-requirements
          when: install_requirements|bool
  
      pre_tasks:
        - ansible.builtin.reboot:
          when: reboot_all|bool
  
      tasks:
        - name: Install vault ca certificate to local system from multiple instances
          ansible.builtin.include_role:
            name: install-configure-vault
            tasks_from: install-ca-auth
          vars:
            vault_url: "{{ vault_instance }}"
          loop: "{{ vault_instances }}"
          loop_control:
            loop_var: vault_instance
          when: vault_instances is defined
  
        - name: Send webhook to msteams
          ansible.builtin.include_role:
            name: create-send-webhook
          vars:
            summary_text: base-os-setup was executed
            msteams_url: "https://365sva.webhook.office.com/webhookb2/2f14a9f8-4736-46dd-9c8c-31547ec37180@0a65cb1e-37d5-41ff-980a-647d9d0e4f0b/IncomingWebhook/a23d672b86dc42f7a58c9de10632339e/dc3a27ed-396c-40b7-a9b2-f1a2b6b44efe"
            card_title: base-os-setup was executed
            act_image: "{{ logo_pic }}"
            act_title: "{{ quotes | random }}"
            act_text: "{{ quotes | random }}"
            os_facts: |
              base-os-setup was executed on "{{ ansible_fqdn }}"
            ms_teams_notification_type: "simple"
          tags: notify
          ignore_errors: true
          when: send_to_msteams|bool
  configure-rke-node.yaml: |
    ---
    - hosts: all
      become: true
      gather_facts: true
      vars:
        install_docker: false
      roles:
        - configure-rke-node
  deploy-upgrade-rke.yaml: |
    ---
    - hosts: all
      become: true
  
      vars:
        rke_version: 2
        rke2_k8s_version: 1.26.5
        rke2_release_kind: rke2r1
        cluster_setup: multinode
        rke2_fetched_kubeconfig_path: /home/nonroot/kubeconfig
        disable_rke2_components:
          - rke2-ingress-nginx
          - rke-snapshot-controller
  
      roles:
        - role: deploy-configure-rke
      post_tasks:
        - name: Copy flux secrets to RKE2 manifests
          ansible.builtin.copy:
            src: /home/nonroot/flux/
            dest: /var/lib/rancher/rke2/server/manifests/
          when: inventory_hostname in groups['initial_master_node']
  
    - hosts: localhost
      become: false
      vars:
        vault_approle_id: "{{ lookup('env', 'VAULT_ROLE_ID') }}"
        vault_approle_secret: "{{ lookup('env', 'VAULT_SECRET_ID') }}"
        vault_url: "{{ lookup('env', 'VAULT_ADDR') }}"
        upload_kubeconfig_vault: true
        rke2_fetched_kubeconfig_path: /home/nonroot/kubeconfig
  
      tasks:
        - name: Write secret to vault using key value V2 engine
          community.hashi_vault.vault_write:
            auth_method: approle
            url: "{{ vault_url }}"
            role_id: "{{ vault_approle_id }}"
            secret_id: "{{ vault_approle_secret }}"
            validate_certs: false
            path: kubeconfigs/data/app
            data:
              data:
                kubeconfig: "{{ lookup('ansible.builtin.file', rke2_fetched_kubeconfig_path) | b64encode }}"
          when: upload_kubeconfig_vault|bool
  
    - hosts: localhost
      become: false
      vars:
        vault_approle_id: "{{ lookup('env', 'VAULT_ROLE_ID') }}"
        vault_approle_secret: "{{ lookup('env', 'VAULT_SECRET_ID') }}"
        vault_url: "{{ lookup('env', 'VAULT_ADDR') }}"
        github_token: "{{ lookup('community.hashi_vault.hashi_vault', 'secret=apps/data/github:token validate_certs=false auth_method=approle role_id={{ vault_approle_id }} secret_id={{ vault_approle_secret }} url={{ vault_url }}') }}"
        kubeconfig_vault_path: kubeconfigs/data/app:kubeconfig
        kubeconfig: "{{ lookup('community.hashi_vault.hashi_vault', 'secret={{ kubeconfig_vault_path }} validate_certs=false auth_method=approle role_id={{ vault_approle_id }} secret_id={{ vault_approle_secret }} url={{ vault_url }}') }}"
        kubeconfig_path: /home/nonroot/kubeconfig
        install_flux: true
  
      tasks:
        - name: Copy kubeconfig using inline content
          ansible.builtin.copy:
            content: "{{ kubeconfig|b64decode }}"
            dest: "{{ kubeconfig_path }}"
            remote_src: yes
          when: install_flux|bool
  
        - name: Flux bootstrap
          ansible.builtin.shell: |
            flux bootstrap github --owner=stuttgart-things --repository=stuttgart-things --path=clusters/labul/vsphere/app
          environment:
            KUBECONFIG: "{{ kubeconfig_path }}"
            GITHUB_TOKEN: "{{ github_token }}"
          when: install_flux|bool
  install-configure-nfs.yaml: |
    ---
    - hosts: all
      gather_facts: true
      become: true
      vars:
        kind: server
        permanent: true
        nfs_manage_firewall: true
        nfs_export_path:
          - /var/nfs/k8s
  
      roles:
        - install-configure-nfs
  inventory.yaml: |
    [initial_master_node]
    dev20.labul.sva.de
    [additional_master_nodes]
    dev20-2.labul.sva.de
    dev20-3.labul.sva.de
    [all:vars]
    ansible_ssh_common_args='-o StrictHostKeyChecking=no'
    ansible_user=sthings
  play.yaml: |
    ---
    - name: Prepare env
      ansible.builtin.import_playbook: prepare-env.yaml
      when: prepare_env|bool
  
    - name: Execute baseos playbook
      ansible.builtin.import_playbook: baseos-setup.yaml
      when: execute_baseos|bool
  
    - name: Execute "{{ target_play }}.yaml"
      ansible.builtin.import_playbook: "{{ target_play }}.yaml"
  prepare-env.yaml: |
    ---
    - hosts: localhost
      become: false
  
      vars:
        home_dir: "{{ lookup('env','HOME') }}"
        targets: "{{ lookup('env','TARGETS') }}"
        targets_list: "{{ targets.split(';') }}"
        inv_path: "{{ lookup('env','INV_PATH') }}"
        vault_approle_id: "{{ lookup('env', 'VAULT_ROLE_ID') }}"
        vault_approle_secret: "{{ lookup('env', 'VAULT_SECRET_ID') }}"
        vault_url: "{{ lookup('env', 'VAULT_ADDR') }}"
        ssh_key: "{{ lookup('community.hashi_vault.hashi_vault', 'secret=ssh/data/sthings:privateKey validate_certs=false auth_method=approle role_id={{ vault_approle_id }} secret_id={{ vault_approle_secret }} url={{ vault_url }}') }}"
        create_inventory: false
  
      tasks:
        - name: Create hosts
          ansible.builtin.set_fact:
            target_hosts: "{{ targets_list | join('\n') }}"
  
        - name: Write vars on inv file
          ansible.builtin.blockinfile:
            path: "{{ inv_path }}"
            block: |
              [all]
              {{ target_hosts }}
  
              [all:vars]
              ansible_user=sthings
              host_key_checking=false
          when: create_inventory|bool
  
        - name: Copy inventory
          ansible.builtin.copy:
            src: inventory.yaml
            dest: "{{ inv_path }}"
          when: not create_inventory
  
        - name: Creating ssh directory
          ansible.builtin.file:
            path: "{{ home_dir }}/.ssh/"
            state: directory
  
        - name: Creating ssh private key file
          ansible.builtin.copy:
            dest: "{{ home_dir }}/.ssh/id_rsa"
            content: "{{ ssh_key | b64decode }}"
            mode: '0600'
  
        - ansible.builtin.meta: refresh_inventory
  
        - name: Wait for SSH
          ansible.builtin.wait_for:
            host: "{{ item }}"
            port: 22
            delay: 1
            timeout: 1200
            sleep: 10
          with_items:
            - "{{ groups['all'] }}"

---
# Source: sthings-cluster/templates/job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: 2023-08-02-configure-rke-node-l292
  namespace: machine-shop
  labels:
    app: machine-shop-operator
    machine-shop-operator: ansible
spec:
  template:
    metadata:
      name: 2023-08-02-configure-rke-node-l292
      labels:
        app: machine-shop-operator
        machine-shop-operator: ansible
    spec:
      containers:
        - name: manager
          image: eu.gcr.io/stuttgart-things/sthings-ansible:8.2.0-3
          imagePullPolicy: Always
          securityContext:
            allowPrivilegeEscalation: true
            privileged: true
            runAsNonRoot: true
            readOnlyRootFilesystem: false
            runAsUser: 65532
          env:
            - name: ANSIBLE_HOST_KEY_CHECKING
              value: "False"
            - name: INV_PATH
              value: "/tmp/inv"
            - name: TARGETS
              value: "dev20.labul.sva.de;dev20-2.labul.sva.de;dev20-3.labul.sva.de"
          envFrom:
            - secretRef:
                name: vault
          resources:
            requests:
              cpu: 150m
              memory: 256Mi
            limits:
              cpu: 500m
              memory: 768Mi
          command:
            - /bin/sh
            - -ec
            - touch ${INV_PATH} && ansible-playbook -i $INV_PATH $HOME/ansible/play.yaml -vv -e prepare_env=true -e execute_baseos=true -e target_play=configure-rke-node
          volumeMounts:
            - name: ansible
              mountPath: /home/nonroot/ansible
            - name: flux-secrets
              mountPath: /home/nonroot/flux
      restartPolicy: Never
      volumes:
        - name: ansible
          configMap:
            name: ansible
        - name: flux-secrets
          configMap:
            name: flux-secrets

