---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: scan-trivy
  labels:
    app.kubernetes.io/version: "0.2"
  annotations:
    tekton.dev/pipelines.minVersion: "0.50.0"
    tekton.dev/categories: Code Quality
    tekton.dev/tags: security
    tekton.dev/displayName: "scan trivy"
    tekton.dev/platforms: "linux/amd64"
spec:
  description: >-
    scanner for vulnerabilities in container images, file systems, and Git repositories, as well as for configuration issues and hard-coded secrets
  params:
    - name: scanCommand
      description: scanning command e.g. image
      default: image
    - name: scanObject
      description: object to scan
      default: "."
    - name: outputFormat
      description: trivy output format
      default: table
    - name: scanSeverity
      description: severity level
      default: MEDIUM,HIGH,CRITICAL
    - name: scanTimeout
      description: timout of scan
      default: 30m
    - name: outputFile
      description: trivy report destination
      default: report.txt
    - name: scanFlags
      description: flags for scanning
      type: array
    - name: trivyImage
      description: trivy image
      default: aquasec/trivy:0.45.1
    - name: skopeoImage
      description: trivy image
      default: quay.io/skopeo/stable:v1.13.3
  workspaces:
    - name: dockerconfig
      description: includes a docker `config.json`
      optional: true
      mountPath: /tekton/home/.docker
  stepTemplate:
    securityContext:
      privileged: false
      runAsNonRoot: true
      runAsUser: 65532
    env:
      - name: HOME
        value: /tekton/home
  steps:
    - name: image-available-check
      image: $(params.skopeoImage)
      env:
        - name: HOME
          value: /tekton/home
      script: |
        #!/usr/bin/env bash
        set -eu

        # CHECK IF IMAGE IS (YES) AVAILABLE
        until skopeo inspect docker://$(params.scanObject) --tls-verify=false; do echo checking.. && sleep 30; done
    - name: scan
      image: $(params.trivyImage)
      args:
        - $(params.scanFlags[*])
      script: |
        #!/usr/bin/env sh
        set -eu

        # SET FLAGS FROM ARGS
        flags=" "; for argument in "$@"; do flags=${flags}'--'$argument' '; done

        # SCAN W/ TRIVY
        echo trivy scan $(params.scanCommand) $(params.scanObject) for CI output
        trivy $(params.scanCommand) $(params.scanObject) -f table --severity $(params.scanSeverity) ${flags} --exit-code 0 --cache-dir /tmp/.cache --timeout $(params.scanTimeout) --insecure

        echo trivy scan $(params.scanCommand) $(params.scanObject) for report
        trivy $(params.scanCommand) $(params.scanObject) -f  $(params.outputFormat) --severity $(params.scanSeverity) ${flags} --exit-code 0 --cache-dir /tmp/.cache --timeout $(params.scanTimeout) --output $(params.outputFile) --insecure

        echo trivy scan $(params.scanCommand) $(params.scanObject) for CI status
        trivy $(params.scanCommand) $(params.scanObject) -f  $(params.outputFormat) --severity $(params.scanSeverity) ${flags} --exit-code 1 --cache-dir /tmp/.cache --timeout $(params.scanTimeout) --insecure
