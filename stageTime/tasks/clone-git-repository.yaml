apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: git-clone
  labels:
    app.kubernetes.io/version: "0.9"
  annotations:
    tekton.dev/categories: "Git"
    tekton.dev/displayName: "git clone"
    tekton.dev/pipelines.minVersion: "0.48.0"
    tekton.dev/platforms: "linux/amd64,linux/s390x,linux/ppc64le,linux/arm64"
    tekton.dev/tags: "git"
spec:
  description: clone a git repo from the provided url
  workspaces:
    - name: basic-auth
      description: workspace containing a .gitconfig and .git-credentials file
      optional: true
    - name: output
      description: the git repo will be cloned onto the volume backing this Workspace
      optional: false
    - name: ssh-directory
      description: .ssh directory with private key, known_hosts, config..
      optional: true
    - name: ssl-ca-directory
      description: workspace containing CA certificates
      optional: true
  params:
    - name: crtFileName
      description: file name of mounted crt using ssl-ca-directory workspace
      type: string
      default: "ca-bundle.crt"
    - name: deleteExisting
      description: Clean out the contents of the destination directoryÃ¥
      type: string
      default: "true"
    - name: depth
      description: Perform a shallow clone
      type: string
      default: "1"
    - name: gitInitImage
      description: the image providing the git-init binary that this Task runs
      type: string
      default: "gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/git-init:v0.40.2"
    - name: httpProxy
      description: HTTP proxy server for non-SSL requests
      type: string
      default: ""
    - name: httpsProxy
      description: HTTPS proxy server for SSL requests
      type: string
      default: ""
    - name: noProxy
      description: Opt out of proxying HTTP/HTTPS requests
      type: string
      default: ""
    - name: refspec
      description: Refspec to fetch before checking out revision
      type: string
      default: ""
    - name: revision
      description: Revision to checkout
      type: string
      default: ""
    - name: sparseCheckoutDirectories
      description: define the directory patterns to match or exclude
      type: string
      default: ""
    - name: sslVerify
      description: Set the `http.sslVerify` global git config
      type: string
      default: "true"
    - name: subdirectory
      description: subdirectory inside the `output` workspace to clone the repo into
      type: string
      default: ""
    - name: submodules
      description: Initialize and fetch git submodules
      type: string
      default: "true"
    - name: url
      description: repository URL to clone from
      type: string
      default: ""
    - name: userHome
      description: absolute path to the user's home directory
      type: string
      default: "/home/git"
    - name: verbose
      description: Log the commands that are executed during `git-clone`'s operation
      type: string
      default: "true"
  results:
    - name: commit
      description: the precise commit SHA
    - name: committer-date
      description: The epoch timestamp of the commit that was fetched by this Task.
    - name: url
      description: the precise URL
  steps:
    - name: clone
      image: "$(params.gitInitImage)"
      env:
        - name: HOME
          value: $(params.userHome)
        - name: PARAM_CRT_FILENAME
          value: $(params.crtFileName)
        - name: PARAM_DELETE_EXISTING
          value: $(params.deleteExisting)
        - name: PARAM_DEPTH
          value: $(params.depth)
        - name: PARAM_HTTPS_PROXY
          value: $(params.httpsProxy)
        - name: PARAM_HTTP_PROXY
          value: $(params.httpProxy)
        - name: PARAM_NO_PROXY
          value: $(params.noProxy)
        - name: PARAM_REFSPEC
          value: $(params.refspec)
        - name: PARAM_REVISION
          value: $(params.revision)
        - name: PARAM_SPARSE_CHECKOUT_DIRECTORIES
          value: $(params.sparseCheckoutDirectories)
        - name: PARAM_SSL_VERIFY
          value: $(params.sslVerify)
        - name: PARAM_SUBDIRECTORY
          value: $(params.subdirectory)
        - name: PARAM_SUBMODULES
          value: $(params.submodules)
        - name: PARAM_URL
          value: $(params.url)
        - name: PARAM_USER_HOME
          value: $(params.userHome)
        - name: PARAM_VERBOSE
          value: $(params.verbose)
        - name: WORKSPACE_BASIC_AUTH_DIRECTORY_BOUND
          value: $(workspaces.basic-auth.bound)
        - name: WORKSPACE_BASIC_AUTH_DIRECTORY_PATH
          value: $(workspaces.basic-auth.path)
        - name: WORKSPACE_OUTPUT_PATH
          value: $(workspaces.output.path)
        - name: WORKSPACE_SSH_DIRECTORY_BOUND
          value: $(workspaces.ssh-directory.bound)
        - name: WORKSPACE_SSH_DIRECTORY_PATH
          value: $(workspaces.ssh-directory.path)
        - name: WORKSPACE_SSL_CA_DIRECTORY_BOUND
          value: $(workspaces.ssl-ca-directory.bound)
        - name: WORKSPACE_SSL_CA_DIRECTORY_PATH
          value: $(workspaces.ssl-ca-directory.path)
      securityContext:
        privileged: false
        runAsNonRoot: true
        runAsUser: 65532
      script: |-
        #!/usr/bin/env sh
        set -eu

        if [ "${PARAM_VERBOSE}" = "true" ] ; then
          set -x
        fi

        if [ "${WORKSPACE_BASIC_AUTH_DIRECTORY_BOUND}" = "true" ] ; then
          cp "${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/.git-credentials" "${PARAM_USER_HOME}/.git-credentials"
          cp "${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/.gitconfig" "${PARAM_USER_HOME}/.gitconfig"
          chmod 400 "${PARAM_USER_HOME}/.git-credentials"
          chmod 400 "${PARAM_USER_HOME}/.gitconfig"
        fi

        if [ "${WORKSPACE_SSH_DIRECTORY_BOUND}" = "true" ] ; then
          cp -R "${WORKSPACE_SSH_DIRECTORY_PATH}" "${PARAM_USER_HOME}"/.ssh
          chmod 700 "${PARAM_USER_HOME}"/.ssh
          chmod -R 400 "${PARAM_USER_HOME}"/.ssh/*
        fi

        if [ "${WORKSPACE_SSL_CA_DIRECTORY_BOUND}" = "true" ] ; then
          export GIT_SSL_CAPATH="${WORKSPACE_SSL_CA_DIRECTORY_PATH}"
          if [ "${PARAM_CRT_FILENAME}" != "" ] ; then
              export GIT_SSL_CAINFO="${WORKSPACE_SSL_CA_DIRECTORY_PATH}/${PARAM_CRT_FILENAME}"
          fi
        fi
        CHECKOUT_DIR="${WORKSPACE_OUTPUT_PATH}/${PARAM_SUBDIRECTORY}"

        cleandir() {
          # Delete any existing contents of the repo directory if it exists.
          #
          # We don't just "rm -rf ${CHECKOUT_DIR}" because ${CHECKOUT_DIR} might be "/"
          # or the root of a mounted volume.
          if [ -d "${CHECKOUT_DIR}" ] ; then
            # Delete non-hidden files and directories
            rm -rf "${CHECKOUT_DIR:?}"/*
            # Delete files and directories starting with . but excluding ..
            rm -rf "${CHECKOUT_DIR}"/.[!.]*
            # Delete files and directories starting with .. plus any other character
            rm -rf "${CHECKOUT_DIR}"/..?*
          fi
        }

        if [ "${PARAM_DELETE_EXISTING}" = "true" ] ; then
          cleandir || true
        fi

        test -z "${PARAM_HTTP_PROXY}" || export HTTP_PROXY="${PARAM_HTTP_PROXY}"
        test -z "${PARAM_HTTPS_PROXY}" || export HTTPS_PROXY="${PARAM_HTTPS_PROXY}"
        test -z "${PARAM_NO_PROXY}" || export NO_PROXY="${PARAM_NO_PROXY}"

        git config --global --add safe.directory "${WORKSPACE_OUTPUT_PATH}"
        /ko-app/git-init \
          -url="${PARAM_URL}" \
          -revision="${PARAM_REVISION}" \
          -refspec="${PARAM_REFSPEC}" \
          -path="${CHECKOUT_DIR}" \
          -sslVerify="${PARAM_SSL_VERIFY}" \
          -submodules="${PARAM_SUBMODULES}" \
          -depth="${PARAM_DEPTH}" \
          -sparseCheckoutDirectories="${PARAM_SPARSE_CHECKOUT_DIRECTORIES}"
        cd "${CHECKOUT_DIR}"
        RESULT_SHA="$(git rev-parse HEAD)"
        EXIT_CODE="$?"
        if [ "${EXIT_CODE}" != 0 ] ; then
          exit "${EXIT_CODE}"
        fi
        RESULT_COMMITTER_DATE="$(git log -1 --pretty=%ct)"
        printf "%s" "${RESULT_COMMITTER_DATE}" > "$(results.committer-date.path)"
        printf "%s" "${RESULT_SHA}" > "$(results.commit.path)"
        printf "%s" "${PARAM_URL}" > "$(results.url.path)"