---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: build-packer
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/categories: "virtual-machines"
    tekton.dev/displayName: "Build vm template w/ packer"
    tekton.dev/pipelines.minVersion: "0.48.0"
    tekton.dev/platforms: "linux/amd64,linux/s390x,linux/ppc64le"
    tekton.dev/tags: "virtual-machines"
spec:
  description: build packer vm template
  workspaces:
    - name: source
      description: holds the working data
      optional: false
  params:
    - name: BOOT_CONFIG_PATH
      description: kickstart config for installation
      type: string
      default: ""
    - name: DEFAULT_ENVIRONMENT_PATH
      description: path to the default environment
      type: string
      default: ""
    - name: OS_TEMPLATE_PATH
      description: path to the os template
      type: string
      default: ""
    - name: OS_VERSION
      description: name of the secret with incoming webhook URL
      type: string
      default: ""
    - name: VM_TEMPLATE_NAME
      description: name of the to be build vm template
      type: string
      default: ""
    - name: ANSIBLE_PROVISIONING
      description: ansible provisioning / playbook name
      type: string
      default: base-os
    - name: SUB_DIRECTORY
      description: subdirectory of workspace
      type: string
      default: ""
    - name: WORKING_IMAGE
      description: the image on which ansible will run
      type: string
      default: eu.gcr.io/stuttgart-things/sthings-packer:1.9.4-8.5.0
    - name: vault-secret-key-addr
      description: vaul addr key in the secret
      type: string
      default: "VAULT_ADDR"
    - name: vault-secret-key-approleId
      description: approle id key in the secret
      type: string
      default: "VAULT_ROLE_ID"
    - name: vault-secret-key-approleSecret
      description: approle secret key in the secret
      type: string
      default: "VAULT_SECRET_ID"
    - name: vault-secret-key-namespace
      description: namespace key in the secret
      type: string
      default: "VAULT_NAMESPACE"
    - name: vaultSecretName
      description: name of the secret with incoming webhook URL
      type: string
      default: "vault"
    - name: vaultPathCloudUser
      description: secret path cloud user (vault)
      type: string
    - name: vaultPathCloudPassword
      description: secret path cloud password (vault)
      type: string
  stepTemplate:
    workingDir: $(workspaces.source.path)/$(params.SUB_DIRECTORY)
    image: "$(params.WORKING_IMAGE)"
    securityContext:
      privileged: false
      runAsNonRoot: true
      runAsUser: 65532
    env:
      - name: ANSIBLE_HOST_KEY_CHECKING
        value: "False"
      - name: VAULT_ADDR
        valueFrom:
          secretKeyRef:
            key: $(params.vault-secret-key-addr)
            name: $(params.vaultSecretName)
      - name: VAULT_NAMESPACE
        valueFrom:
          secretKeyRef:
            key: $(params.vault-secret-key-namespace)
            name: $(params.vaultSecretName)
      - name: VAULT_ROLE_ID
        valueFrom:
          secretKeyRef:
            key: $(params.vault-secret-key-approleId)
            name: $(params.vaultSecretName)
      - name: VAULT_SECRET_ID
        valueFrom:
          secretKeyRef:
            key: $(params.vault-secret-key-approleSecret)
            name: $(params.vaultSecretName)
  steps:
    - name: render-vmtemplate-config
      script: |-
        #!/usr/bin/env sh
        set -eu

        echo "CREATE WORKINGDIR"
        rm -rf ./$(params.OS_VERSION) && mkdir ./$(params.OS_VERSION)

        echo "RENDER VMTEMPLATE"
        machineShop render --source local \
        --template ./$(params.OS_TEMPLATE_PATH) \
        --output file \
        --brackets square \
        --defaults ./$(params.DEFAULT_ENVIRONMENT_PATH) \
        --destination ./$(params.OS_VERSION)/$(params.OS_VERSION).pkr.hcl \
        --values "packerConfigMountPath=$(workspaces.source.path)/$(params.SUB_DIRECTORY)/$(params.OS_VERSION), ansiblePlayMountPath=$(workspaces.source.path)/$(params.SUB_DIRECTORY)/$(params.OS_VERSION), ansibleOsProvioning=$(params.ANSIBLE_PROVISIONING), vmTemplateName=$(params.VM_TEMPLATE_NAME)"

        echo "OUTPUT RENDERED VMTEMPLATE"
        cat ./$(params.OS_VERSION)/$(params.OS_VERSION).pkr.hcl
        ls -lta ./$(params.OS_VERSION)

    - name: render-kickstart-config
      script: |-
        #!/usr/bin/env sh
        set -eu

        echo "RENDER KICKSTART CONFIG"
        machineShop render \
        --source local \
        --output file \
        --template ./$(params.BOOT_CONFIG_PATH) \
        --destination ./$(params.OS_VERSION)/user-data \
        --defaults ./$(params.DEFAULT_ENVIRONMENT_PATH)

        echo "CREATE (EMPTY) META-DATA FILE"
        touch ./$(params.OS_VERSION)/meta-data

        echo "OUTPUT KICKSTART CONFIG"
        cat ./$(params.OS_VERSION)/user-data

    - name: render-ansible-playbook
      script: |-
        #!/usr/bin/env sh
        set -eu

        echo "RENDER PLAYBOOK"
        machineShop render \
        --source local \
        --output file \
        --brackets square \
        --template ./packer/ansible/$(params.ANSIBLE_PROVISIONING).yaml \
        --defaults ./$(params.DEFAULT_ENVIRONMENT_PATH) \
        --destination ./$(params.OS_VERSION)/$(params.ANSIBLE_PROVISIONING).yaml

        cat ./$(params.OS_VERSION)/$(params.ANSIBLE_PROVISIONING).yaml

    - name: init-build-packer
      script: |-
        #!/usr/bin/env sh
        set -eu

        echo "INIT PACKER CONFIG"
        packer init ./$(params.OS_VERSION)/$(params.OS_VERSION).pkr.hcl

        echo "BUILD VMTEMPLATE w/ PACKER"
        packer build -force \
        -var "username=$(machineShop get --path $(params.vaultPathCloudUser) | tail -n +8)" \
        -var "password=$(machineShop get --path $(params.vaultPathCloudPassword) | tail -n +8)" \
        ./$(params.OS_VERSION)/$(params.OS_VERSION).pkr.hcl