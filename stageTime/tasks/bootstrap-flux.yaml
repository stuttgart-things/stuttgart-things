---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: bootstrap-flux
  labels:
    app.kubernetes.io/version: "0.3"
  annotations:
    tekton.dev/categories: "gitOps"
    tekton.dev/displayName: "bootstrap a cluster w/ flux cli"
    tekton.dev/pipelines.minVersion: "0.50.0"
    tekton.dev/platforms: "linux/amd64"
    tekton.dev/tags: "gitops, cli, flux"
spec:
  description: bootstrap a cluster w/ flux cli
  workspaces:
    - name: source
      description: holds the working data
      optional: false
  params:
    - name: GITHUB_REPOSITORY
      description: github token as base64 string
      type: string
      default: ""
    - name: GITHUB_REPOSITORY_OWNER
      description: kubeconfig as base64 string
      type: string
      default: ""
    - name: GITHUB_FLUX_BOOTSTRAP_PATH
      description: kubeconfig as base64 string
      type: string
      default: ""
    - name: WORKING_IMAGE
      description: the image on which ansible will run
      type: string
      default: fluxcd/flux-cli:v2.1.2
    - name: KUBECTL_IMAGE
      description: the image on which kubectl will run
      type: string
      default: bitnami/kubectl:1.26.9
    - name: MACHINESHOP_IMAGE
      description: the image on which machineShop will run
      type: string
      default: eu.gcr.io/stuttgart-things/machineshop:0.1.48-1
    - name: SECRET_PATHS
      description: vault secret paths
      type: array
      default: []
    - name: ADDITONAL_MANIFESTS
      description: additional manifest files to apply to cluster
      type: array
      default: []
    - name: vault-secret-key-addr
      description: vaul addr key in the secret
      type: string
      default: "VAULT_ADDR"
    - name: vault-secret-key-approleId
      description: approle id key in the secret
      type: string
      default: "VAULT_ROLE_ID"
    - name: vault-secret-key-approleSecret
      description: approle secret key in the secret
      type: string
      default: "VAULT_SECRET_ID"
    - name: vault-secret-key-namespace
      description: namespace key in the secret
      type: string
      default: "VAULT_NAMESPACE"
    - name: vaultSecretName
      description: name of the vault secret
      type: string
      default: vault
    - name: FLUX_NAMESPACE
      description: name of the flux namespace
      type: string
      default: flux-system
  stepTemplate:
    workingDir: $(workspaces.source.path)
    securityContext:
      privileged: false
      runAsNonRoot: true
      runAsUser: 65532
  sidecars:
    - name: get-secrets
      image: "$(params.MACHINESHOP_IMAGE)"
      workingDir: $(workspaces.source.path)
      env:
        - name: VAULT_ADDR
          valueFrom:
            secretKeyRef:
              key: $(params.vault-secret-key-addr)
              name: $(params.vaultSecretName)
        - name: VAULT_NAMESPACE
          valueFrom:
            secretKeyRef:
              key: $(params.vault-secret-key-namespace)
              name: $(params.vaultSecretName)
        - name: VAULT_ROLE_ID
          valueFrom:
            secretKeyRef:
              key: $(params.vault-secret-key-approleId)
              name: $(params.vaultSecretName)
        - name: VAULT_SECRET_ID
          valueFrom:
            secretKeyRef:
              key: $(params.vault-secret-key-approleSecret)
              name: $(params.vaultSecretName)
      args:
        - $(params.SECRET_PATHS[*])
      script: |
        #!/usr/bin/env bash
        set -eu

        ALL_SECRETS=""
        for SECRET_DEFINITON in "$@"
        do
          echo GETTING VAULT SECRET ${SECRET_DEFINITON} W/ machineShop CLI
          VAULT_PATH=$(awk -F+- '{print $1}' <<< ${SECRET_DEFINITON})
          B64_DECODE=$(awk -F+- '{print $2}' <<< ${SECRET_DEFINITON})
          DESTINATION=$(awk -F+- '{print $3}' <<< ${SECRET_DEFINITON})

          machineShop get --path ${VAULT_PATH} --output file --destination ${DESTINATION} --b64 "${B64_DECODE}"
          cat ${DESTINATION}
        done

        pwd
        ls -lta
  steps:
    - name: prepare-cluster
      image: "$(params.KUBECTL_IMAGE)"
      args:
        - $(params.ADDITONAL_MANIFESTS[*])
      script: |-
        #!/usr/bin/env sh
        set -eu

        pwd
        ls -lta

        echo EXPORT KUBECONFIG
        export KUBECONFIG=KUBECONFIG

        echo TEST CLUSTER CONNECTION
        kubectl get nodes

        echo CREATE FLUX NAMESPACE $(params.FLUX_NAMESPACE)
        kubectl create ns $(params.FLUX_NAMESPACE) --dry-run=client -o yaml | kubectl apply -f -

        for MANIFEST_FILE in "$@"
        do
          kubectl apply -f ${MANIFEST_FILE} -n $(params.FLUX_NAMESPACE)
        done

    - name: bootstrap-flux
      image: "$(params.WORKING_IMAGE)"
      script: |-
        #!/usr/bin/env sh
        set -eu

        echo EXPORT KUBECONFIG + GITHUB_TOKEN
        export KUBECONFIG=KUBECONFIG
        export GITHUB_TOKEN=$(cat GITHUB_TOKEN)

        echo BOOTSTRAP FLUX
        flux bootstrap github \
        --owner=$(params.GITHUB_REPOSITORY_OWNER) \
        --repository=$(params.GITHUB_REPOSITORY) \
        --path=$(params.GITHUB_FLUX_BOOTSTRAP_PATH) \
        --namespace $(params.FLUX_NAMESPACE)

        echo RECONCILE FLUX-SYSTEM
        flux reconcile source git flux-system

        echo FLUX CHECK
        flux check