---
apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  labels:
    crossplane.io/xrd: xvsphererke2clusters.resources.stuttgart-things.com
  name: vsphere-rke2-cluster
spec:
  compositeTypeRef:
    apiVersion: resources.stuttgart-things.com/v1alpha1
    kind: XVsphereRke2Cluster
  mode: Pipeline
  pipeline:
    - step: vsphere-vm-ansible
      functionRef:
        name: function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        environment: null
        kind: Resources
        patchSets: []
        resources:
          - name: vsphere-vm-ansible
            base:
              apiVersion: resources.stuttgart-things.com/v1alpha1
              kind: XVsphereVmAnsible
            patches:
              - fromFieldPath: metadata.name
                toFieldPath: metadata.name
                type: FromCompositeFieldPath
              - fromFieldPath: metadata.namespace
                toFieldPath: metadata.namespace
              - fromFieldPath: spec.vm.count
                toFieldPath: spec.vm.count
                type: FromCompositeFieldPath
              - fromFieldPath: spec.vm.name
                toFieldPath: spec.vm.name
                type: FromCompositeFieldPath
              - fromFieldPath: spec.vm.cpu
                toFieldPath: spec.vm.cpu
                type: FromCompositeFieldPath
              - fromFieldPath: spec.vm.ram
                toFieldPath: spec.vm.ram
                type: FromCompositeFieldPath
              - fromFieldPath: spec.vm.disk
                toFieldPath: spec.vm.disk
                type: FromCompositeFieldPath
              - fromFieldPath: spec.vm.firmware
                toFieldPath: spec.vm.firmware
                type: FromCompositeFieldPath
              - fromFieldPath: spec.vm.folderPath
                toFieldPath: spec.vm.folderPath
                type: FromCompositeFieldPath
              - fromFieldPath: spec.vm.datacenter
                toFieldPath: spec.vm.datacenter
                type: FromCompositeFieldPath
              - fromFieldPath: spec.vm.datastore
                toFieldPath: spec.vm.datastore
                type: FromCompositeFieldPath
              - fromFieldPath: spec.vm.resourcePool
                toFieldPath: spec.vm.resourcePool
                type: FromCompositeFieldPath
              - fromFieldPath: spec.vm.network
                toFieldPath: spec.vm.network
                type: FromCompositeFieldPath
              - fromFieldPath: spec.vm.template
                toFieldPath: spec.vm.template
                type: FromCompositeFieldPath
              - fromFieldPath: spec.vm.bootstrap
                toFieldPath: spec.vm.bootstrap
                type: FromCompositeFieldPath
              - fromFieldPath: spec.vm.annotation
                toFieldPath: spec.vm.annotation
                type: FromCompositeFieldPath
              - fromFieldPath: spec.vm.unverifiedSsl
                toFieldPath: spec.vm.unverifiedSsl
                type: FromCompositeFieldPath
              - fromFieldPath: spec.connectionSecret.name
                toFieldPath: spec.connectionSecret.name
                type: FromCompositeFieldPath
              - fromFieldPath: spec.connectionSecret.namespace
                toFieldPath: spec.connectionSecret.namespace
                type: FromCompositeFieldPath
              - fromFieldPath: spec.tfvars.secretName
                toFieldPath: spec.tfvars.secretName
                type: FromCompositeFieldPath
              - fromFieldPath: spec.tfvars.secretNamespace
                toFieldPath: spec.tfvars.secretNamespace
                type: FromCompositeFieldPath
              - fromFieldPath: spec.tfvars.secretKey
                toFieldPath: spec.tfvars.secretKey
                type: FromCompositeFieldPath
              - fromFieldPath: spec.providerRef.name
                toFieldPath: spec.providerRef.name
                type: FromCompositeFieldPath
              - fromFieldPath: status.share.ips
                policy:
                  fromFieldPath: Required
                toFieldPath: status.share.ips
                type: ToCompositeFieldPath
              - fromFieldPath: status.share.ip
                policy:
                  fromFieldPath: Required
                toFieldPath: status.share.ip
                type: ToCompositeFieldPath
              - fromFieldPath: spec.ansible.pipelineRunName
                toFieldPath: spec.ansible.pipelineRunName
                type: FromCompositeFieldPath
              - fromFieldPath: spec.ansible.pipelineNamespace
                toFieldPath: spec.ansible.pipelineNamespace
                type: FromCompositeFieldPath
              - fromFieldPath: spec.ansible.workingImage
                toFieldPath:  spec.ansible.workingImage
                type: FromCompositeFieldPath
              - fromFieldPath: spec.ansible.vaultSecretName
                toFieldPath: spec.ansible.vaultSecretName
                type: FromCompositeFieldPath
              - fromFieldPath: spec.ansible.gitRepoUrl
                toFieldPath: spec.ansible.gitRepoUrl
                type: FromCompositeFieldPath
              - fromFieldPath: spec.ansible.gitRevision
                toFieldPath:  spec.ansible.gitRevision
                type: FromCompositeFieldPath
              - fromFieldPath: spec.ansible.ansibleVarsFile
                toFieldPath: spec.ansible.ansibleVarsFile
                type: FromCompositeFieldPath
              - fromFieldPath: spec.ansible.roles
                toFieldPath: spec.ansible.roles
                type: FromCompositeFieldPath
              - fromFieldPath: spec.ansible.collections
                toFieldPath: spec.ansible.collections
                type: FromCompositeFieldPath
              - fromFieldPath: spec.ansible.playbooks
                toFieldPath: spec.ansible.playbooks
                type: FromCompositeFieldPath
              - fromFieldPath: spec.ansible.providerRef.name
                toFieldPath: spec.ansible.providerRef.name
                type: FromCompositeFieldPath
    - step: create-cluster-inventory
      functionRef:
        name: function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        environment: null
        kind: Resources
        patchSets: []
        resources:
          - name: example-inline-2
            base:
              apiVersion: tf.upbound.io/v1beta1
              kind: Workspace
              metadata:
                name: example-inline-2
                annotations:
                  crossplane.io/external-name: inline-wks-2
              spec:
                forProvider:
                  source: Inline
                  vars:
                    - key: ipAddrs
                      value: pat

                  module: |
                    provider "random" {}

                    locals {
                      ip_addresses = split("-", var.ipAddrs)
                    }

                    resource "random_shuffle" "shuffled_ips" {
                      input        = local.ip_addresses
                      result_count = length(local.ip_addresses) # Shuffle all IPs
                    }

                    output "ips" {
                      value = var.ipAddrs
                    }

                    output "ansible_inventory" {
                      value = <<EOT
                    [initial_master_node]
                    ${random_shuffle.shuffled_ips.result[0]}

                    [additional_master_nodes]
                    %{ for ip in slice(random_shuffle.shuffled_ips.result, 1, length(local.ip_addresses)) ~}
                    ${ip}
                    %{ endfor ~}
                    EOT
                    }

                    variable "ipAddrs" {
                      description = "Ip addresses"
                      type        = string
                    }
                writeConnectionSecretToRef:
                  namespace: default
                  name: terraform-workspace-example-inline-2
            patches:
              - fromFieldPath: status.share.ips
                toFieldPath: spec.forProvider.vars[0].value
                policy:
                  fromFieldPath: Required
