apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  creationTimestamp: "2024-10-20T08:04:36Z"
  labels:
    crossplane.io/xrd: xminio.resources.stuttgart-things.com
  name: minio
spec:
  compositeTypeRef:
    apiVersion: resources.stuttgart-things.com/v1alpha1
    kind: XMinio
  mode: Pipeline
  pipeline:
    - step: deploy-minio
      functionRef:
        name: function-go-templating
      input:
        apiVersion: gotemplating.fn.crossplane.io/v1beta1
        kind: GoTemplate
        source: Inline
        # connectionDetails:
        #   - fromConnectionSecretKey: minio-password
        inline:
          template: |
            apiVersion: helm.crossplane.io/v1beta1
            kind: Release
            metadata:
              annotations:
                gotemplating.fn.crossplane.io/composition-resource-name: minio
                gotemplating.fn.crossplane.io/ready: "True"
                crossplane.io/external-name: minio
              name: minio
            spec:
              providerConfigRef:
                name: {{ .observed.composite.resource.spec.clusterName }}
              connectionDetails:
                - apiVersion: v1
                  kind: Secret
                  name: minio
                  namespace: minio
                  fieldPath: data.root-password
                  toConnectionSecretKey: minio-password
              forProvider:
                chart:
                  name: minio
                  repository: https://charts.bitnami.com/bitnami
                  version: 14.8.0
                insecureSkipTLSVerify: false
                namespace: minio
                skipCRDs: false
                skipCreateNamespace: false
                values:
                  persistence:
                    enabled: true
                    storageClass: nfs-csi
            ---
            apiVersion: kubernetes.crossplane.io/v1alpha2
            kind: Object
            metadata:
              name: foo
              annotations:
                gotemplating.fn.crossplane.io/composition-resource-name: cm
                gotemplating.fn.crossplane.io/ready: "True"
            spec:
              references:
              # Use dependsOn to declare dependency on other object for this object
              - dependsOn:
                  apiVersion: v1
                  kind: ConfigMap
                  name: bar
                  namespace: default
              forProvider:
                manifest:
                  apiVersion: v1
                  kind: ConfigMap
                  metadata:
                    namespace: default
                  data:
                    sample-key: sample-value
              providerConfigRef:
                name: {{ .observed.composite.resource.spec.clusterName }}
            ---
            apiVersion: kubernetes.crossplane.io/v1alpha2
            kind: Object
            metadata:
              name: bar
              annotations:
                gotemplating.fn.crossplane.io/composition-resource-name: bar
                gotemplating.fn.crossplane.io/ready: "True"
            spec:
              forProvider:
                manifest:
                  apiVersion: v1
                  kind: ConfigMap
                  metadata:
                    namespace: default
                  data:
                    sample-key: sample-value
              providerConfigRef:
                name: {{ .observed.composite.resource.spec.clusterName }}


    - step: patch-and-transform
      functionRef:
        name: function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        environment: null
        kind: Resources
        patchSets: []
        resources:
          - name: bla5
            base:
              apiVersion: kubernetes.crossplane.io/v1alpha2
              kind: Object
              metadata:
                name: bla100
              spec:
                forProvider:
                  manifest:
                    apiVersion: v1
                    kind: ConfigMap
                    metadata:
                      namespace: default
                providerConfigRef:
                  name: fluxdev-2
            readinessChecks:
              - type: MatchString
                fieldPath: "spec.forProvider.manifest.data.my-key"
                matchString: "*" # Match any string
            patches:
              - type: ToCompositeFieldPath
                fromFieldPath: spec.forProvider.manifest.data.my-key
                policy:
                  fromFieldPath: Required
                toFieldPath: status.share.kind
        #         - apiVersion: v1
        #           kind: Service
        #           name: argocd-server
        #           namespace: argocd
        #           fieldPath: status.loadBalancer.ingress[0].ip
        #           toConnectionSecretKey: argocd-ip
        # connectionDetails:
        #   - fromConnectionSecretKey: argocd-ip
        #   - fromConnectionSecretKey: argocd-password
  #   - step: create-ingress-cert
  #     functionRef:
  #       name: function-patch-and-transform
  #     input:
  #       apiVersion: pt.fn.crossplane.io/v1beta1
  #       environment: null
  #       kind: Resources
  #       patchSets: []
  #       resources:
  #         - base:
  #             apiVersion: resources.stuttgart-things.com/v1alpha1
  #             kind: XIngressCertificate
  #           name: vault-ingresscert

  #     - base:
  #         apiVersion: resources.stuttgart-things.com/v1alpha1
  #         kind: XIngressCertificate
  #       name: minio-ingresscert-api
  #       patches:
  #       - fromFieldPath: spec.deploymentNamespace
  #         toFieldPath: spec.namespace
  #         type: FromCompositeFieldPath
  #       - fromFieldPath: spec.clusterName
  #         toFieldPath: spec.clusterName
  #         type: FromCompositeFieldPath
  #       - fromFieldPath: spec.cert.issuerName
  #         toFieldPath: spec.issuerName
  #         type: FromCompositeFieldPath
  #       - fromFieldPath: spec.cert.issuerKind
  #         toFieldPath: spec.issuerKind
  #         type: FromCompositeFieldPath
  #       - fromFieldPath: spec.cert.certSecretApi
  #         toFieldPath: spec.certSecretName
  #         type: FromCompositeFieldPath
  #       - fromFieldPath: spec.hostNameApi
  #         toFieldPath: spec.hostName
  #         type: FromCompositeFieldPath
  #       - fromFieldPath: spec.domainName
  #         toFieldPath: spec.domainName
  #         type: FromCompositeFieldPath
  #     - base:
  #         apiVersion: resources.stuttgart-things.com/v1alpha1
  #         kind: XIngressCertificate
  #       name: minio-ingresscert-console
  #       patches:
  #       - fromFieldPath: spec.deploymentNamespace
  #         toFieldPath: spec.namespace
  #         type: FromCompositeFieldPath
  #       - fromFieldPath: spec.clusterName
  #         toFieldPath: spec.clusterName
  #         type: FromCompositeFieldPath
  #       - fromFieldPath: spec.cert.issuerName
  #         toFieldPath: spec.issuerName
  #         type: FromCompositeFieldPath
  #       - fromFieldPath: spec.cert.issuerKind
  #         toFieldPath: spec.issuerKind
  #         type: FromCompositeFieldPath
  #       - fromFieldPath: spec.cert.certSecretConsole
  #         toFieldPath: spec.certSecretName
  #         type: FromCompositeFieldPath
  #       - fromFieldPath: spec.hostNameConsole
  #         toFieldPath: spec.hostName
  #         type: FromCompositeFieldPath
  #       - fromFieldPath: spec.domainName
  #         toFieldPath: spec.domainName
  #         type: FromCompositeFieldPath
  #   step: patch-and-transform
  # writeConnectionSecretsToNamespace: crossplane-system
