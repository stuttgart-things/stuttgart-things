---
apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: vsphere-vm-ansible
  labels:
    crossplane.io/xrd: xvspherevmansibles.resources.stuttgart-things.com
spec:
  compositeTypeRef:
    apiVersion: resources.stuttgart-things.com/v1alpha1
    kind: XVsphereVMAnsible
  resources:
    - name: vsphere-vm-ansible
      base:
        kind: Workspace
        apiVersion: tf.upbound.io/v1beta1
        metadata:
          annotations:
            crossplane.io/external-name: vsphere-vm-ansible
        spec:
          providerConfigRef:
            name: terraform-default
          writeConnectionSecretToRef:
            name: vsphere-vm-ansible-test
            namespace: crossplane-system
          forProvider:
            source: Inline
            module: |
              module "vsphere-vm-ansible" {
                source                 = "github.com/stuttgart-things/vsphere-vm?ref=v1.7.5-2.7.0"
                vm_count               = var.vm_count
                vsphere_vm_name        = var.vsphere_vm_name
                vm_memory              = var.vm_memory
                vm_disk_size           = var.vm_disk_size
                vm_num_cpus            = var.vm_num_cpus
                firmware               = var.firmware
                vsphere_vm_folder_path = var.vsphere_vm_folder_path
                vsphere_datacenter     = var.vsphere_datacenter
                vsphere_datastore      = var.vsphere_datastore
                vsphere_resource_pool  = var.vsphere_resource_pool
                vsphere_network        = var.vsphere_network
                vsphere_vm_template    = var.vsphere_vm_template
                bootstrap              = var.bootstrap
                annotation             = var.annotation
                vm_ssh_user            = var.vm_ssh_user
                vm_ssh_password        = var.vm_ssh_password
                vsphere_user           = var.vsphere_user
                vsphere_password       = var.vsphere_password
                vsphere_server         = var.vsphere_server
              }

              variable "vm_count" { type= number }
              variable "vsphere_vm_name" { type= string }
              variable "vm_memory" { type= number }
              variable "vm_disk_size" { type= string }
              variable "vm_num_cpus" { type= number }
              variable "firmware" { type= string }
              variable "vsphere_vm_folder_path" { type= string }
              variable "vsphere_datacenter" { type= string }
              variable "vsphere_datastore" { type= string }
              variable "vsphere_resource_pool" { type= string }
              variable "vsphere_network" { type= string }
              variable "vsphere_vm_template" { type= string }
              variable "bootstrap" { type= list(string) }
              variable "annotation" { type= string }
              variable "unverified_ssl" { type= bool }
              variable "vm_ssh_user" { type= string }
              variable "vm_ssh_password" { type= string }
              variable "vsphere_user" { type= string }
              variable "vsphere_password" { type= string }
              variable "vsphere_server" { type= string }

              output "ip" {
                value = [module.vsphere-vm-ansible.ip]
              }

              locals {
                timestamp = "${timestamp()}"
                timestamp_sanitized = "${replace("${local.timestamp}", "/[-| |T|Z|:]/", "")}"
              }

              output "timestamp" {
                value = "${var.vsphere_vm_name}-${local.timestamp_sanitized}"
              }
            vars:
              - key: vm_count
                type: integer
                value: "1"
              - key: vsphere_vm_name
                type: string
              - key: vm_memory
                type: integer
                value: "4096"
              - key: vm_disk_size
                type: integer
                value: "64"
              - key: vm_num_cpus
                type: integer
                value: "4"
              - key: firmware
                type: string
                value: bios
              - key: vsphere_vm_folder_path
                type: string
              - key: vsphere_datacenter
                type: string
              - key: vsphere_datastore
                type: string
              - key: vsphere_resource_pool
                type: string
              - key: vsphere_network
                type: string
              - key: vsphere_vm_template
                type: string
              - key: bootstrap
                type: string
                value: '["echo STUTTGART-THINGS"]'
              - key: annotation
                type: string
                value: VSPHERE-VM BUILD w/ CROSSPLANE FOR STUTTGART-THINGS
              - key: unverified_ssl
                type: string
                value: "true"
            varFiles:
              - source: SecretKey
                secretKeyRef:
                  namespace: default
                  name: vsphere-tfvars
                  key: terraform.tfvars
      patches:
        - type: ToCompositeFieldPath
          fromFieldPath: status.atProvider.outputs.ip
          toFieldPath: status.share.vmIP
          policy:
            fromFieldPath: Required
        - type: ToCompositeFieldPath
          fromFieldPath: status.atProvider.outputs.timestamp
          toFieldPath: status.share.timestampApply
          policy:
            fromFieldPath: Required
        - type: FromCompositeFieldPath
          fromFieldPath: spec.vm.count
          toFieldPath: spec.forProvider.vars[0].value
        - type: FromCompositeFieldPath
          fromFieldPath: spec.vm.name
          toFieldPath: spec.forProvider.vars[1].value
        - type: FromCompositeFieldPath
          fromFieldPath: spec.vm.ram
          toFieldPath: spec.forProvider.vars[2].value
        - type: FromCompositeFieldPath
          fromFieldPath: spec.vm.disk
          toFieldPath: spec.forProvider.vars[3].value
        - type: FromCompositeFieldPath
          fromFieldPath: spec.vm.cpu
          toFieldPath: spec.forProvider.vars[4].value
        - type: FromCompositeFieldPath
          fromFieldPath: spec.vm.firmware
          toFieldPath: spec.forProvider.vars[5].value
        - type: FromCompositeFieldPath
          fromFieldPath: spec.vm.folderPath
          toFieldPath: spec.forProvider.vars[6].value
        - type: FromCompositeFieldPath
          fromFieldPath: spec.vm.datacenter
          toFieldPath: spec.forProvider.vars[7].value
        - type: FromCompositeFieldPath
          fromFieldPath: spec.vm.datastore
          toFieldPath: spec.forProvider.vars[8].value
        - type: FromCompositeFieldPath
          fromFieldPath: spec.vm.resourcePool
          toFieldPath: spec.forProvider.vars[9].value
        - type: FromCompositeFieldPath
          fromFieldPath: spec.vm.network
          toFieldPath: spec.forProvider.vars[10].value
        - type: FromCompositeFieldPath
          fromFieldPath: spec.vm.template
          toFieldPath: spec.forProvider.vars[11].value
        - type: FromCompositeFieldPath
          fromFieldPath: spec.vm.bootstrap
          toFieldPath: spec.forProvider.vars[12].value
        - type: FromCompositeFieldPath
          fromFieldPath: spec.vm.annotation
          toFieldPath: spec.forProvider.vars[13].value
        - type: FromCompositeFieldPath
          fromFieldPath: spec.vm.unverifiedSsl
          toFieldPath: spec.forProvider.vars[14].value
        - type: FromCompositeFieldPath
          fromFieldPath: spec.tfvars.secretName
          toFieldPath: spec.forProvider.varFiles[0].secretKeyRef.name
        - type: FromCompositeFieldPath
          fromFieldPath: spec.tfvars.secretNamespace
          toFieldPath: spec.forProvider.varFiles[0].secretKeyRef.namespace
        - type: FromCompositeFieldPath
          fromFieldPath: spec.tfvars.secretKey
          toFieldPath: spec.forProvider.varFiles[0].secretKeyRef.key
        - type: FromCompositeFieldPath
          fromFieldPath: spec.connectionSecret.name
          toFieldPath: spec.writeConnectionSecretToRef.name
        - type: FromCompositeFieldPath
          fromFieldPath: spec.connectionSecret.namespace
          toFieldPath: spec.writeConnectionSecretToRef.namespace
        - type: FromCompositeFieldPath
          fromFieldPath: spec.providerRef.name
          toFieldPath: spec.providerConfigRef.name
    - name: tekton-ansiblerun
      base:
        apiVersion: kubernetes.crossplane.io/v1alpha2
        kind: Object
        metadata:
          name: sample-namespace
        spec:
          forProvider:
            manifest:
              apiVersion: resources.stuttgart-things.com/v1alpha1
              kind: AnsibleRun
              metadata:
                annotations:
                  inventory: "host.domain"
                namespace: crossplane-system
              spec:
                pipelineRunName: baseos-host
                inventory:
                  - "all+[\"losangeles16.tiab.labda.sva.de\"]"
                playbooks:
                  - "ansible/playbooks/prepare-env.yaml"
                  - "ansible/playbooks/base-os.yaml"
                ansibleVarsFile:
                  - "manage_filesystem+-true"
                  - "update_packages+-true"
                  - "install_requirements+-true"
                  - "install_motd+-true"
                  - "username+-sthings"
                  - "lvm_home_sizing+-'15%'"
                  - "lvm_root_sizing+-'35%'"
                  - "lvm_var_sizing+-'50%'"
                  - "send_to_msteams+-true"
                  - "reboot_all+-false"
                gitRepoUrl: https://github.com/stuttgart-things/stuttgart-things.git
                gitRevision: main
                providerRef:
                  name: kubernetes-incluster
                vaultSecretName: vault
                pipelineNamespace: tektoncd
                workingImage: eu.gcr.io/stuttgart-things/sthings-ansible:9.3.0
                roles:
                  - "https://github.com/stuttgart-things/install-requirements.git"
                  - "https://github.com/stuttgart-things/manage-filesystem.git"
                  - "https://github.com/stuttgart-things/install-configure-vault.git"
          providerConfigRef:
            name: kubernetes-incluster
      patches:
        - fromFieldPath: status.share.timestampApply
          toFieldPath: spec.forProvider.manifest.spec.pipelineRunName
          policy:
            fromFieldPath: Required
          transforms:
            - type: string
              string:
                type: Format
                fmt: 'ansible-%s'
        - type: FromCompositeFieldPath
          fromFieldPath: spec.ansible.k8sProviderRef
          toFieldPath: spec.forProvider.manifest.spec.providerRef.name
        - type: FromCompositeFieldPath
          fromFieldPath: spec.ansible.workingImage
          toFieldPath: spec.forProvider.manifest.spec.workingImage
        - type: FromCompositeFieldPath
          fromFieldPath: spec.ansible.gitRepoUrl
          toFieldPath: spec.forProvider.manifest.spec.gitRepoUrl
        - type: FromCompositeFieldPath
          fromFieldPath: spec.ansible.gitRevision
          toFieldPath: spec.forProvider.manifest.spec.gitRevision
        - type: FromCompositeFieldPath
          fromFieldPath: spec.ansible.vaultSecretName
          toFieldPath: spec.forProvider.manifest.spec.vaultSecretName
        - type: FromCompositeFieldPath
          fromFieldPath: spec.ansible.roles
          toFieldPath: spec.forProvider.manifest.spec.roles
        - type: FromCompositeFieldPath
          fromFieldPath: spec.ansible.playbooks
          toFieldPath: spec.forProvider.manifest.spec.playbooks
        - type: FromCompositeFieldPath
          fromFieldPath: spec.ansible.ansibleVarsFile
          toFieldPath: spec.forProvider.manifest.spec.ansibleVarsFile


        # - type: CombineToComposite
        #   combine:
        #     variables:
        #       - fromFieldPath: metadata.name
        #       - fromFieldPath: status.share.timestampApply
        #     strategy: string
        #     string:
        #       fmt: "%s-%s"
        #   toFieldPath: spec.forProvider.manifest.spec.pipelineRunName
        #   policy:
        #     fromFieldPath: Required

        - fromFieldPath: status.share.vmIP
          toFieldPath: spec.forProvider.manifest.metadata.annotations.inventory
          policy:
            fromFieldPath: Required
          transforms:
            - type: string
              string:
                type: Join
                join:
                  separator: ","
            - type: string
              string:
                type: TrimPrefix
                trim: "["
            - type: string
              string:
                type: TrimSuffix
                trim: "]"