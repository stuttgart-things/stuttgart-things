- hosts: all
  gather_facts: true
  become: true

  vars:
    aks: 
    config: YXBpVmVyc2lvbjogdjEKY2x1c3RlcnM6Ci0gY2x1c3RlcjoKICAgIGNlcnRpZmljYXRlLWF1dGhvcml0eS1kYXRhOiBMUzB0TFMxQ1JVZEpUaUJEUlZKVVNVWkpRMEZVUlMwdExTMHRDazFKU1VNdmFrTkRRV1ZoWjBGM1NVSkJaMGxDUVVSQlRrSm5hM0ZvYTJsSE9YY3dRa0ZSYzBaQlJFRldUVkpOZDBWUldVUldVVkZFUlhkd2NtUlhTbXdLWTIwMWJHUkhWbnBOUWpSWVJGUkplazFFYTNsT1ZFVjVUV3BCZUU1R2IxaEVWRTE2VFVScmVVMXFSWGxOYWtGNFRrWnZkMFpVUlZSTlFrVkhRVEZWUlFwQmVFMUxZVE5XYVZwWVNuVmFXRkpzWTNwRFEwRlRTWGRFVVZsS1MyOWFTV2gyWTA1QlVVVkNRbEZCUkdkblJWQkJSRU5EUVZGdlEyZG5SVUpCVG5RMENsWTFRbEZSVW5GVE9YWTRMekZOT0ZWU2FVbFBhRU5wWVc5T1VHVnllbVpQVUV4UVVHeDZTRmxYUjA1V1kwZFlOVFJ4YmxOYWJ5OWxVRlJ4YUVZMlEySUtWWE5WVWpNM1EyVklSVmd2VFVGeVpVTnhibFJSU21wUVZ6TnFRMmhITUROMFprSkRTVkpFUTJwclVHMUNhblkxWVZBeWNHWkNlSEJvU25OVk9VcFJOZ3BWWWxsd1puUnhRMUY1Vkc1QlN6aElSM2RoV25aaVUwNU5NbnBPUldSelExRXhiRWRrU1dKV1lYWk9lSGhxU2t3d0x6Uk9jeko2TkRNM05FcFFiMDh3Q21sV0szQjBlRlJoT0hrdllXUmxSa0YzZFU5MlRXZGlTWHBsWVM4M1QzWm9SbE5aZEdaWVZYTkdabXg0UlRCU2MzRXdhalp6Y1Vod1NuaDJTMDg1WlNzS1lqbDRjRzVrYzFGeWFXVlhkRTFuTkVGYVJtcHdia3BDVDFnMVZWbzFaVTVzYjBOUFZWSTRiR3d2TkRCS2VuZE1SR1ZGTkVWMmFFTXlUMGhvZEd4SFFnb3hkazVLUmxkWlZuUkdSMncyWTBoTVRHODRRMEYzUlVGQllVNWFUVVpqZDBSbldVUldVakJRUVZGSUwwSkJVVVJCWjB0clRVRTRSMEV4VldSRmQwVkNDaTkzVVVaTlFVMUNRV1k0ZDBoUldVUldVakJQUWtKWlJVWktXV1ExZWxJeE9WRXhiV05oTDBkRFJXVjNSVkl3V1RaTVowWk5RbFZIUVRGVlpFVlJVVThLVFVGNVEwTnRkREZaYlZaNVltMVdNRnBZVFhkRVVWbEtTMjlhU1doMlkwNUJVVVZNUWxGQlJHZG5SVUpCUkZneUx6VmhNakJsV2xSYU9YSnpLME5EY1FwbGQxTkpRMmRwWkRkYWEzbG5WMnh6VEhnM1YzbEdWbXQyT0dJclNrMWljRkpoUW01TFZsb3JZVzlqVlVScFZEZHlabkIyUTFJdk1XVXhhV1puYkRKVkNtRnpObFY0VUZvemFWcHNPSGx3TUdOVU5rNXFXVWswYTFaYVVEZFhjMGs1VVV4ak9IRm9WblJMSzB4T1lWTXdTakV3VFdWWVJHSldabVJFT0ZocUwya0tiakIzYWs1UmNYSk1Vblp5VFhRNFluRmxSMUZpYlhOS2RIZFpiVU15TTAxeU5WVjBjRXN4T1c1TU1HTnlNRWxMTW5VellpdEdUVkJFU2xSelkyeGlZZ3BvTWpWdllsTmhUR3B2UXprelkySXZRbWsxUkhkNEx6TXdlRXhQZDFsd1RtYzRkemxTYm1VemRXWlZLMU5pT0ZWc09IQlRVbU5DVmpZdlNUbG1jSEZRQ2xBNGJYbDZOWE54WldWVEwxbGpUREJxWm1Kc1VHbEpOV2hVT0hoMlJXTk1jV3BXS3pSTVFqaE5ibFpxT1dOa1JsQlpTbXMwU0dKTmNTOTFUbnBxU25vS0sydFZQUW90TFMwdExVVk9SQ0JEUlZKVVNVWkpRMEZVUlMwdExTMHRDZz09CiAgICBzZXJ2ZXI6IGh0dHBzOi8vMTI3LjAuMC4xOjM0NTY3CiAgbmFtZToga2luZC13a3MyCmNvbnRleHRzOgotIGNvbnRleHQ6CiAgICBjbHVzdGVyOiBraW5kLXdrczIKICAgIHVzZXI6IGtpbmQtd2tzMgogIG5hbWU6IGtpbmQtd2tzMgpjdXJyZW50LWNvbnRleHQ6IGtpbmQtd2tzMgpraW5kOiBDb25maWcKcHJlZmVyZW5jZXM6IHt9CnVzZXJzOgotIG5hbWU6IGtpbmQtd2tzMgogIHVzZXI6CiAgICBjbGllbnQtY2VydGlmaWNhdGUtZGF0YTogTFMwdExTMUNSVWRKVGlCRFJWSlVTVVpKUTBGVVJTMHRMUzB0Q2sxSlNVUkpWRU5EUVdkdFowRjNTVUpCWjBsSlNUbFJURkpEVWtKTlluTjNSRkZaU2t0dldrbG9kbU5PUVZGRlRFSlJRWGRHVkVWVVRVSkZSMEV4VlVVS1FYaE5TMkV6Vm1sYVdFcDFXbGhTYkdONlFXVkdkekI1VFhwQk5VMXFWWGhOYWtsM1RWUlNZVVozTUhsT1JFRTFUV3BSZUUxcVNYZE5WR1JoVFVSUmVBcEdla0ZXUW1kT1ZrSkJiMVJFYms0MVl6TlNiR0pVY0hSWldFNHdXbGhLZWsxU2EzZEdkMWxFVmxGUlJFVjRRbkprVjBwc1kyMDFiR1JIVm5wTVYwWnJDbUpYYkhWTlNVbENTV3BCVGtKbmEzRm9hMmxIT1hjd1FrRlJSVVpCUVU5RFFWRTRRVTFKU1VKRFowdERRVkZGUVhBM2NsVTJZVzF5VlN0MlkxSlpOMVFLUXpCRmRXRnhla0YyVnpOa1ZTczRORUo1VEZCUFYxQktlVWxFVERSdWVpOXFkMnhrY2tRNWJGbFZLMVJ5VG5SMU0xaEhOWEJhYjNFNUswMWxhMGhrVUFwWU9GVlFiMjVuT0c1SFVtRlVZa0pNZFVsNU5rSlVkRlkzUlhvM01sZHlWMW8zY0hONlpFTnBiWHB1VTJOYVdqTjVVMjFFT0ZOTVFsWkxWRkk1YldVd0NrWnlkMmRSWjFwNlNGUmtUMHhTYmpOUVkzaHNlalZVYms5S2VXNUNXRlJ2YWpGMGIwNVFjWE5QVDBzNGF6RnBjMXBhU1ZCWmNEVkpkRzgwVFhCNmNURUtXRVJaTkdsdFNYaEtkbVZwTVdrd1RXeG9VMHAxVmtkbEswNUxNQzlrU0cxUlNFaGxaekZtVGpOVU1qUktaMjR4YVVGSlVqWjZhelZDU1RkRFRGbGxOUW95ZEdKWlJHVlNkV2Q0WTB4aVNHNXNOalpMY0RCRGNVZHNhRXRoT0ZWTVdHWk9RMkV2UW1GU1FrZHpVRlp0ZFVaNFNXNU5WVGwwZVdWRWVVWTFlWEJHQ201NlFXOTJkMGxFUVZGQlFtOHhXWGRXUkVGUFFtZE9Wa2hST0VKQlpqaEZRa0ZOUTBKaFFYZEZkMWxFVmxJd2JFSkJkM2REWjFsSlMzZFpRa0pSVlVnS1FYZEpkMFJCV1VSV1VqQlVRVkZJTDBKQlNYZEJSRUZtUW1kT1ZraFRUVVZIUkVGWFowSlRWMGhsWXpCa1psVk9XbTVIZG5obmFFaHpRa1ZrUjA5cE5BcENWRUZPUW1kcmNXaHJhVWM1ZHpCQ1FWRnpSa0ZCVDBOQlVVVkJaR1ZJVW5oMFJHMXNjSE5hYlM5ak0wNHJjMHAyYVdKeFJXRm5MMVpXYlZsa1NuWndDa0k1Y0UxbVQzcEhOakJFYmtkSU1tRTNZbmRYVFdoaFFXbFZVR3BWU201dVZtWklOWEYwTldZclowTTFPRVpIVGpWblUwVTRhRUZsUkZSbVNVbGthWFFLT0RoV1V6ZFZZbUp6ZUd4b1pFVXZaV1kwUW1sak9YVk9Wamg0TVU5eGFHSnNUbVZFV1c5bGJsSk9UbFJHZDFveU1TOU9MMDl2UzBwUlJVazBUazVUUWdwSFJVRkJjRkEyTWpab1RqQldZMGRZUTBvcmJXMXdiR1p3TjBFMllqTmFieTlUTHpCeGQyUnRiRzVuUWxCRmJsUTBkVWREYnpWYVZGUXhURE5JYkhObENscDVUMmxYZVZWb1RXNVBkWEJOUkZSUGEzcFFUVkkzZUc1V2FrVXhWbFJLTjNSWE16bFdVV0ZyU0RkTllWcEJhMGRyYjA1WWIyTXJVRFEyWjJaRlNsUUtlSGhMZG05eWFXUk1hVmRMUzNoeWVrMXZSbVpVTDJ4WFVrSlJXV2Q0VWpNeWRtZFdPREUxTTNaSldraFdjV2RSUzFFOVBRb3RMUzB0TFVWT1JDQkRSVkpVU1VaSlEwRlVSUzB0TFMwdENnPT0KICAgIGNsaWVudC1rZXktZGF0YTogTFMwdExTMUNSVWRKVGlCU1UwRWdVRkpKVmtGVVJTQkxSVmt0TFMwdExRcE5TVWxGYjNkSlFrRkJTME5CVVVWQmNEZHlWVFpoYlhKVkszWmpVbGszVkVNd1JYVmhjWHBCZGxjelpGVXJPRFJDZVV4UVQxZFFTbmxKUkV3MGJub3ZDbXAzYkdSeVJEbHNXVlVyVkhKT2RIVXpXRWMxY0ZwdmNUa3JUV1ZyU0dSUVdEaFZVRzl1WnpodVIxSmhWR0pDVEhWSmVUWkNWSFJXTjBWNk56SlhjbGNLV2pkd2MzcGtRMmx0ZW01VFkxcGFNM2xUYlVRNFUweENWa3RVVWpsdFpUQkdjbmRuVVdkYWVraFVaRTlNVW00elVHTjRiSG8xVkc1UFNubHVRbGhVYndwcU1YUnZUbEJ4YzA5UFN6aHJNV2x6V2xwSlVGbHdOVWwwYnpSTmNIcHhNVmhFV1RScGJVbDRTblpsYVRGcE1FMXNhRk5LZFZaSFpTdE9TekF2WkVodENsRklTR1ZuTVdaT00xUXlORXBuYmpGcFFVbFNObnByTlVKSk4wTk1XV1UxTW5SaVdVUmxVblZuZUdOTVlraHViRFkyUzNBd1EzRkhiR2hMWVRoVlRGZ0taazVEWVM5Q1lWSkNSM05RVm0xMVJuaEpiazFWT1hSNVpVUjVSalY1Y0VadWVrRnZkbmRKUkVGUlFVSkJiMGxDUVZGRFUxQnZObWcxV0ZGcGVXZFlXQXBEUkRkMlJYcG5ZbVoxUkZkNVpFbDFLM1ZrU2tsWmNUVkxWVFp2Tm1SUVltVk5Na056T1VobEt6WXJlbVI1VkRGc1MxcEliMjQ0VWpaNVowZ3hlRzE0Q2sxTVdXVmtUREkzUmxWalZIWldVVmhhVGpOQk0yTk1ZME5QTlZWRFNrOVhPRVphWkZCMWFtSlZNSGhWVGpob1RHcGllVWgzZUVSME1GUlljMVJaUm1NS1lsQk9VekV4YW5jclNuRnhTVXQ1YWtkdU5pdG1WbVJRT1ZNM1pEVm9PSFJKUXpSalRXdENUbWhaUkRkNFJHRk1Xa1p2YW5obGVWbHpiVlJTTldKa2Fnb3pZVU5wUWtKRmFFRlJja1ozZVROeWFVcENVbnB6U2tGSlJWbENkVFozY25kd1ZYTkxXRUpRY1cxV2FqWkNkalJ2TVhOTFpUQXhlVzVTYkZvMVduTm5DbUZxTmxCRFpWQkpXbHBzUkdGWFZFVkVVSE5pWjI1T2JVdzBXR3R3WmtneFNrTm1XakJQVVdGV1ZEQTRibkJFZURNek1FVnllWFZuYkRJMVdHMVhjWFVLTUdrdlJHdEpWRUpCYjBkQ1FVMXZNMnhWUTJOVk9VcHhOV3BqT0hBNGRHbEVORUp6U1VKeE1tSklUMmcyY3paVFIwOVFWMkV3Vmk5aGJXZFdkRFJPWXdwU2VraDRVR3hSTW5obVkweHVOVXgxUjJaVU5VVldZM1l3VDJGS1pIVXZkakJ1ZEdJMGFUQlJNREJrT1RkWlZEVnpRMmQwY0ZGemJXSnBTVWRHVXpFNENrMWplbGxtU2xGM1QwdGtURXROVW5RelVUWlNka0prYkhVMk9VUmhNMkpyU1V4SlJsZG5PRGRUZERJemEya3dSVWh2ZVhwbE4xQjRRVzlIUWtGT1VsZ0tSMlJ6Ums5a016bDJSMlJLTW5kRmRETnFWWGh1WVRNelNuQlRhRU50VEVWYU9YVkxjV1pwVWtGelJIUnFMelkxVVhkT2EyeHVaR3A2VVhacGQzcHlOUXBJYVVSMlRuazRNMWxWYWtWaldXSnNOVWRJYTBsT2VYQTVNWFZQVVVOclVGaHJSR2RzUkVwd2FEZHdUelIyVVdzNFVWTnVRakVyTDNoeGNVZHFPVUZSQ2paa1owVktMelZxYzI5WVduUm9jeXR0VnpSMU1VUk9WblkzUW5vMVYxTnlTRTU0U0ZSYVpYWkJiMGRCVFVsTVNrVlhhblpUZFd4UFRsTTBaRFowUzNBS1pWWjBNMFZFUmpOTWRqVklRVU4wV1ZGVlFYUkdPREJNVkRsRU1UVXhUalV5VDJSUk1XODRWbE56UkVaR1ZrSTVaR0ZHVTI5aFNHTTRXa1pGYzFOaVRncFVZalp5VFdKb05XeDNjMFZ6WjFCalYwdGpjV3QwVVhwVk5Fa3lSRzFXWlRWUkswTlJNa3RYUmt4M1drZGFXbkJyTldOMWEydGFZbXRvTkZGYU9FMTFDbVpOV2k4MWJYVkpLMFYxVkdrMk1GUlVlRzB6YzFkRlEyZFpRVVZ6UkU5cE9GWmxXWFpwZURGMk1Ya3hhSFpUT0VObE9XOVZkV1Z2UzI1SldGRnBlbXNLTTFGbWNIUkNTSGxtYjNoTFdFZzNUbE5YUWtaSVNTOHZZbWs1VUZWM1lrZFNWMGhpYVdkYU9ESTVSMEl6TDNWT05tTkxUQzlNYVRSaVkybGxNek5pS3dwVFltTmlPR1JoVFZZMFpVNVRiU3RFTkdObk5EVm1kMVk0WTJsc1IwZHhRbGRZTkd0clRVUXhWVnA0UTNRM2QyUm5ZVEIyZDFCdWRHaElSMUpMYmtsR0NuSjRSbGxuZDB0Q1owaGlXWGt6ZG1kaE9VbHJlWGxvV1ZkTlZrSnRTREZYTTFSNWExTjBWVkZyUWsweGJUaDZkelJLT0V0elExb3ZTR3hSVTJKbldFNEtSbEJEVVZWaFVGTkhSR0pvUm1sNFMwNXhUelZZTTI1WWNEbDRTVTk2VWtRelRsWnFZMDVIV25sRFlWSmtZbkJUY21kWmQxTnVZMDVQTm14R05qZGpad281U1dSUlIxZFhRbk0yVEZSb05uSXpibmRLVVhGV2FrWlVha05HWWtZMVkzSnpVekJ0VWtkdlJrRjJXRVZtTjFocVp6SmxDaTB0TFMwdFJVNUVJRkpUUVNCUVVrbFdRVlJGSUV0RldTMHRMUzB0Q2c9PQo=

  roles:
    - role: create-os-user
      vars:
        admin_group: sudo
        users:
          - username: kai
            name: kai
            groups: ['{{ admin_group }}','k8s-admins', 'docker']
            uid: 1005
            home: /home/kai
            password: "$6$mysecretsalt$zImSIBbGkk4jT87rIQgYxeSOqi7OVWb9FRQGyJ8pX5eoiVeQDeAOc3owMZxmcRVfak74ooljfF/XrLGZVdBOH1" #w0rkShop2
            profile: |
              alias ll='ls -ahl'
          - username: bernd
            name: bernd
            groups: ['{{ admin_group }}','k8s-admins', 'docker']
            uid: 1006
            home: /home/bernd
            password: "$6$mysecretsalt$zImSIBbGkk4jT87rIQgYxeSOqi7OVWb9FRQGyJ8pX5eoiVeQDeAOc3owMZxmcRVfak74ooljfF/XrLGZVdBOH1"
            profile: |
              alias ll='ls -ahl'
          - username: ivan
            name: ivan
            groups: ['{{ admin_group }}','k8s-admins', 'docker']
            uid: 1007
            home: /home/ivan
            password: "$6$mysecretsalt$zImSIBbGkk4jT87rIQgYxeSOqi7OVWb9FRQGyJ8pX5eoiVeQDeAOc3owMZxmcRVfak74ooljfF/XrLGZVdBOH1"
            profile: |
              alias ll='ls -ahl'
          - username: thomask
            name: thomask
            groups: ['{{ admin_group }}','k8s-admins', 'docker']
            uid: 1008
            home: /home/thomask
            password: "$6$mysecretsalt$zImSIBbGkk4jT87rIQgYxeSOqi7OVWb9FRQGyJ8pX5eoiVeQDeAOc3owMZxmcRVfak74ooljfF/XrLGZVdBOH1"
            profile: |
              alias ll='ls -ahl'
          - username: thomasd
            name: thomasd
            groups: ['{{ admin_group }}','k8s-admins', 'docker']
            uid: 1009
            home: /home/thomasd
            password: "$6$mysecretsalt$zImSIBbGkk4jT87rIQgYxeSOqi7OVWb9FRQGyJ8pX5eoiVeQDeAOc3owMZxmcRVfak74ooljfF/XrLGZVdBOH1"
            profile: |
              alias ll='ls -ahl'
          - username: paul
            name: paul
            groups: ['{{ admin_group }}','k8s-admins', 'docker']
            uid: 1010
            home: /home/paul
            password: "$6$mysecretsalt$zImSIBbGkk4jT87rIQgYxeSOqi7OVWb9FRQGyJ8pX5eoiVeQDeAOc3owMZxmcRVfak74ooljfF/XrLGZVdBOH1"
            profile: |
              alias ll='ls -ahl'
          - username: lukas
            name: lukas
            groups: ['{{ admin_group }}','k8s-admins', 'docker']
            uid: 1011
            home: /home/lukas
            password: "$6$mysecretsalt$zImSIBbGkk4jT87rIQgYxeSOqi7OVWb9FRQGyJ8pX5eoiVeQDeAOc3owMZxmcRVfak74ooljfF/XrLGZVdBOH1"
            profile: |
              alias ll='ls -ahl'
          - username: sebastian
            name: sebastian
            groups: ['{{ admin_group }}','k8s-admins', 'docker']
            uid: 1012
            home: /home/sebastian
            password: "$6$mysecretsalt$zImSIBbGkk4jT87rIQgYxeSOqi7OVWb9FRQGyJ8pX5eoiVeQDeAOc3owMZxmcRVfak74ooljfF/XrLGZVdBOH1"
            profile: |
              alias ll='ls -ahl'
          - username: fabian
            name: fabian
            groups: ['{{ admin_group }}','k8s-admins', 'docker']
            uid: 1013
            home: /home/fabian
            password: "$6$mysecretsalt$zImSIBbGkk4jT87rIQgYxeSOqi7OVWb9FRQGyJ8pX5eoiVeQDeAOc3owMZxmcRVfak74ooljfF/XrLGZVdBOH1"
            profile: |
              alias ll='ls -ahl'
          - username: steffen
            name: steffen
            groups: ['{{ admin_group }}','k8s-admins', 'docker']
            uid: 1014
            home: /home/steffen
            password: "$6$mysecretsalt$zImSIBbGkk4jT87rIQgYxeSOqi7OVWb9FRQGyJ8pX5eoiVeQDeAOc3owMZxmcRVfak74ooljfF/XrLGZVdBOH1"
            profile: |
              alias ll='ls -ahl'
          - username: gregor
            name: gregor
            groups: ['{{ admin_group }}','k8s-admins', 'docker']
            uid: 1015
            home: /home/gregor
            password: "$6$mysecretsalt$zImSIBbGkk4jT87rIQgYxeSOqi7OVWb9FRQGyJ8pX5eoiVeQDeAOc3owMZxmcRVfak74ooljfF/XrLGZVdBOH1"
            profile: |
              alias ll='ls -ahl'
          - username: tobias
            name: tobias
            groups: ['{{ admin_group }}','k8s-admins', 'docker']
            uid: 1016
            home: /home/tobias
            password: "$6$mysecretsalt$zImSIBbGkk4jT87rIQgYxeSOqi7OVWb9FRQGyJ8pX5eoiVeQDeAOc3owMZxmcRVfak74ooljfF/XrLGZVdBOH1"
            profile: |
              alias ll='ls -ahl'
          - username: stephan
            name: stephan
            groups: ['{{ admin_group }}','k8s-admins', 'docker']
            uid: 1017
            home: /home/stephan
            password: "$6$mysecretsalt$zImSIBbGkk4jT87rIQgYxeSOqi7OVWb9FRQGyJ8pX5eoiVeQDeAOc3owMZxmcRVfak74ooljfF/XrLGZVdBOH1"
            profile: |
              alias ll='ls -ahl'
          - username: tanja
            name: tanja
            groups: ['{{ admin_group }}','k8s-admins', 'docker']
            uid: 1018
            home: /home/tanja
            password: "$6$mysecretsalt$zImSIBbGkk4jT87rIQgYxeSOqi7OVWb9FRQGyJ8pX5eoiVeQDeAOc3owMZxmcRVfak74ooljfF/XrLGZVdBOH1"
            profile: |
              alias ll='ls -ahl'
          - username: marc
            name: marc
            groups: ['{{ admin_group }}','k8s-admins', 'docker']
            uid: 1019
            home: /home/marc
            password: "$6$mysecretsalt$zImSIBbGkk4jT87rIQgYxeSOqi7OVWb9FRQGyJ8pX5eoiVeQDeAOc3owMZxmcRVfak74ooljfF/XrLGZVdBOH1"
            profile: |
              alias ll='ls -ahl'
          - username: patrick
            name: patrick
            groups: ['{{ admin_group }}','k8s-admins', 'docker']
            uid: 1020
            home: /home/patrick
            password: "$6$mysecretsalt$zImSIBbGkk4jT87rIQgYxeSOqi7OVWb9FRQGyJ8pX5eoiVeQDeAOc3owMZxmcRVfak74ooljfF/XrLGZVdBOH1"
            profile: |
              alias ll='ls -ahl'
          - username: hilmi
            name: hilmi
            groups: ['{{ admin_group }}','k8s-admins', 'docker']
            uid: 1021
            home: /home/hilmi
            password: "$6$mysecretsalt$zImSIBbGkk4jT87rIQgYxeSOqi7OVWb9FRQGyJ8pX5eoiVeQDeAOc3owMZxmcRVfak74ooljfF/XrLGZVdBOH1"
            profile: |
              alias ll='ls -ahl'


        groups_to_create:
          - name: k8s-admins
            gid: 11000

  pre_tasks:
    - name: Create .kube directory
      ansible.builtin.file:
        path: "{{ item.home }}/.kube"
        state: directory
      loop: "{{ users }}"

    - name: Copy kubeconfig aks
      ansible.builtin.copy:
        content: "{{ aks|b64decode }}"
        dest: "{{ item.home }}/.kube/aks"
      loop: "{{ users }}"

    - name: Copy kubeconfig kind
      ansible.builtin.copy:
        content: "{{ config|b64decode }}"
        dest: "{{ item.home }}/.kube/config"
      loop: "{{ users }}"