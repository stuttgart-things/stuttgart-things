---
name: awx_vm
#version: 0.0.94
namespace: sthings
playbooks:
  - name: render_upload_template
    play: |
      ---
      - hosts: "{{ target_host | default('localhost') }}"
        vars:
          path: "../../awx_main/playbooks/vars/"

        collections:
          - sthings.awx_main

        vars_files:
          - "{{ path | default('.') }}/awx-local-env.yaml"
          - "{{ path | default('.') }}/organization-sthings.yaml"
          - "{{ path | default('.') }}/scm-creds-sthings.yaml"
          - "{{ path | default('.') }}/projects-sthings.yaml"
          - "{{ path | default('.') }}/machine-creds-sthings.yaml"
          - "{{ path | default('.') }}/dynamic-inventory-vsphere.yaml"
          - "{{ path | default('.') }}/inventory-source.yaml"
          - "{{ path | default('.') }}/ee-sthings.yaml"
          - "./custom-credentials.yaml"
          - "./custom-credential-type.yaml"
          - "./{{ cloud }}.yaml"
          - "./{{ lab }}.yaml"
          - "./vm-defaults.yaml"
          - "./s3-instances.yaml"
          - "./job-render-upload-template.yaml"

        tasks:
          - ansible.builtin.import_tasks: ../../awx_main/playbooks/check_connection.yaml
          - ansible.builtin.import_tasks: ../../awx_main/playbooks/creation_tasks.yaml

  - name: get_execute_terraform
    play: |
      ---
      - hosts: "{{ target_host | default('localhost') }}"
        vars:
          path: "../../awx_main/playbooks/vars/"

        collections:
          - sthings.awx_main

        vars_files:
          - "{{ path | default('.') }}/awx-local-env.yaml"
          - "{{ path | default('.') }}/organization-sthings.yaml"
          - "{{ path | default('.') }}/scm-creds-sthings.yaml"
          - "{{ path | default('.') }}/projects-sthings.yaml"
          - "{{ path | default('.') }}/machine-creds-sthings.yaml"
          - "{{ path | default('.') }}/dynamic-inventory-vsphere.yaml"
          - "{{ path | default('.') }}/inventory-source.yaml"
          - "{{ path | default('.') }}/ee-sthings.yaml"
          - "./custom-credentials.yaml"
          - "./custom-credential-type.yaml"
          - "./terraform-vars.yaml"
          - "./tf-vars-{{ cloud }}.yaml"
          - "./s3-instances.yaml"
          - "./job-get-execute-terraform.yaml"

        tasks:
          - ansible.builtin.import_tasks: ../../awx_main/playbooks/check_connection.yaml
          - ansible.builtin.import_tasks: ../../awx_main/playbooks/creation_tasks.yaml

  - name: create_vm_workflow
    play: |
      ---
      - hosts: "{{ target_host | default('localhost') }}"
        vars:
          path: "../../awx_main/playbooks/vars/"

        collections:
          - sthings.awx_main

        vars_files:
          - "{{ path | default('.') }}/awx-local-env.yaml"
          - "{{ path | default('.') }}/organization-sthings.yaml"
          - "{{ path | default('.') }}/scm-creds-sthings.yaml"
          - "{{ path | default('.') }}/projects-sthings.yaml"
          - "{{ path | default('.') }}/machine-creds-sthings.yaml"
          - "{{ path | default('.') }}/dynamic-inventory-vsphere.yaml"
          - "{{ path | default('.') }}/inventory-source.yaml"
          - "{{ path | default('.') }}/ee-sthings.yaml"
          - "./custom-credentials.yaml"
          - "./custom-credential-type.yaml"
          - "./job-create-vm-workflow.yaml"

        tasks:
          - ansible.builtin.import_tasks: ../../awx_main/playbooks/check_connection.yaml
          - ansible.builtin.import_tasks: ../../awx_main/playbooks/creation_tasks.yaml

templates:
  - name: vm-vsphere
    file: |
      module {{ vmName }} {
        source                 = "{{ tf_module_source }}"
        vm_count               = {{ vmCount }}
        vsphere_vm_name        = "{{ vmName }}"
        vm_memory              = {{ vm_memory }}
        vsphere_vm_template    = "{{ vm_template }}"
        vm_disk_size           = "{{ vm_disk }}"
        vm_num_cpus            = {{ vm_cpu }}
        firmware               = "{{ vmFirmware }}"
        vsphere_vm_folder_path = "{{ rootFolderpath }}/{{ folderpath }}"
        vsphere_datacenter     = "{{ datacenter }}"
        vsphere_datastore      = "{{ vm_datastores }}"
        vsphere_resource_pool  = "{{ resourcePool }}"
        vsphere_network        = "{{ vm_network }}"
        bootstrap              = ["echo STUTTGART-THINGS"]
        annotation             = "VSPHERE-VM {{ vmName }} {{ vmTemplate }} BUILD w/ TERRAFORM FOR STUTTGART-THINGS"
        vsphere_server         = var.vsphere_server
        vsphere_user           = var.vsphere_user
        vsphere_password       = var.vsphere_password
        vm_ssh_user            = var.vm_ssh_user
        vm_ssh_password        = var.vm_ssh_password
      }

      variable "vsphere_server" {
        default     = false
        type        = string
        description = "name of vsphere vm server"
      }

      variable "vm_ssh_user" {
        default     = false
        type        = string
        description = "username of ssh user for vm"
      }

      variable "vm_ssh_password" {
        default     = false
        type        = string
        description = "password of ssh user"
        }

      variable "vsphere_user" {
        default     = false
        type        = string
        description = "password of vsphere user"
      }

      variable "vsphere_password" {
        default     = false
        type        = string
        description = "password of vsphere user"
      }

      output "ip" {
        value = [module.{{ vmName }}.ip]
      }

  - name: vm-proxmox
    file: |
      module "{{ vmName }}" {
        source                  = "{{ tf_module_source }}"
        vm_count                = {{ vmCount }}
        vm_name                 = "{{ vmName }}"
        vm_memory               = "{{ vm_memory }}"
        vm_num_cpus             = "{{ vm_cpu }}"
        vm_disk_size            = "{{ vm_disk }}G"
        vm_template             = "{{ vm_template }}"
        pve_cluster_node        = "{{ datacenter }}"
        pve_datastore           = "{{ vm_datastores }}"
        pve_folder_path         = "{{ folderpath }}"
        pve_network             = "{{ vm_network }}"
        vm_notes                = "VSPHERE-VM {{ vmName }} {{ vm_template }} BUILD w/ TERRAFORM FOR STUTTGART-THINGS"
        pve_api_url             = var.pve_api_url
        pve_api_user            = var.pve_api_user
        pve_api_password        = var.pve_api_password
        vm_ssh_user             = var.vm_ssh_user
        vm_ssh_password         = var.vm_ssh_password
      }

      output "ip" {
        value     = module.{{ vmName }}.ip
      }

      variable "pve_api_url" {
        type        = string
        description = "url of proxmox api. Example: https://server-example.sva.de:8006/api2/json"
      }

      variable "pve_api_user" {
        type        = string
        description = "username of proxmox api user"
      }

      variable "pve_api_password" {
        type        = string
        description = "password of proxmox api user"
      }

      variable "vm_ssh_user" {
        type        = string
        description = "desired username for ssh connection"
      }

      variable "vm_ssh_password" {
        type        = string
        description = "desired password for ssh connection"
      }

  - name: backend
    file: |
      terraform {
        backend "s3" {

          endpoints = {
            s3 = "{{ backend_host_url }}"
          }

          skip_requesting_account_id = true
          skip_s3_checksum = true
          key = "{{ vmName }}.tfstate"
          bucket = "{{ bucket_name }}"
          region = "main"
          skip_credentials_validation = true
          skip_metadata_api_check = true
          skip_region_validation = true
          force_path_style = true
          workspace_key_prefix = "{{ vmName }}"
        }
      }

vars:
  - name: job-get-execute-terraform
    file: |
      ---
      job_templates:
        stuttgartThings:
          name: get-execute-terraform
          organization: stuttgart-things
          inventory: dynamic-inventory-vsphere
          project: stuttgart-things
          playbook: plays/get-execute-terraform.yaml
          credentials:
            - sthings-ssh
            - labul-vault
          executionenv: sthings-ee
          state: present
          ask_verbosity_on_launch: true
          extra_vars: "{{ extra_vars | default(omit) }}"
          survey_enabled: true
          survey_spec: "{{ lookup('file', 'vars/survey-get-execute-terraform.yaml') }}"

  - name: survey-get-execute-terraform
    file: |
      {
          "name": "",
          "description": "",
          "spec": [
            {
              "question_name": "Execute against which host?",
              "question_description": "Enter host name",
              "required": true,
              "type": "text",
              "variable": "target_host",
              "min": null,
              "max": null,
              "default": ""
            },
            {
              "question_name": "Enter VM name?",
              "question_description": "Enter vm name",
              "required": true,
              "type": "text",
              "variable": "vmName",
              "min": null,
              "max": null,
              "default": ""
            },
            {
              "question_name": "Do you want to install Terraform?",
              "question_description": "Choose true or false",
              "required": true,
              "type": "text",
              "variable": "install_terraform",
              "min": null,
              "max": null,
              "default": "true"
            },
            {
              "question_name": "What is the bucket name in s3?",
              "question_description": "Enter bucket name to PUT templates",
              "required": true,
              "type": "text",
              "variable": "bucket_name",
              "min": null,
              "max": null,
              "default": "andre-vm-config"
            },
            {
              "question_name": "What is the s3 endpoint name?",
              "question_description": "Enter s3 endpoint name",
              "required": true,
              "type": "multiplechoice",
              "choices": ["labul-automation", "andre-dev"],
              "variable": "s3",
              "min": null,
              "max": null,
              "default": "andre-dev"
            },
            {
              "question_name": "Do you want to apply or destroy VM?",
              "question_description": "Enter state of terrform VM",
              "required": true,
              "type": "multiplechoice",
              "variable": "state",
              "choices": ["present", "absent"],
              "min": null,
              "max": null,
              "default": "present"
            },
            {
              "question_name": "What lab?",
              "question_description": "Enter labul or labda",
              "required": true,
              "type": "multiplechoice",
              "variable": "lab",
              "choices": ["labul", "labda"],
              "min": null,
              "max": null,
              "default": "labul"
            },
            {
              "question_name": "What cloud for the VM?",
              "question_description": "Choose cloud",
              "required": true,
              "type": "multiplechoice",
              "variable": "cloud",
              "choices": ["vsphere", "proxmox"],
              "min": null,
              "max": null,
              "default": "vsphere"
            }
          ]
        }

  - name: job-render-upload-template
    file: |
      ---
      job_templates:
        stuttgartThings:
          name: render-upload-template
          organization: stuttgart-things
          inventory: dynamic-inventory-vsphere
          project: stuttgart-things
          playbook: plays/create-template.yaml
          credentials:
            - sthings-ssh
            - labul-vault
          executionenv: sthings-ee
          state: present
          ask_verbosity_on_launch: true
          extra_vars: "{{ extra_vars | default(omit) }}"
          survey_enabled: true
          survey_spec: "{{ lookup('file', 'vars/survey-render-upload-template.yaml') }}"

  - name: survey-render-upload-template
    file: |
      {
          "name": "",
          "description": "",
          "spec": [
            {
              "question_name": "Execute against which host?",
              "question_description": "Enter host name",
              "required": true,
              "type": "text",
              "variable": "target_host",
              "min": null,
              "max": null,
              "default": "localhost"
            },
            {
              "question_name": "What is the VM name?",
              "question_description": "Enter VM name",
              "required": true,
              "type": "text",
              "variable": "vmName",
              "min": null,
              "max": null,
              "default": ""
            },
            {
              "question_name": "What is the VM size?",
              "question_description": "Enter VM sizes s,m,l or xl",
              "required": true,
              "type": "multiplechoice",
              "variable": "vmSize",
              "choices": ["S", "M", "L", "XL"],
              "min": null,
              "max": null,
              "default": "S"
            },
            {
              "question_name": "How many VMs?",
              "question_description": "Enter VM count",
              "required": true,
              "type": "multiplechoice",
              "variable": "vmCount",
              "choices": ["1", "2", "3", "4", "5"],
              "min": null,
              "max": null,
              "default": "1"
            },
            {
              "question_name": "Which VM template do you want to use? (see description)",
              "question_description": "Choose os",
              "required": true,
              "type": "multiplechoice",
              "variable": "vmTemplate",
              "choices": ["ubuntu22", "ubuntu24", "rocky9"],
              "min": null,
              "max": null,
              "default": ""
            },
            {
              "question_name": "What is the s3 endpoint name?",
              "question_description": "Enter s3 endpoint name",
              "required": true,
              "type": "multiplechoice",
              "choices": ["labul-automation", "andre-dev"],
              "variable": "s3",
              "min": null,
              "max": null,
              "default": "andre-dev"
            },
            {
              "question_name": "What is the bucket name in s3?",
              "question_description": "Enter bucket name to PUT templates",
              "required": true,
              "type": "text",
              "variable": "bucket_name",
              "min": null,
              "max": null,
              "default": ""
            },
            {
              "question_name": "What is the platform subfolderpath?",
              "question_description": "Enter subfolderpath of vsphere (testing)/ proxmox (stuttgart-things)",
              "required": true,
              "type": "text",
              "variable": "subfolderpath",
              "min": null,
              "max": null,
              "default": "testing"
            },
            {
              "question_name": "What lab?",
              "question_description": "Choose labul or labda",
              "required": true,
              "type": "multiplechoice",
              "variable": "lab",
              "choices": ["labul", "labda"],
              "min": null,
              "max": null,
              "default": "labul"
            },
            {
              "question_name": "What cloud for the VM?",
              "question_description": "Choose cloud",
              "required": true,
              "type": "multiplechoice",
              "variable": "cloud",
              "choices": ["vsphere", "proxmox"],
              "min": null,
              "max": null,
              "default": "vsphere"
            }
          ]
        }

  - name: job-create-vm-workflow
    file: |
      ---
      workflow_job_templates:
        stuttgartThings:
          name: create-vm-workflow
          organization: stuttgart-things
          inventory: dynamic-inventory-vsphere
          credentials:
            - sthings-ssh
            - labul-vault
          executionenv: sthings-ee
          state: present
          survey_enabled: true
          survey_spec: "{{ lookup('file', 'vars/survey-create-vm-workflow.yaml') }}"
          extra_data_render: "{'target_host': 'localhost', 'bucket_name': 'andre-vm-config'}"
          extra_data_execute: "{'target_host': 'andre-dev-u22', 'bucket_name': 'andre-vm-config'}"

  - name: survey-create-vm-workflow
    file: |
      {
          "name": "",
          "description": "",
          "spec": [
            {
              "question_name": "Enter VM name",
              "question_description": "Enter VM name",
              "required": false,
              "type": "text",
              "variable": "vmName",
              "min": null,
              "max": null,
              "default": ""
            },
            {
              "question_name": "Select VM size",
              "question_description": "Enter VM sizes S,M,L or XL",
              "required": false,
              "type": "multiplechoice",
              "variable": "vmSize",
              "choices": ["S", "M", "L", "XL"],
              "min": null,
              "max": null,
              "default": "S"
            },
            {
              "question_name": "Select VM count",
              "question_description": "Choose VM count",
              "required": false,
              "type": "multiplechoice",
              "variable": "vmCount",
              "choices": ["1", "2", "3", "4", "5"],
              "min": null,
              "max": null,
              "default": "1"
            },
            {
              "question_name": "Select VM template",
              "question_description": "Choose OS",
              "required": false,
              "type": "multiplechoice",
              "variable": "vmTemplate",
              "choices": ["ubuntu22", "ubuntu24", "rocky9"],
              "min": null,
              "max": null,
              "default": "ubuntu24"
            },
            {
              "question_name": "Enter folderpath",
              "question_description": "Enter subfolderpath of vsphere (testing)/ proxmox (stuttgart-things)",
              "required": false,
              "type": "text",
              "variable": "subfolderpath",
              "min": null,
              "max": null,
              "default": "testing"
            },
            {
              "question_name": "Select lab",
              "question_description": "Choose labul or labda",
              "required": false,
              "type": "multiplechoice",
              "variable": "lab",
              "choices": ["labul", "labda"],
              "min": null,
              "max": null,
              "default": "labul"
            },
            {
              "question_name": "Select cloud",
              "question_description": "Choose cloud",
              "required": false,
              "type": "multiplechoice",
              "variable": "cloud",
              "choices": ["vsphere", "proxmox"],
              "min": null,
              "max": null,
              "default": "vsphere"
            },
            {
              "question_name": "Install Terraform?",
              "question_description": "Choose true or false",
              "required": false,
              "type": "text",
              "variable": "install_terraform",
              "min": null,
              "max": null,
              "default": "true"
            },
            {
              "question_name": "Enter s3 endpoint",
              "question_description": "Enter s3 endpoint",
              "required": false,
              "type": "text",
              "variable": "s3_endpoint",
              "min": null,
              "max": null,
              "default": "https://artifacts.andre-dev.sthings-vsphere.labul.sva.de"
            },
            {
              "question_name": "Do you want to apply or destroy VM?",
              "question_description": "Enter state of terrform VM",
              "required": false,
              "type": "multiplechoice",
              "variable": "state",
              "choices": ["present", "absent"],
              "min": null,
              "max": null,
              "default": "present"
            }
          ]
        }

  - name: s3-instances
    file: |
      ---
      instances:
        labul-automation:
          url: https://artifacts.automation.sthings-vsphere.labul.sva.de:443
          username: apps/data/artifacts:accessKey
          password: apps/data/artifacts:secretKey
        andre-dev:
          url: https://artifacts.andre-dev.sthings-vsphere.labul.sva.de:443
          username: apps/data/artifacts:accessKey
          password: apps/data/artifacts:secretKey

  - name: labul
    file: |
      ---
      lab_values:
        vsphere:
          template:
            ubuntu22: "sthings-u22"
            ubuntu24: "sthings-u24"
            rocky9: "sthings-r9"
          datastore:
            - "/LabUL/datastore/UL-ESX-SAS-01"
            - "/LabUL/datastore/UL-ESX-SAS-02"
            - "/LabUL/datastore/UL-V5010-01-LUN1"
            - "/LabUL/datastore/UL-V5010-01-LUN2"
            - "/LabUL/datastore/UL-V5010-01-LUN3"
          network:
            - "/LabUL/network/MGMT-10.31.101"
            - "/LabUL/network/LAB-10.31.102"
            - "/LabUL/network/LAB-10.31.103"
            - "/LabUL/network/LAB-10.31.104"
          subfolderpath: "testing"
          bucket_name: "andre-vm-config"
        proxmox:
          template:
            ubuntu22: "ubuntu22"
            ubuntu24: "ubuntu24"
            rocky9: "rocky9"
          datastore:
            - "v3700"
            - "datastore"
          network:
            - "vmbr101"
            - "vmbr102"
            - "vmbr103"
            - "vmbr104"
          subfolderpath: "stuttgart-things"
          bucket_name: "andre-vm-config"

  - name: vm-defaults
    file: |
      ---
      vm_size:
        cpu:
          S: 2
          M: 4
          L: 6
          XL: 8
        memory:
          S: 4096
          M: 6144
          L: 8192
          XL: 12288
        disk:
          S: 32
          M: 64
          L: 96
          XL: 128

      object_name: "{{ ansible_date_time.date }}-{{ project_name }}.tf"

      vmName: "test-{{ lookup('community.general.random_string', length=5, special=false) | lower }}"
      vmCount: "1"
      vmSize: "S"
      vmTemplate: "ubuntu24"
      vmFirmware: "bios"
      rootFolderpath: "stuttgart-things"
      resourcePool: "/LabUL/host/Cluster-V6.5/Resources"
      backend_host_url: "https://artifacts.app1.sthings-vsphere.labul.sva.de"
      s3region: "main"

  - name: vsphere
    file: |
      ---
      vm_cpu: "{{ vm_size['cpu'][vmSize] }}"
      vm_memory: "{{ vm_size['memory'][vmSize] }}"
      vm_disk: "{{ vm_size['disk'][vmSize] }}"
      vm_template: "{{ lab_values[cloud]['template'][vmTemplate] }}"
      vm_datastores: "{{ lab_values[cloud]['datastore'] | random }}"
      vm_network: "{{ lab_values[cloud]['network'] | random }}"
      folderpath: "{{ lab_values[cloud]['subfolderpath'] }}"
      datacenter: "/LabUL"
      tf_module_source: "github.com/stuttgart-things/vsphere-vm?ref=v1.7.5-2.7.0-1"

  - name: proxmox
    file: |
      ---
      vm_cpu: "{{ vm_size['cpu'][vmSize] }}"
      vm_memory: "{{ vm_size['memory'][vmSize] }}"
      vm_disk: "{{ vm_size['disk'][vmSize] }}"
      vm_template: "{{ lab_values[cloud]['template'][vmTemplate] }}"
      vm_datastores: "{{ lab_values[cloud]['datastore'] | random }}"
      vm_network: "{{ lab_values[cloud]['network'] | random }}"
      folderpath: "{{ lab_values[cloud]['subfolderpath'] }}"
      tf_module_source: "github.com/stuttgart-things/proxmox-vm.git?ref=v2.9.14-1.5.5"
      datacenter: "sthings-pve1"

  - name: tf-vars-vsphere
    file: |
      ---
      tf_vars:
        vsphere_server: "{{ lookup('community.hashi_vault.hashi_vault', 'secret=cloud/data/vsphere:ip validate_certs=false auth_method=approle role_id={{ vault_approle_id }} secret_id={{ vault_approle_secret }} url={{ vault_url }}') }}"
        vsphere_user: "{{ lookup('community.hashi_vault.hashi_vault', 'secret=cloud/data/vsphere:username validate_certs=false auth_method=approle role_id={{ vault_approle_id }} secret_id={{ vault_approle_secret }} url={{ vault_url }}') }}"
        vsphere_password: "{{ lookup('community.hashi_vault.hashi_vault', 'secret=cloud/data/vsphere:password validate_certs=false auth_method=approle role_id={{ vault_approle_id }} secret_id={{ vault_approle_secret }} url={{ vault_url }}') }}"
        vm_ssh_user: "{{ lookup('community.hashi_vault.hashi_vault', 'secret=cloud/data/vsphere:vm_ssh_user validate_certs=false auth_method=approle role_id={{ vault_approle_id }} secret_id={{ vault_approle_secret }} url={{ vault_url }}') }}"
        vm_ssh_password: "{{ lookup('community.hashi_vault.hashi_vault', 'secret=cloud/data/vsphere:vm_ssh_password validate_certs=false auth_method=approle role_id={{ vault_approle_id }} secret_id={{ vault_approle_secret }} url={{ vault_url }}') }}"

  - name: tf-vars-proxmox
    file: |
      ---
      tf_vars:
        pve_api_url: "{{ lookup('community.hashi_vault.hashi_vault', 'secret=cloud/data/pve:api_url validate_certs=false auth_method=approle role_id={{ vault_approle_id }} secret_id={{ vault_approle_secret }} url={{ vault_url }}') }}"
        pve_api_user: "{{ lookup('community.hashi_vault.hashi_vault', 'secret=cloud/data/pve:api_user validate_certs=false auth_method=approle role_id={{ vault_approle_id }} secret_id={{ vault_approle_secret }} url={{ vault_url }}') }}"
        pve_api_password: "{{ lookup('community.hashi_vault.hashi_vault', 'secret=cloud/data/pve:api_password validate_certs=false auth_method=approle role_id={{ vault_approle_id }} secret_id={{ vault_approle_secret }} url={{ vault_url }}') }}"
        vm_ssh_user: "{{ lookup('community.hashi_vault.hashi_vault', 'secret=cloud/data/pve:ssh_user validate_certs=false auth_method=approle role_id={{ vault_approle_id }} secret_id={{ vault_approle_secret }} url={{ vault_url }}') }}"
        vm_ssh_password: "{{ lookup('community.hashi_vault.hashi_vault', 'secret=cloud/data/pve:ssh_password validate_certs=false auth_method=approle role_id={{ vault_approle_id }} secret_id={{ vault_approle_secret }} url={{ vault_url }}') }}"

  - name: terraform-vars
    file: |
      ---
      tf_project_path: ./terraform
      state: present
      rendered_all: tf-config-all.tf
      AWS_ACCESS_KEY_ID: "{{ lookup('community.hashi_vault.hashi_vault', 'secret=apps/data/artifacts:accessKey validate_certs=false auth_method=approle role_id={{ vault_approle_id }} secret_id={{ vault_approle_secret }} url={{ vault_url }}') }}"
      AWS_SECRET_ACCESS_KEY: "{{ lookup('community.hashi_vault.hashi_vault', 'secret=apps/data/artifacts:secretKey validate_certs=false auth_method=approle role_id={{ vault_approle_id }} secret_id={{ vault_approle_secret }} url={{ vault_url }}') }}"
      force_init: true
      init_reconfigure: true

  - name: vault-injector
    file: |
      {
          "env": {
            "VAULT_ADDR": "{{ vault_url }}",
            "VAULT_ROLE_ID": "{{ vault_approle_id }}",
            "VAULT_SECRET_ID": "{{ vault_approle_secret }}",
          },
          "extra_vars": {}
      }

  - name: vault-input
    file: |
      {
          "fields": [
            {
                "id": "vault_url",
                "type": "string",
                "label": "vault_url"
            },
            {
                "id": "vault_approle_id",
                "type": "string",
                "label": "vault_approle_id"
            },
            {
                "id": "vault_approle_secret",
                "type": "string",
                "label": "vault_approle_secret"
            }
          ],
          "required": [
            "vault_url",
          ]
      }

  - name: custom-credential-type
    file: |
      ---
      custom_credential_types:
        vault:
          name: vault-custom
          state: present
          kind: cloud
          inputs: "{{ lookup('file', 'vars/vault-input.yaml') }}"
          injectors: "{{ lookup('file', 'vars/vault-injector.yaml') }}"

  - name: custom-credentials
    file: |
      ---
      custom_credentials:
        vault_custom:
          name: labul-vault
          description: labul vault credentials
          credential_type: vault-custom
          organization: stuttgart-things
          state: present
          inputs:
            vault_url: "{{ lookup('env', 'VAULT_ADDR') }}"
            vault_approle_id: "{{ lookup('env', 'VAULT_ROLE_ID') }}"
            vault_approle_secret: "{{ lookup('env', 'VAULT_SECRET_ID') }}"
