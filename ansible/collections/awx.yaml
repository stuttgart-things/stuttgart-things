---
name: awx
version: 0.0.83
namespace: sthings
playbooks:
  - name: check_connection
    play: |
      ---
      - name: Pause play until a URL is reachable from the Ansible Controller
        ansible.builtin.uri:
          url: "{{ controller_host }}api/v2"
          method: GET
        register: _result
        until: _result.status == 200
        retries: 10
        delay: 120

  - name: creation_tasks
    play: |
      ---
      - name: Create organizations
        awx.awx.organization:
          name: "{{ item.value.name }}"
          description: "{{ item.value.description }}"
          state: "{{ item.value.state }}"
          galaxy_credentials:
            - Ansible Galaxy
          validate_certs: false
        loop: "{{ lookup('dict', organizations, wantlist=True) }}"
        when: organizations is defined

      - name: Add machine credential
        awx.awx.credential:
          name: "{{ item.value.name }}"
          description: "{{ item.value.description }}"
          organization: "{{ item.value.organization }}"
          credential_type: "{{ item.value.credential_type }}"
          state: "{{ item.value.state }}"
          inputs:
            username: "{{ item.value.username | default (omit) }}"
            password: "{{ item.value.password | default (omit) }}"
            ssh_key_data: "{{ item.value.awx_ssh_key | default (omit) }}"
            host: "{{ item.value.host | default (omit) }}"
          validate_certs: false
        loop: "{{ lookup('dict', machineCredentials, wantlist=True) }}"
        when: machineCredentials is defined

      - name: Create a valid SCM credential from a private_key file
        awx.awx.credential:
          name: "{{ item.value.name }}"
          organization: "{{ item.value.organization }}"
          state: "{{ item.value.state }}"
          credential_type: Source Control
          inputs:
            ssh_key_data: "{{ item.value.awx_ssh_key }}"
          validate_certs: false
        loop: "{{ lookup('dict', scmCredentials, wantlist=True) }}"
        when: scmCredentials is defined

      - name: Create custom credential type
        awx.awx.tower_credential_type:
          name: "{{ item.value.name }}"
          kind: "{{ item.value.kind }}"
          state: "{{ item.value.state }}"
          inputs: "{{ item.value.inputs }}"
          injectors: "{{ item.value.injectors }}"
          validate_certs: false
        loop: "{{ lookup('dict', custom_credential_types, wantlist=True) }}"
        when: custom_credential_types is defined

      - name: Create custom credential from custom credential type
        awx.awx.tower_credential:
          name: "{{ item.value.name }}"
          organization: "{{ item.value.organization }}"
          credential_type: "{{ item.value.credential_type }}"
          description: "{{ item.value.description }}"
          state: "{{ item.value.state }}"
          inputs: "{{ item.value.inputs }}"
          validate_certs: false
        loop: "{{ lookup('dict', custom_credentials, wantlist=True) }}"
        when: custom_credentials is defined

      - name: Add inventory
        awx.awx.inventory:
          name: "{{ item.value.name }}"
          description: "{{ item.value.description | default (omit) }}"
          organization: "{{ item.value.organization }}"
          state: "{{ item.value.state }}"
          validate_certs: false
        loop: "{{ lookup('dict', inventories, wantlist=True) }}"
        when: inventories is defined

      - name: Add an inventory source
        awx.awx.inventory_source:
          name: "{{ item.value.name }}"
          description: "{{ item.value.description }}"
          inventory: "{{ item.value.inventory }}"
          credential: "{{ item.value.credential }}"
          overwrite: true
          update_on_launch: true
          source: "{{ item.value.source }}"
          organization: "{{ item.value.organization }}"
          source_vars: "{{ item.value.source_vars }}"
        loop: "{{ lookup('dict', inventorySource, wantlist=True) }}"
        when: inventorySource is defined

      - name: Update a single inventory source
        awx.awx.inventory_source_update:
          name: "{{ item.value.name }}"
          inventory: "{{ item.value.inventory }}"
          organization: "{{ item.value.organization }}"
        loop: "{{ lookup('dict', inventorySource, wantlist=True) }}"
        when: inventorySource is defined

      - name: Add host
        awx.awx.host:
          name: "{{ item.value.name }}"
          description: "{{ item.value.description | default (omit) }}"
          inventory: "{{ item.value.inventory }}"
          state: "{{ item.value.state }}"
          variables: "{{ item.value.vmVariables | default (omit) }}"
          validate_certs: false
        loop: "{{ lookup('dict', hosts, wantlist=True) }}"
        when: hosts is defined

      - name: Create projects
        awx.awx.project:
          name: "{{ item.value.name }}"
          description: "{{ item.value.description }}"
          organization: "{{ item.value.organization }}"
          scm_url: "{{ item.value.scm_url }}"
          scm_type: "{{ item.value.scm_type }}"
          credential: "{{ item.value.credential }}"
          state: "{{ item.value.state }}"
          scm_update_on_launch: "{{ item.value.scm_update_on_launch | default(omit) }}"
          scm_update_cache_timeout: "{{ item.value.scm_update_cache_timeout | default(omit) }}"
          validate_certs: false
        loop: "{{ lookup('dict', projects, wantlist=True) }}"
        when: projects is defined

      - name: Add EE to the controller instance
        awx.awx.execution_environment:
          name: "{{ item.value.name }}"
          image: "{{ item.value.image }}"
          pull: "{{ item.value.pull }}"
          credential: "{{ item.value.credential }}"
          validate_certs: false
        loop: "{{ lookup('dict', execution_environment, wantlist=True) }}"
        when: execution_environment is defined

      - name: Create job templates
        awx.awx.job_template:
          name: "{{ item.value.name }}"
          job_type: "run"
          organization: "{{ item.value.organization }}"
          inventory: "{{ item.value.inventory }}"
          project: "{{ item.value.project }}"
          playbook: "{{ item.value.playbook }}"
          credentials: "{{ item.value.credentials }}"
          execution_environment: "{{ item.value.executionenv }}"
          state: "{{ item.value.state }}"
          ask_verbosity_on_launch: "{{ item.value.ask_verbosity_on_launch }}"
          validate_certs: true
          survey_enabled: "{{ item.value.survey_enabled | default(omit) }}"
          survey_spec: "{{ item.value.survey_spec | default(omit) }}"
          extra_vars: "{{ item.value.extraVars | default(omit) }}"
        loop: "{{ lookup('dict', job_templates, wantlist=True) }}"
        when: job_templates is defined

      - name: Build a schedule for every day except saturday and sunday using the rruleset plugin
        awx.awx.schedule:
          name: "{{ item.value.name }}"
          state: "{{ item.value.state }}"
          job_type: "{{ item.value.job_type }}"
          extra_data: "{{ item.value.extra_data }}"
          unified_job_template: "{{ item.value.unified_job_template }}"
          rrule: "{{ query('awx.awx.schedule_rruleset',  '{{ start_date }} {{ cron_time }}', rules=rrules, timezone='Europe/Berlin') }}"
        loop: "{{ lookup('dict', scheduler, wantlist=True) }}"
        when: scheduler is defined and target_host != 'localhost'

      - name: Update project
        awx.awx.project:
          name: "{{ item.value.name }}"
          update_project: true
        loop: "{{ lookup('dict', projects, wantlist=True) }}"
        when: projects is defined

  - name: render_upload_template
    play: |
      ---
      - hosts: "{{ target_host | default('localhost') }}"

        vars_files:
          - "{{ path | default('.') }}/awx-local-env.yaml"
          - "{{ path | default('.') }}/organization-sthings.yaml"
          - "{{ path | default('.') }}/scm-creds-sthings.yaml"
          - "{{ path | default('.') }}/projects-sthings.yaml"
          - "{{ path | default('.') }}/machine-creds-sthings.yaml"
          - "{{ path | default('.') }}/custom-credentials.yaml"
          - "{{ path | default('.') }}/custom-credential-type.yaml"
          - "{{ path | default('.') }}/dynamic-inventory-vsphere.yaml"
          - "{{ path | default('.') }}/inventory-source.yaml"
          - "{{ path | default('.') }}/ee-sthings.yaml"
          - "{{ path | default('.') }}/{{ cloud }}.yaml"
          - "{{ path | default('.') }}/{{ lab }}.yaml"
          - "{{ path | default('.') }}/vm-defaults.yaml"
          - "{{ path | default('.') }}/job-render-upload-template.yaml"

        tasks:
          - ansible.builtin.import_tasks: check_connection.yaml
          - ansible.builtin.import_tasks: creation_tasks.yaml

  - name: get_execute_terraform
    play: |
      ---
      - hosts: "{{ target_host | default('localhost') }}"
        vars_files:
          - "{{ path | default('.') }}/awx-local-env.yaml"
          - "{{ path | default('.') }}/organization-sthings.yaml"
          - "{{ path | default('.') }}/scm-creds-sthings.yaml"
          - "{{ path | default('.') }}/projects-sthings.yaml"
          - "{{ path | default('.') }}/machine-creds-sthings.yaml"
          - "{{ path | default('.') }}/custom-credentials.yaml"
          - "{{ path | default('.') }}/custom-credential-type.yaml"
          - "{{ path | default('.') }}/dynamic-inventory-vsphere.yaml"
          - "{{ path | default('.') }}/inventory-source.yaml"
          - "{{ path | default('.') }}/ee-sthings.yaml"
          - "{{ path | default('.') }}/terraform-vars.yaml"
          - "{{ path | default('.') }}/tf-vars-{{ cloud }}.yaml"
          - "{{ path | default('.') }}/job-get-execute-terraform.yaml"

        tasks:
          - ansible.builtin.import_tasks: check_connection.yaml
          - ansible.builtin.import_tasks: creation_tasks.yaml

  - name: docker
    play: |
      ---
      - hosts: "{{ target_host | default('localhost') }}"

        vars_files:
          - "{{ path | default('.') }}/awx-local-env.yaml"
          - "{{ path | default('.') }}/organization-sthings.yaml"
          - "{{ path | default('.') }}/scm-creds-sthings.yaml"
          - "{{ path | default('.') }}/projects-sthings.yaml"
          - "{{ path | default('.') }}/machine-creds-sthings.yaml"
          - "{{ path | default('.') }}/custom-credentials.yaml"
          - "{{ path | default('.') }}/custom-credential-type.yaml"
          - "{{ path | default('.') }}/dynamic-inventory-vsphere.yaml"
          - "{{ path | default('.') }}/inventory-source.yaml"
          - "{{ path | default('.') }}/ee-sthings.yaml"
          - "{{ path | default('.') }}/job-docker.yaml"

        tasks:
          - ansible.builtin.import_tasks: check_connection.yaml
          - ansible.builtin.import_tasks: creation_tasks.yaml

  - name: nerdctl
    play: |
      ---
      - hosts: "{{ target_host | default('localhost') }}"

        vars_files:
          - "{{ path | default('.') }}/awx-local-env.yaml"
          - "{{ path | default('.') }}/organization-sthings.yaml"
          - "{{ path | default('.') }}/scm-creds-sthings.yaml"
          - "{{ path | default('.') }}/projects-sthings.yaml"
          - "{{ path | default('.') }}/machine-creds-sthings.yaml"
          - "{{ path | default('.') }}/custom-credentials.yaml"
          - "{{ path | default('.') }}/custom-credential-type.yaml"
          - "{{ path | default('.') }}/dynamic-inventory-vsphere.yaml"
          - "{{ path | default('.') }}/inventory-source.yaml"
          - "{{ path | default('.') }}/ee-sthings.yaml"
          - "{{ path | default('.') }}/job-nerdctl.yaml"

        tasks:
          - ansible.builtin.import_tasks: check_connection.yaml
          - ansible.builtin.import_tasks: creation_tasks.yaml

  - name: golang
    play: |
      ---
      - hosts: "{{ target_host | default('localhost') }}"
        vars_files:
          - "{{ path | default('.') }}/awx-local-env.yaml"
          - "{{ path | default('.') }}/organization-sthings.yaml"
          - "{{ path | default('.') }}/scm-creds-sthings.yaml"
          - "{{ path | default('.') }}/projects-sthings.yaml"
          - "{{ path | default('.') }}/machine-creds-sthings.yaml"
          - "{{ path | default('.') }}/custom-credentials.yaml"
          - "{{ path | default('.') }}/custom-credential-type.yaml"
          - "{{ path | default('.') }}/dynamic-inventory-vsphere.yaml"
          - "{{ path | default('.') }}/inventory-source.yaml"
          - "{{ path | default('.') }}/ee-sthings.yaml"
          - "{{ path | default('.') }}/job-golang.yaml"

        tasks:
          - ansible.builtin.import_tasks: check_connection.yaml
          - ansible.builtin.import_tasks: creation_tasks.yaml

  - name: baseos
    play: |
      ---
      - hosts: "{{ target_host | default('localhost') }}"
        vars_files:
          - "{{ path | default('.') }}/awx-local-env.yaml"
          - "{{ path | default('.') }}/organization-sthings.yaml"
          - "{{ path | default('.') }}/scm-creds-sthings.yaml"
          - "{{ path | default('.') }}/projects-sthings.yaml"
          - "{{ path | default('.') }}/machine-creds-sthings.yaml"
          - "{{ path | default('.') }}/custom-credentials.yaml"
          - "{{ path | default('.') }}/custom-credential-type.yaml"
          - "{{ path | default('.') }}/dynamic-inventory-vsphere.yaml"
          - "{{ path | default('.') }}/inventory-source.yaml"
          - "{{ path | default('.') }}/ee-sthings.yaml"
          - "{{ path | default('.') }}/schedule-baseos.yaml"
          - "{{ path | default('.') }}/job-baseos.yaml"

        tasks:
          - ansible.builtin.import_tasks: check_connection.yaml
          - ansible.builtin.import_tasks: creation_tasks.yaml

  - name: schedule_baseos
    play: |
      ---
      - hosts: "{{ target_host | default('localhost') }}"

        vars_files:
          - "{{ path | default('.') }}/awx-local-env.yaml"
          - "{{ path | default('.') }}/organization-sthings.yaml"
          - "{{ path | default('.') }}/scm-creds-sthings.yaml"
          - "{{ path | default('.') }}/projects-sthings.yaml"
          - "{{ path | default('.') }}/machine-creds-sthings.yaml"
          - "{{ path | default('.') }}/custom-credentials.yaml"
          - "{{ path | default('.') }}/custom-credential-type.yaml"
          - "{{ path | default('.') }}/dynamic-inventory-vsphere.yaml"
          - "{{ path | default('.') }}/inventory-source.yaml"
          - "{{ path | default('.') }}/ee-sthings.yaml"
          - "{{ path | default('.') }}/schedule-baseos.yaml"
          - "{{ path | default('.') }}/job-schedule.yaml"

        tasks:
          - ansible.builtin.import_tasks: creation_tasks.yaml

  - name: hello_awx
    play: |
      ---
      - hosts: "{{ target_host | default('localhost') }}"

        vars_files:
          - "{{ path | default('.') }}/awx-local-env.yaml"
          - "{{ path | default('.') }}/organization-sthings.yaml"
          - "{{ path | default('.') }}/scm-creds-sthings.yaml"
          - "{{ path | default('.') }}/projects-sthings.yaml"
          - "{{ path | default('.') }}/machine-creds-sthings.yaml"
          - "{{ path | default('.') }}/custom-credentials.yaml"
          - "{{ path | default('.') }}/custom-credential-type.yaml"
          - "{{ path | default('.') }}/inventory-source.yaml"
          - "{{ path | default('.') }}/hosts-test.yaml"
          - "{{ path | default('.') }}/ee-sthings.yaml"
          - "{{ path | default('.') }}/schedule-baseos.yaml"
          - "{{ path | default('.') }}/job-awx.yaml"

        tasks:
          - ansible.builtin.import_tasks: creation_tasks.yaml

templates:
  - name: vm-vsphere
    file: |
      module {{ vmName }} {
        source                 = "{{ tf_module_source }}"
        vm_count               = {{ vmCount }}
        vsphere_vm_name        = "{{ vmName }}"
        vm_memory              = {{ vm_memory }}
        vsphere_vm_template    = "{{ vm_template }}"
        vm_disk_size           = "{{ vm_disk }}"
        vm_num_cpus            = {{ vm_cpu }}
        firmware               = "{{ vmFirmware }}"
        vsphere_vm_folder_path = "{{ rootFolderpath }}/{{ folderpath }}"
        vsphere_datacenter     = "{{ datacenter }}"
        vsphere_datastore      = "{{ vm_datastores }}"
        vsphere_resource_pool  = "{{ resourcePool }}"
        vsphere_network        = "{{ vm_network }}"
        bootstrap              = ["echo STUTTGART-THINGS"]
        annotation             = "VSPHERE-VM {{ vmName }} {{ vmTemplate }} BUILD w/ TERRAFORM FOR STUTTGART-THINGS"
        vsphere_server         = var.vsphere_server
        vsphere_user           = var.vsphere_user
        vsphere_password       = var.vsphere_password
        vm_ssh_user            = var.vm_ssh_user
        vm_ssh_password        = var.vm_ssh_password
      }

      variable "vsphere_server" {
        default     = false
        type        = string
        description = "name of vsphere vm server"
      }

      variable "vm_ssh_user" {
        default     = false
        type        = string
        description = "username of ssh user for vm"
      }

      variable "vm_ssh_password" {
        default     = false
        type        = string
        description = "password of ssh user"
        }

      variable "vsphere_user" {
        default     = false
        type        = string
        description = "password of vsphere user"
      }

      variable "vsphere_password" {
        default     = false
        type        = string
        description = "password of vsphere user"
      }

      output "ip" {
        value = [module.{{ vmName }}.ip]
      }

  - name: vsphere-backend
    file: |
      terraform {
        backend "s3" {

          endpoints = {
            s3 = "{{ backend_host_url }}"
          }

          skip_requesting_account_id = true
          skip_s3_checksum = true
          key = "{{ vmName }}.tfstate"
          bucket = "{{ bucket_name }}"
          region = "main"
          skip_credentials_validation = true
          skip_metadata_api_check = true
          skip_region_validation = true
          force_path_style = true
          workspace_key_prefix = "{{ vmName }}"
        }
      }

vars:
  - name: job-get-execute-terraform
    file: |
      ---
      job_templates:
        stuttgartThings:
          name: get-execute-terraform
          organization: stuttgart-things
          inventory: dynamic-inventory-vsphere
          project: stuttgart-things
          playbook: plays/get-execute-terraform.yaml
          credentials:
            - sthings-ssh
            - labul-vault
          executionenv: sthings-ee
          state: present
          ask_verbosity_on_launch: true
          extra_vars: "{{ extra_vars | default(omit) }}"
          survey_enabled: true
          survey_spec: "{{ lookup('file', 'vars/survey-get-execute-terraform.yaml') }}"

  - name: survey-get-execute-terraform
    file: |
      {
          "name": "",
          "description": "",
          "spec": [
            {
              "question_name": "Execute against which host?",
              "question_description": "Enter host name",
              "required": true,
              "type": "text",
              "variable": "target_host",
              "min": null,
              "max": null,
              "default": ""
            },
            {
              "question_name": "Do you want to install Terraform?",
              "question_description": "Choose true or false",
              "required": true,
              "type": "multiplechoice",
              "variable": "install_terraform",
              "choices": ["true", "false"],
              "min": null,
              "max": null,
              "default": ""
            },
            {
              "question_name": "What is the project name?",
              "question_description": "Enter project name",
              "required": true,
              "type": "text",
              "variable": "project_name",
              "min": null,
              "max": null,
              "default": ""
            },
            {
              "question_name": "What is the bucket name in s3?",
              "question_description": "Enter bucket name to PUT templates",
              "required": true,
              "type": "text",
              "variable": "bucket_name",
              "min": null,
              "max": null,
              "default": ""
            },
            {
              "question_name": "What is the object name in s3?",
              "question_description": "Enter object name to GET config",
              "required": true,
              "type": "text",
              "variable": "object_name",
              "min": null,
              "max": null,
              "default": ""
            },
            {
              "question_name": "What is the s3 endpoint?",
              "question_description": "Enter s3 endpoint",
              "required": true,
              "type": "text",
              "variable": "s3_endpoint",
              "min": null,
              "max": null,
              "default": "https://artifacts.app1.sthings-vsphere.labul.sva.de"
            },
            {
              "question_name": "Do you want to apply or destroy VM?",
              "question_description": "Enter state of terrform VM",
              "required": true,
              "type": "multiplechoice",
              "variable": "state",
              "choices": ["present", "absent"],
              "min": null,
              "max": null,
              "default": "present"
            },
            {
              "question_name": "What lab?",
              "question_description": "Enter labul or labda",
              "required": true,
              "type": "multiplechoice",
              "variable": "lab",
              "choices": ["labul", "labda"],
              "min": null,
              "max": null,
              "default": ""
            },
            {
              "question_name": "What cloud for the VM?",
              "question_description": "Choose cloud",
              "required": true,
              "type": "multiplechoice",
              "variable": "cloud",
              "choices": ["vsphere", "proxmox"],
              "min": null,
              "max": null,
              "default": ""
            }
          ]
        }

  - name: job-render-upload-template
    file: |
      ---
      job_templates:
        stuttgartThings:
          name: render-upload-template
          organization: stuttgart-things
          inventory: dynamic-inventory-vsphere
          project: stuttgart-things
          playbook: plays/create-template.yaml
          credentials:
            - sthings-ssh
            - labul-vault
          executionenv: sthings-ee
          state: present
          ask_verbosity_on_launch: true
          extra_vars: "{{ extra_vars | default(omit) }}"
          survey_enabled: true
          survey_spec: "{{ lookup('file', 'vars/survey-render-upload-template.yaml') }}"

  - name: survey-render-upload-template
    file: |
      {
          "name": "",
          "description": "",
          "spec": [
            {
              "question_name": "What is the VM name?",
              "question_description": "Enter VM name",
              "required": true,
              "type": "text",
              "variable": "vmName",
              "min": null,
              "max": null,
              "default": ""
            },
            {
              "question_name": "What is the VM size?",
              "question_description": "Enter VM sizes s,m,l or xl",
              "required": true,
              "type": "multiplechoice",
              "variable": "vmSize",
              "choices": ["s", "m", "l", "xl"],
              "min": null,
              "max": null,
              "default": "s"
            },
            {
              "question_name": "How many VMs?",
              "question_description": "Enter VM count",
              "required": true,
              "type": "multiplechoice",
              "variable": "vmCount",
              "choices": ["1", "2", "3", "4", "5"],
              "min": null,
              "max": null,
              "default": "1"
            },
            {
              "question_name": "Which VM template do you want to use? (see description)",
              "question_description": "Choose os",
              "required": true,
              "type": "multiplechoice",
              "variable": "vmTemplate",
              "choices": ["ubuntu22", "ubuntu24", "rocky9"],
              "min": null,
              "max": null,
              "default": ""
            },
            {
              "question_name": "What is the bucket name in s3?",
              "question_description": "Enter bucket name to PUT templates",
              "required": true,
              "type": "text",
              "variable": "bucket_name",
              "min": null,
              "max": null,
              "default": ""
            },
            {
              "question_name": "What is the platform subfolderpath?",
              "question_description": "Enter subfolderpath of vsphere / proxmox",
              "required": true,
              "type": "text",
              "variable": "subfolderpath",
              "min": null,
              "max": null,
              "default": "testing"
            },
            {
              "question_name": "What lab?",
              "question_description": "Enter labul or labda",
              "required": true,
              "type": "multiplechoice",
              "variable": "lab",
              "choices": ["labul", "labda"],
              "min": null,
              "max": null,
              "default": ""
            },
            {
              "question_name": "What cloud for the VM?",
              "question_description": "Choose cloud",
              "required": true,
              "type": "multiplechoice",
              "variable": "cloud",
              "choices": ["vsphere", "proxmox"],
              "min": null,
              "max": null,
              "default": ""
            }
          ]
        }

  - name: job-golang
    file: |
      ---
      job_templates:
        stuttgartThings:
          name: install-golang
          organization: stuttgart-things
          inventory: dynamic-inventory-vsphere
          project: stuttgart-things
          playbook: plays/install-golang.yaml
          credentials: sthings-ssh
          executionenv: sthings-ee
          state: present
          ask_verbosity_on_launch: true
          survey_enabled: true
          survey_spec: "{{ lookup('file', 'vars/survey-golang.yaml') }}"

  - name: survey-golang
    file: |
      {
          "name": "",
          "description": "",
          "spec": [
            {
              "question_name": "Execute against which host?",
              "question_description": "Enter host name",
              "required": true,
              "type": "text",
              "variable": "target_host",
              "min": null,
              "max": null,
              "default": ""
            },
            {
              "question_name": "Install which Golang version?",
              "question_description": "Enter version",
              "required": true,
              "type": "text",
              "variable": "golang_version",
              "min": null,
              "max": null,
              "default": "1.22.3"
            },
            {
              "question_name": "Which checksum belongs to your target version?",
              "question_description": "Enter checksum",
              "required": true,
              "type": "text",
              "variable": "golang_checksum",
              "min": null,
              "max": null,
              "default": "5fb8b3ed4a78a8eab444dfcb472b8c07a06980dcaee62ce3645edd6d130004c6"
            },
            {
              "question_name": "What is the source url of Golang?",
              "question_description": "Enter URL",
              "required": true,
              "type": "text",
              "variable": "source_url",
              "min": null,
              "max": null,
              "default": "https://go.dev/dl/go1.22.3.linux-amd64.tar.gz"
            },
            {
              "question_name": "Which user do you want to use?",
              "question_description": "Enter user name",
              "required": true,
              "type": "text",
              "variable": "go_username",
              "min": null,
              "max": null,
              "default": "sthings"
            },
            {
              "question_name": "To which group does the user belong to?",
              "question_description": "Enter user group",
              "required": true,
              "type": "text",
              "variable": "go_usergroup",
              "min": null,
              "max": null,
              "default": "sthings"
            },
            {
              "question_name": "Change user homedir?",
              "question_description": "Enter user home directory",
              "required": true,
              "type": "text",
              "variable": "go_userhome",
              "min": null,
              "max": null,
              "default": "/home/sthings"
            }
          ]
        }

  - name: job-nerdctl
    file: |
      ---
      job_templates:
        stuttgartThings:
          name: install-nerdctl
          organization: stuttgart-things
          inventory: dynamic-inventory-vsphere
          project: stuttgart-things
          playbook: plays/install-nerdctl.yaml
          credentials: sthings-ssh
          executionenv: sthings-ee
          state: present
          ask_verbosity_on_launch: true
          survey_enabled: true
          survey_spec: "{{ lookup('file', 'vars/survey-nerdctl.yaml') }}"

  - name: survey-nerdctl
    file: |
      {
          "name": "",
          "description": "",
          "spec": [
            {
              "question_name": "Execute against which host?",
              "question_description": "Enter host name",
              "required": true,
              "type": "text",
              "variable": "target_host",
              "min": null,
              "max": null,
              "default": ""
            },
            {
              "question_name": "nerdctl version?",
              "question_description": "choose nerdctl version",
              "required": true,
              "type": "multiplechoice",
              "variable": "nerdctl_version",
              "choices": ["1.7.5", "1.7.6", "2.0.0-beta.5"],
              "min": null,
              "max": null,
              "default": "1.7.6"
            }
          ]
        }

  - name: job-docker
    file: |
      ---
      job_templates:
        stuttgartThings:
          name: install-docker
          organization: stuttgart-things
          inventory: dynamic-inventory-vsphere
          project: stuttgart-things
          playbook: plays/install-docker.yaml
          credentials: sthings-ssh
          executionenv: sthings-ee
          state: present
          ask_verbosity_on_launch: true
          survey_enabled: true
          survey_spec: "{{ lookup('file', 'vars/survey-docker.yaml') }}"

  - name: survey-docker
    file: |
      {
          "name": "",
          "description": "",
          "spec": [
            {
              "question_name": "Execute against which host?",
              "question_description": "Enter host name",
              "required": true,
              "type": "text",
              "variable": "target_host",
              "min": null,
              "max": null,
              "default": ""
            },
            {
              "question_name": "install docker compose?",
              "question_description": "choose true or false",
              "required": true,
              "type": "multiplechoice",
              "variable": "docker_install_compose",
              "choices": ["true", "false"],
              "min": null,
              "max": null,
              "default": "true"
            },
            {
              "question_name": "install kind?",
              "question_description": "choose true or false",
              "required": true,
              "type": "multiplechoice",
              "variable": "install_kind",
              "choices": ["true", "false"],
              "min": null,
              "max": null,
              "default": "false"
            },
            {
              "question_name": "kind version?",
              "question_description": "choose kind version",
              "required": true,
              "type": "multiplechoice",
              "variable": "kind_version",
              "choices": ["0.23.0", "0.22.0", "0.21.0", "0.20.0"],
              "min": null,
              "max": null,
              "default": "0.22.0"
            },
            {
              "question_name": "kubectl version?",
              "question_description": "choose kubectl version",
              "required": true,
              "type": "multiplechoice",
              "variable": "kubectl_version",
              "choices": ["1.30.0", "1.29.0", "1.28.0", "1.27.0"],
              "min": null,
              "max": null,
              "default": "1.30.0"
            }
          ]
        }

  - name: job-baseos
    file: |
      ---
      job_templates:
        stuttgartThings:
          name: baseos
          organization: stuttgart-things
          inventory: dynamic-inventory-vsphere
          project: stuttgart-things
          playbook: plays/import-base-os-play.yaml
          credentials: sthings-ssh
          executionenv: sthings-ee
          state: present
          ask_verbosity_on_launch: true
          survey_enabled: true
          survey_spec: "{{ lookup('file', 'vars/survey-baseos.yaml') }}"

  - name: survey-baseos
    file: |
      {
          "name": "",
          "description": "",
          "spec": [
            {
              "question_name": "Execute against which host?",
              "question_description": "Enter host name",
              "required": true,
              "type": "text",
              "variable": "target_host",
              "min": null,
              "max": null,
              "default": ""
            },
            {
              "question_name": "Run manage filesystem role?",
              "question_description": "choose true or false",
              "required": true,
              "type": "multiplechoice",
              "variable": "manage_filesystem",
              "choices": ["true", "false"],
              "min": null,
              "max": null,
              "default": "true"
            },
            {
              "question_name": "Update packages?",
              "question_description": "choose true or false",
              "required": true,
              "type": "multiplechoice",
              "variable": "update_packages",
              "choices": ["true", "false"],
              "min": null,
              "max": null,
              "default": "true"
            },
            {
              "question_name": "Run install requirements role?",
              "question_description": "choose true or false",
              "required": true,
              "type": "multiplechoice",
              "variable": "install_requirements",
              "choices": ["true", "false"],
              "min": null,
              "max": null,
              "default": "true"
            },
            {
              "question_name": "Install Message of the day?",
              "question_description": "choose true or false",
              "required": true,
              "type": "multiplechoice",
              "variable": "install_motd",
              "choices": ["true", "false"],
              "min": null,
              "max": null,
              "default": "true"
            },
            {
              "question_name": "Do reboot?",
              "question_description": "choose true or false",
              "required": true,
              "type": "multiplechoice",
              "variable": "reboot_all",
              "choices": ["true", "false"],
              "min": null,
              "max": null,
              "default": "false"
            },
            {
              "question_name": "Enter username (default: sthings)?",
              "question_description": "choose username",
              "required": true,
              "type": "text",
              "variable": "username",
              "min": null,
              "max": null,
              "default": "sthings"
            },
            {
              "question_name": "Choose sizing for lvm_home",
              "question_description": "Choose sizing for lvm_home",
              "required": true,
              "type": "multiplechoice",
              "variable": "lvm_home_sizing",
              "choices": ["10%", "15%", "20%", "25%", "30%"],
              "min": null,
              "max": null,
              "default": "15%"
            },
            {
              "question_name": "Choose sizing for lvm_root",
              "question_description": "Choose sizing for lvm_root",
              "required": true,
              "type": "multiplechoice",
              "variable": "lvm_root_sizing",
              "choices": ["25%", "30%", "35%", "40%", "45"],
              "min": null,
              "max": null,
              "default": "35%"
            },
            {
              "question_name": "Choose sizing for lvm_var",
              "question_description": "Choose sizing for lvm_var",
              "required": true,
              "type": "multiplechoice",
              "variable": "lvm_var_sizing",
              "choices": ["40%", "45%", "50%", "55%", "60"],
              "min": null,
              "max": null,
              "default": "50%"
            },
            {
              "question_name": "Send webhook to msteams",
              "question_description": "Send webhook to msteams",
              "required": true,
              "type": "multiplechoice",
              "variable": "send_to_msteams",
              "choices": ["true", "false"],
              "min": null,
              "max": null,
              "default": "true"
            },
            {
              "question_name": "Change ms teams webhook url?",
              "question_description": "Change ms teams webhook url",
              "required": true,
              "type": "text",
              "variable": "msteams_webhook_url",
              "min": null,
              "max": null,
              "default": "https://365sva.webhook.office.com/webhookb2/2f14a9f8-4736-46dd-9c8c-31547ec37180@0a65cb1e-37d5-41ff-980a-647d9d0e4f0b/IncomingWebhook/37a805a0a2624dc2ac1aedd7dec6ad49/dc3a27ed-396c-40b7-a9b2-f1a2b6b44efe"
            }
          ]
        }

  - name: job-schedule
    file: |
      ---
      job_templates:
        stuttgartThings:
          name: schedule-baseos
          organization: stuttgart-things
          inventory: dynamic-inventory-vsphere
          project: stuttgart-things
          playbook: plays/schedule-baseos.yaml
          credentials: sthings-ssh
          executionenv: sthings-ee
          state: present
          ask_verbosity_on_launch: true
          survey_enabled: true
          survey_spec: "{{ lookup('file', 'vars/survey-schedule.yaml') }}"

  - name: survey-schedule
    file: |
      {
         "name": "",
         "description": "",
         "spec": [
            {
              "question_name": "Execute against which host?",
              "question_description": "Enter host name",
              "required": true,
              "type": "text",
              "variable": "target_host",
              "min": null,
              "max": null,
              "default": ""
            },
            {
              "question_name": "What job to run?",
              "question_description": "Enter job template name",
              "required": true,
              "type": "text",
              "variable": "target_job",
              "min": null,
              "max": null,
              "default": "baseos"
            },
            {
              "question_name": "On which date should this job run? (Format: 2024-06-30)",
              "question_description": "Enter first day to schedule",
              "required": true,
              "type": "text",
              "variable": "start_date",
              "min": null,
              "max": null,
              "default": ""
            },
            {
              "question_name": "At which time do you want the job to run? (Format: 05:00:00)",
              "question_description": "Enter cron time",
              "required": true,
              "type": "text",
              "variable": "cron_time",
              "min": null,
              "max": null,
              "default": ""
            },
            {
              "question_name": "With what frequency do you want your job to run?",
              "question_description": "Choose frequency",
              "required": true,
              "type": "multiplechoice",
              "variable": "frequency_rule",
              "choices": ["none", "minute", "hour", "day", "week", "month"],
              "min": null,
              "max": null,
              "default": "day"
            },
            {
              "question_name": "With what interval do you want your job to run? (example in description)",
              "question_description": "frequency=day + interval=1 == daily scheduled run",
              "required": true,
              "type": "text",
              "variable": "interval_rule",
              "min": null,
              "max": null,
              "default": "1"
            },
            {
              "question_name": "What name for the schedule?",
              "question_description": "Enter name",
              "required": true,
              "type": "text",
              "variable": "schedule_name",
              "min": null,
              "max": null,
              "default": "schedule-base-os"
            },
            {
              "question_name": "Do you want the ressource to be created or deleted?",
              "question_description": "create=present or delete=absent",
              "required": true,
              "type": "multiplechoice",
              "variable": "schedule_state",
              "choices": ["present", "absent"],
              "min": null,
              "max": null,
              "default": "present"
            }
          ]
        }

  - name: job-awx
    file: |
      ---
      job_templates:
        stuttgartThings:
          name: hello-awx
          organization: stuttgart-things
          inventory: dynamic-inventory-vsphere
          project: stuttgart-things
          playbook: plays/hello-awx.yaml
          credentials: sthings-ssh
          executionenv: sthings-ee
          state: present
          ask_verbosity_on_launch: true
          survey_enabled: true
          survey_spec: "{{ lookup('file', 'vars/survey-job-awx.yaml') }}"

  - name: survey-job-awx
    file: |
      {
          "name": "",
          "description": "",
          "spec": [
            {
              "question_name": "Execute against which host?",
              "question_description": "Enter host name",
              "required": true,
              "type": "text",
              "variable": "target_host",
              "min": null,
              "max": null,
              "default": ""
            },
            {
              "question_name": "Curl against which host?",
              "question_description": "Enter host name",
              "required": true,
              "type": "text",
              "variable": "test_host",
              "min": null,
              "max": null,
              "default": ""
            },
            {
              "question_name": "Which homepage to curl?",
              "question_description": "Enter homepage",
              "required": true,
              "type": "text",
              "variable": "page",
              "min": null,
              "max": null,
              "default": "https://www.google.com"
            }
          ]
        }

  - name: dynamic-inventory-vsphere
    file: |
      ---
      inventories:
        dynamicInventory:
          name: dynamic-inventory-vsphere
          description: stuttgart-things organization
          organization: stuttgart-things
          state: present

  - name: inventory-source
    file: |
      ---
      inventorySource:
        dynamicInventory:
          name: source-dynamic-inventory
          description: Source for inventory dynamic-inventory-vsphere
          organization: stuttgart-things
          inventory: dynamic-inventory-vsphere
          credential: sthings-labul
          source: vmware
          source_vars:
            hostnames:
              - config.name
            properties:
              - name
              - network
              - overallStatus
              - value
              - capability
              - config
              - guest
              - runtime
              - summary
            with_nested_properties: true
            with_tags: true
            resources:
              - datacenter:
                  - LabUL
                resources:
                  - folder:
                    - stuttgart-things

  - name: hosts-test
    file: |
      ---
      hosts:
        localhost:
          name: localhost
          description: stuttgart-things organization
          inventory: dynamic-inventory-vsphere
          state: present
          vmVariables: {ansible_connection: local}
        vsphere:
          name: "{{ test_host }}"
          description: stuttgart-things organization
          inventory: dynamic-inventory-vsphere
          state: present

  - name: organization-sthings
    file: |
      ---
      organizations:
        stuttgartThings:
          name: stuttgart-things
          description: stuttgart-things organization
          state: present

  - name: scm-creds-sthings
    file: |
      ---
      scmCredentials:
        sthingsSCM:
          name: sthings-scm
          organization: stuttgart-things
          state: present
          awx_ssh_key: "{{ lookup('community.hashi_vault.hashi_vault', 'secret=ssh/data/sthings:privateKey validate_certs=false auth_method=approle role_id={{ vault_approle_id }} secret_id={{ vault_approle_secret }} url={{ vault_url }}') | b64decode }}"

  - name: projects-sthings
    file: |
      ---
      projects:
        stuttgartThings:
          name: stuttgart-things
          description:
          organization: stuttgart-things
          scm_url: git@codehub.sva.de:Lab/stuttgart-things/stuttgart-things.git
          scm_type: git
          credential: sthings-scm
          state: present
          scm_update_on_launch: true
          scm_update_cache_timeout: 60

  - name: machine-creds-sthings
    file: |
      ---
      machineCredentials:
        sthingsSSH:
          name: sthings-ssh
          description: stuttgart-things organization
          organization: stuttgart-things
          credential_type: Machine
          state: present
          username: sthings
          awx_ssh_key: "{{ lookup('community.hashi_vault.hashi_vault', 'secret=ssh/data/sthings:privateKey validate_certs=false auth_method=approle role_id={{ vault_approle_id }} secret_id={{ vault_approle_secret }} url={{ vault_url }}') | b64decode }}"
        vcenterCredentials:
          name: sthings-labul
          description: stuttgart-things organization
          organization: stuttgart-things
          credential_type: VMware vCenter
          state: present
          host: "{{ lookup('community.hashi_vault.hashi_vault', 'secret=cloud/data/vsphere:ip validate_certs=false auth_method=approle role_id={{ vault_approle_id }} secret_id={{ vault_approle_secret }} url={{ vault_url }}') }}"
          username: "{{ lookup('community.hashi_vault.hashi_vault', 'secret=cloud/data/vsphere:username validate_certs=false auth_method=approle role_id={{ vault_approle_id }} secret_id={{ vault_approle_secret }} url={{ vault_url }}') }}"
          password: "{{ lookup('community.hashi_vault.hashi_vault', 'secret=cloud/data/vsphere:password validate_certs=false auth_method=approle role_id={{ vault_approle_id }} secret_id={{ vault_approle_secret }} url={{ vault_url }}') }}"
        containerRegistryCredentials:
          name: sthings-registry
          description: stuttgart-things organization
          organization: stuttgart-things
          credential_type: Container Registry
          state: present
          username: "{{ lookup('community.hashi_vault.hashi_vault', 'secret=apps/data/harbor:user validate_certs=false auth_method=approle role_id={{ vault_approle_id }} secret_id={{ vault_approle_secret }} url={{ vault_url }}') }}"
          password: "{{ lookup('community.hashi_vault.hashi_vault', 'secret=apps/data/harbor:password validate_certs=false auth_method=approle role_id={{ vault_approle_id }} secret_id={{ vault_approle_secret }} url={{ vault_url }}') }}"

  - name: vault-injector
    file: |
      {
          "env": {
            "VAULT_ADDR": "{{ vault_url }}",
            "VAULT_ROLE_ID": "{{ vault_approle_id }}",
            "VAULT_SECRET_ID": "{{ vault_approle_secret }}",
          },
          "extra_vars": {}
      }

  - name: vault-input
    file: |
      {
          "fields": [
            {
                "id": "vault_url",
                "type": "string",
                "label": "vault_url"
            },
            {
                "id": "vault_approle_id",
                "type": "string",
                "label": "vault_approle_id"
            },
            {
                "id": "vault_approle_secret",
                "type": "string",
                "label": "vault_approle_secret"
            }
          ],
          "required": [
            "vault_url",
          ]
      }

  - name: custom-credential-type
    file: |
      ---
      custom_credential_types:
        vault:
          name: vault-custom
          state: present
          kind: cloud
          inputs: "{{ lookup('file', 'vars/vault-input.yaml') }}"
          injectors: "{{ lookup('file', 'vars/vault-injector.yaml') }}"

  - name: custom-credentials
    file: |
      ---
      custom_credentials:
        vault_custom:
          name: labul-vault
          description: labul vault credentials
          credential_type: vault-custom
          organization: stuttgart-things
          state: present
          inputs:
            vault_url: "{{ lookup('env', 'VAULT_ADDR') }}"
            vault_approle_id: "{{ lookup('env', 'VAULT_ROLE_ID') }}"
            vault_approle_secret: "{{ lookup('env', 'VAULT_SECRET_ID') }}"

  - name: ee-sthings
    file: |
      ---
      execution_environment:
        sthings-ee:
          name: sthings-ee
          image: scr.cd43.sthings-pve.labul.sva.de/ansible-ee/ee:v4
          pull: always
          credential: sthings-registry

  - name: schedule-baseos
    file: |
      ---
      start_date: "2024-06-30"
      cron_time: "05:00:00"
      frequency_rule: "day"
      interval_rule: 1
      target_host: localhost

      scheduler:
        schedule_base_os:
          name: schedule-base-os
          state: present
          unified_job_template: "baseos"
          job_type: "run"
          extra_data:
            target_host: "{{ target_host }}"
            manage_filesystem: "true"
            update_packages: "true"
            install_requirements: "true"
            install_motd: "true"
            reboot_all: "false"
            username: "sthings"
            lvm_home_sizing: "15%"
            lvm_root_sizing: "35%"
            lvm_var_sizing: "50%"
            send_to_msteams: "true"
            msteams_webhook_url: "https://365sva.webhook.office.com/webhookb2/2f14a9f8-4736-46dd-9c8c-31547ec37180@0a65cb1e-37d5-41ff-980a-647d9d0e4f0b/IncomingWebhook/37a805a0a2624dc2ac1aedd7dec6ad49/dc3a27ed-396c-40b7-a9b2-f1a2b6b44efe"

      rrules:
        - frequency: '{{ frequency_rule }}'
          interval: "{{ interval_rule }}"
        - frequency: 'day'
          interval: 1
          byweekday: [ 'saturday', 'sunday' ]
          include: False

  - name: labul
    file: |
      ---
      lab_values:
        vsphere:
          template:
            ubuntu22: "sthings-u22"
            ubuntu24: "sthings-u24"
            rocky9: "sthings-r9"
          datastore:
            - "/LabUL/datastore/UL-ESX-SAS-01"
            - "/LabUL/datastore/UL-ESX-SAS-02"
            - "/LabUL/datastore/UL-V5010-01-LUN1"
            - "/LabUL/datastore/UL-V5010-01-LUN2"
            - "/LabUL/datastore/UL-V5010-01-LUN3"
          network:
            - "/LabUL/network/MGMT-10.31.101"
            - "/LabUL/network/LAB-10.31.102"
            - "/LabUL/network/LAB-10.31.103"
            - "/LabUL/network/LAB-10.31.104"
          subfolderpath: "testing"
          bucket_name: "andre-vm-config"

  - name: vm-defaults
    file: |
      ---
      vm_size:
        cpu:
          s: 2
          m: 4
          l: 6
          xl: 8
        memory:
          s: 4096
          m: 6144
          l: 8192
          xl: 12288
        disk:
          s: 32
          m: 64
          l: 96
          xl: 128

      j2_template_name:
        backend:
          name: "{{ cloud }}-backend"
        main:
          name: "vm-{{ cloud }}"

      object_name: "{{ ansible_date_time.date }}-{{ project_name }}.tf"

      vmName: "test-{{ lookup('community.general.random_string', length=5, special=false) | lower }}"
      vmCount: "1"
      vmSize: "s"
      vmTemplate: "ubuntu24"
      s3_endpoint: "{{ lookup('community.hashi_vault.hashi_vault', 'secret=apps2/data/s3:console validate_certs=false auth_method=approle role_id={{ vault_approle_id }} secret_id={{ vault_approle_secret }} url={{ vault_url }}') }}"
      tf_module_source: "github.com/stuttgart-things/vsphere-vm?ref=v1.7.5-2.7.0-1"
      vmFirmware: "bios"
      rootFolderpath: "stuttgart-things"
      resourcePool: "/LabUL/host/Cluster-V6.5/Resources"
      backend_host_url: "https://artifacts.app1.sthings-vsphere.labul.sva.de"
      s3region: "main"
      datacenter: "/LabUL"

  - name: vsphere
    file: |
      ---
      vm_cpu: "{{ vm_size['cpu'][vmSize] }}"
      vm_memory: "{{ vm_size['memory'][vmSize] }}"
      vm_disk: "{{ vm_size['disk'][vmSize] }}"
      vm_template: "{{ lab_values[cloud]['template'][vmTemplate] }}"
      vm_datastores: "{{ lab_values[cloud]['datastore'] | random }}"
      vm_network: "{{ lab_values[cloud]['network'] | random }}"
      folderpath: "{{ lab_values[cloud]['subfolderpath'] }}"

  - name: tf-vars-vsphere
    file: |
      ---
      tf_vars:
        vsphere_server: "{{ lookup('community.hashi_vault.hashi_vault', 'secret=cloud/data/vsphere:ip validate_certs=false auth_method=approle role_id={{ vault_approle_id }} secret_id={{ vault_approle_secret }} url={{ vault_url }}') }}"
        vsphere_user: "{{ lookup('community.hashi_vault.hashi_vault', 'secret=cloud/data/vsphere:username validate_certs=false auth_method=approle role_id={{ vault_approle_id }} secret_id={{ vault_approle_secret }} url={{ vault_url }}') }}"
        vsphere_password: "{{ lookup('community.hashi_vault.hashi_vault', 'secret=cloud/data/vsphere:password validate_certs=false auth_method=approle role_id={{ vault_approle_id }} secret_id={{ vault_approle_secret }} url={{ vault_url }}') }}"
        vm_ssh_user: "{{ lookup('community.hashi_vault.hashi_vault', 'secret=cloud/data/vsphere:vm_ssh_user validate_certs=false auth_method=approle role_id={{ vault_approle_id }} secret_id={{ vault_approle_secret }} url={{ vault_url }}') }}"
        vm_ssh_password: "{{ lookup('community.hashi_vault.hashi_vault', 'secret=cloud/data/vsphere:vm_ssh_password validate_certs=false auth_method=approle role_id={{ vault_approle_id }} secret_id={{ vault_approle_secret }} url={{ vault_url }}') }}"

  - name: terraform-vars
    file: |
      ---
      tf_project_path: "./terraform"
      state: present
      rendered_all: "tf-config-all.tf"
      s3_endpoint: "{{ lookup('community.hashi_vault.hashi_vault', 'secret=apps2/data/s3:console validate_certs=false auth_method=approle role_id={{ vault_approle_id }} secret_id={{ vault_approle_secret }} url={{ vault_url }}') }}"
      AWS_ACCESS_KEY_ID: "{{ lookup('community.hashi_vault.hashi_vault', 'secret=apps2/data/s3:accessKey validate_certs=false auth_method=approle role_id={{ vault_approle_id }} secret_id={{ vault_approle_secret }} url={{ vault_url }}') }}"
      AWS_SECRET_ACCESS_KEY: "{{ lookup('community.hashi_vault.hashi_vault', 'secret=apps2/data/s3:secretKey validate_certs=false auth_method=approle role_id={{ vault_approle_id }} secret_id={{ vault_approle_secret }} url={{ vault_url }}') }}"
      force_init: true
      init_reconfigure: true

  - name: awx-local-env
    file: |
      ---
      controller_host: "{{ lookup('env', 'CONTROLLER_HOST') }}"
      controller_username: "{{ lookup('env', 'CONTROLLER_USERNAME') }}"
      controller_password: "{{ lookup('env', 'CONTROLLER_PASSWORD') }}"
      vault_approle_id: "{{ lookup('env', 'VAULT_ROLE_ID') }}"
      vault_approle_secret: "{{ lookup('env', 'VAULT_SECRET_ID') }}"
      vault_url: "{{ lookup('env', 'VAULT_ADDR') }}"
