---
name: awx-dev
#version: 0.0.94
namespace: sthings
playbooks:
  - name: docker
    play: |
      ---
      - hosts: "{{ target_host | default('localhost') }}"

        vars_files:
          - "{{ path | default('.') }}/awx-local-env.yaml"
          - "{{ path | default('.') }}/organization-sthings.yaml"
          - "{{ path | default('.') }}/scm-creds-sthings.yaml"
          - "{{ path | default('.') }}/projects-sthings.yaml"
          - "{{ path | default('.') }}/machine-creds-sthings.yaml"
          - "{{ path | default('.') }}/custom-credentials.yaml"
          - "{{ path | default('.') }}/custom-credential-type.yaml"
          - "{{ path | default('.') }}/dynamic-inventory-vsphere.yaml"
          - "{{ path | default('.') }}/inventory-source.yaml"
          - "{{ path | default('.') }}/ee-sthings.yaml"
          - "{{ path | default('.') }}/job-docker.yaml"

        tasks:
          - name: Include check_connection
            ansible.builtin.import_playbook: sthings.awx_vm.check_connection
          - name: Include creation_tasks
            ansible.builtin.import_playbook: sthings.awx_vm.creation_tasks
 
  - name: nerdctl
    play: |
      ---
      - hosts: "{{ target_host | default('localhost') }}"

        vars_files:
          - "{{ path | default('.') }}/awx-local-env.yaml"
          - "{{ path | default('.') }}/organization-sthings.yaml"
          - "{{ path | default('.') }}/scm-creds-sthings.yaml"
          - "{{ path | default('.') }}/projects-sthings.yaml"
          - "{{ path | default('.') }}/machine-creds-sthings.yaml"
          - "{{ path | default('.') }}/custom-credentials.yaml"
          - "{{ path | default('.') }}/custom-credential-type.yaml"
          - "{{ path | default('.') }}/dynamic-inventory-vsphere.yaml"
          - "{{ path | default('.') }}/inventory-source.yaml"
          - "{{ path | default('.') }}/ee-sthings.yaml"
          - "{{ path | default('.') }}/job-nerdctl.yaml"

        tasks:
          - name: Include check_connection
            ansible.builtin.import_playbook: sthings.awx_vm.check_connection
          - name: Include creation_tasks
            ansible.builtin.import_playbook: sthings.awx_vm.creation_tasks

  - name: golang
    play: |
      ---
      - hosts: "{{ target_host | default('localhost') }}"
        vars_files:
          - "{{ path | default('.') }}/awx-local-env.yaml"
          - "{{ path | default('.') }}/organization-sthings.yaml"
          - "{{ path | default('.') }}/scm-creds-sthings.yaml"
          - "{{ path | default('.') }}/projects-sthings.yaml"
          - "{{ path | default('.') }}/machine-creds-sthings.yaml"
          - "{{ path | default('.') }}/custom-credentials.yaml"
          - "{{ path | default('.') }}/custom-credential-type.yaml"
          - "{{ path | default('.') }}/dynamic-inventory-vsphere.yaml"
          - "{{ path | default('.') }}/inventory-source.yaml"
          - "{{ path | default('.') }}/ee-sthings.yaml"
          - "{{ path | default('.') }}/job-golang.yaml"

        tasks:
          - name: Include check_connection
            ansible.builtin.import_playbook: sthings.awx_vm.check_connection
          - name: Include creation_tasks
            ansible.builtin.import_playbook: sthings.awx_vm.creation_tasks

  - name: baseos
    play: |
      ---
      - hosts: "{{ target_host | default('localhost') }}"
        vars_files:
          - "{{ path | default('.') }}/awx-local-env.yaml"
          - "{{ path | default('.') }}/organization-sthings.yaml"
          - "{{ path | default('.') }}/scm-creds-sthings.yaml"
          - "{{ path | default('.') }}/projects-sthings.yaml"
          - "{{ path | default('.') }}/machine-creds-sthings.yaml"
          - "{{ path | default('.') }}/custom-credentials.yaml"
          - "{{ path | default('.') }}/custom-credential-type.yaml"
          - "{{ path | default('.') }}/dynamic-inventory-vsphere.yaml"
          - "{{ path | default('.') }}/inventory-source.yaml"
          - "{{ path | default('.') }}/ee-sthings.yaml"
          - "{{ path | default('.') }}/schedule-baseos.yaml"
          - "{{ path | default('.') }}/job-baseos.yaml"

        tasks:
          - name: Include check_connection
            ansible.builtin.import_playbook: sthings.awx_vm.check_connection
          - name: Include creation_tasks
            ansible.builtin.import_playbook: sthings.awx_vm.creation_tasks

  - name: schedule_baseos
    play: |
      ---
      - hosts: "{{ target_host | default('localhost') }}"

        vars_files:
          - "{{ path | default('.') }}/awx-local-env.yaml"
          - "{{ path | default('.') }}/organization-sthings.yaml"
          - "{{ path | default('.') }}/scm-creds-sthings.yaml"
          - "{{ path | default('.') }}/projects-sthings.yaml"
          - "{{ path | default('.') }}/machine-creds-sthings.yaml"
          - "{{ path | default('.') }}/custom-credentials.yaml"
          - "{{ path | default('.') }}/custom-credential-type.yaml"
          - "{{ path | default('.') }}/dynamic-inventory-vsphere.yaml"
          - "{{ path | default('.') }}/inventory-source.yaml"
          - "{{ path | default('.') }}/ee-sthings.yaml"
          - "{{ path | default('.') }}/schedule-baseos.yaml"
          - "{{ path | default('.') }}/job-schedule.yaml"

        tasks:
          - name: Include check_connection
            ansible.builtin.import_playbook: sthings.awx_vm.check_connection
          - name: Include creation_tasks
            ansible.builtin.import_playbook: sthings.awx_vm.creation_tasks

  - name: hello_awx
    play: |
      ---
      - hosts: "{{ target_host | default('localhost') }}"

        vars_files:
          - "{{ path | default('.') }}/awx-local-env.yaml"
          - "{{ path | default('.') }}/organization-sthings.yaml"
          - "{{ path | default('.') }}/scm-creds-sthings.yaml"
          - "{{ path | default('.') }}/projects-sthings.yaml"
          - "{{ path | default('.') }}/machine-creds-sthings.yaml"
          - "{{ path | default('.') }}/custom-credentials.yaml"
          - "{{ path | default('.') }}/custom-credential-type.yaml"
          - "{{ path | default('.') }}/inventory-source.yaml"
          - "{{ path | default('.') }}/hosts-test.yaml"
          - "{{ path | default('.') }}/ee-sthings.yaml"
          - "{{ path | default('.') }}/schedule-baseos.yaml"
          - "{{ path | default('.') }}/job-awx.yaml"

        tasks:
          - name: Include check_connection
            ansible.builtin.import_playbook: sthings.awx_vm.check_connection
          - name: Include creation_tasks
            ansible.builtin.import_playbook: sthings.awx_vm.creation_tasks

vars:
  - name: job-golang
    file: |
      ---
      job_templates:
        stuttgartThings:
          name: install-golang
          organization: stuttgart-things
          inventory: dynamic-inventory-vsphere
          project: stuttgart-things
          playbook: plays/install-golang.yaml
          credentials: sthings-ssh
          executionenv: sthings-ee
          state: present
          ask_verbosity_on_launch: true
          survey_enabled: true
          survey_spec: "{{ lookup('file', 'vars/survey-golang.yaml') }}"

  - name: survey-golang
    file: |
      {
          "name": "",
          "description": "",
          "spec": [
            {
              "question_name": "Execute against which host?",
              "question_description": "Enter host name",
              "required": true,
              "type": "text",
              "variable": "target_host",
              "min": null,
              "max": null,
              "default": ""
            },
            {
              "question_name": "Install which Golang version?",
              "question_description": "Enter version",
              "required": true,
              "type": "text",
              "variable": "golang_version",
              "min": null,
              "max": null,
              "default": "1.22.3"
            },
            {
              "question_name": "Which checksum belongs to your target version?",
              "question_description": "Enter checksum",
              "required": true,
              "type": "text",
              "variable": "golang_checksum",
              "min": null,
              "max": null,
              "default": "5fb8b3ed4a78a8eab444dfcb472b8c07a06980dcaee62ce3645edd6d130004c6"
            },
            {
              "question_name": "What is the source url of Golang?",
              "question_description": "Enter URL",
              "required": true,
              "type": "text",
              "variable": "source_url",
              "min": null,
              "max": null,
              "default": "https://go.dev/dl/go1.22.3.linux-amd64.tar.gz"
            },
            {
              "question_name": "Which user do you want to use?",
              "question_description": "Enter user name",
              "required": true,
              "type": "text",
              "variable": "go_username",
              "min": null,
              "max": null,
              "default": "sthings"
            },
            {
              "question_name": "To which group does the user belong to?",
              "question_description": "Enter user group",
              "required": true,
              "type": "text",
              "variable": "go_usergroup",
              "min": null,
              "max": null,
              "default": "sthings"
            },
            {
              "question_name": "Change user homedir?",
              "question_description": "Enter user home directory",
              "required": true,
              "type": "text",
              "variable": "go_userhome",
              "min": null,
              "max": null,
              "default": "/home/sthings"
            }
          ]
        }

  - name: job-nerdctl
    file: |
      ---
      job_templates:
        stuttgartThings:
          name: install-nerdctl
          organization: stuttgart-things
          inventory: dynamic-inventory-vsphere
          project: stuttgart-things
          playbook: plays/install-nerdctl.yaml
          credentials: sthings-ssh
          executionenv: sthings-ee
          state: present
          ask_verbosity_on_launch: true
          survey_enabled: true
          survey_spec: "{{ lookup('file', 'vars/survey-nerdctl.yaml') }}"

  - name: survey-nerdctl
    file: |
      {
          "name": "",
          "description": "",
          "spec": [
            {
              "question_name": "Execute against which host?",
              "question_description": "Enter host name",
              "required": true,
              "type": "text",
              "variable": "target_host",
              "min": null,
              "max": null,
              "default": ""
            },
            {
              "question_name": "nerdctl version?",
              "question_description": "choose nerdctl version",
              "required": true,
              "type": "multiplechoice",
              "variable": "nerdctl_version",
              "choices": ["1.7.5", "1.7.6", "2.0.0-beta.5"],
              "min": null,
              "max": null,
              "default": "1.7.6"
            }
          ]
        }

  - name: job-docker
    file: |
      ---
      job_templates:
        stuttgartThings:
          name: install-docker
          organization: stuttgart-things
          inventory: dynamic-inventory-vsphere
          project: stuttgart-things
          playbook: plays/install-docker.yaml
          credentials: sthings-ssh
          executionenv: sthings-ee
          state: present
          ask_verbosity_on_launch: true
          survey_enabled: true
          survey_spec: "{{ lookup('file', 'vars/survey-docker.yaml') }}"

  - name: survey-docker
    file: |
      {
          "name": "",
          "description": "",
          "spec": [
            {
              "question_name": "Execute against which host?",
              "question_description": "Enter host name",
              "required": true,
              "type": "text",
              "variable": "target_host",
              "min": null,
              "max": null,
              "default": ""
            },
            {
              "question_name": "install docker compose?",
              "question_description": "choose true or false",
              "required": true,
              "type": "multiplechoice",
              "variable": "docker_install_compose",
              "choices": ["true", "false"],
              "min": null,
              "max": null,
              "default": "true"
            },
            {
              "question_name": "install kind?",
              "question_description": "choose true or false",
              "required": true,
              "type": "multiplechoice",
              "variable": "install_kind",
              "choices": ["true", "false"],
              "min": null,
              "max": null,
              "default": "false"
            },
            {
              "question_name": "kind version?",
              "question_description": "choose kind version",
              "required": true,
              "type": "multiplechoice",
              "variable": "kind_version",
              "choices": ["0.23.0", "0.22.0", "0.21.0", "0.20.0"],
              "min": null,
              "max": null,
              "default": "0.22.0"
            },
            {
              "question_name": "kubectl version?",
              "question_description": "choose kubectl version",
              "required": true,
              "type": "multiplechoice",
              "variable": "kubectl_version",
              "choices": ["1.30.0", "1.29.0", "1.28.0", "1.27.0"],
              "min": null,
              "max": null,
              "default": "1.30.0"
            }
          ]
        }

  - name: job-baseos
    file: |
      ---
      job_templates:
        stuttgartThings:
          name: baseos
          organization: stuttgart-things
          inventory: dynamic-inventory-vsphere
          project: stuttgart-things
          playbook: plays/import-base-os-play.yaml
          credentials: sthings-ssh
          executionenv: sthings-ee
          state: present
          ask_verbosity_on_launch: true
          survey_enabled: true
          survey_spec: "{{ lookup('file', 'vars/survey-baseos.yaml') }}"

  - name: survey-baseos
    file: |
      {
          "name": "",
          "description": "",
          "spec": [
            {
              "question_name": "Execute against which host?",
              "question_description": "Enter host name",
              "required": true,
              "type": "text",
              "variable": "target_host",
              "min": null,
              "max": null,
              "default": ""
            },
            {
              "question_name": "Run manage filesystem role?",
              "question_description": "choose true or false",
              "required": true,
              "type": "multiplechoice",
              "variable": "manage_filesystem",
              "choices": ["true", "false"],
              "min": null,
              "max": null,
              "default": "true"
            },
            {
              "question_name": "Update packages?",
              "question_description": "choose true or false",
              "required": true,
              "type": "multiplechoice",
              "variable": "update_packages",
              "choices": ["true", "false"],
              "min": null,
              "max": null,
              "default": "true"
            },
            {
              "question_name": "Run install requirements role?",
              "question_description": "choose true or false",
              "required": true,
              "type": "multiplechoice",
              "variable": "install_requirements",
              "choices": ["true", "false"],
              "min": null,
              "max": null,
              "default": "true"
            },
            {
              "question_name": "Install Message of the day?",
              "question_description": "choose true or false",
              "required": true,
              "type": "multiplechoice",
              "variable": "install_motd",
              "choices": ["true", "false"],
              "min": null,
              "max": null,
              "default": "true"
            },
            {
              "question_name": "Do reboot?",
              "question_description": "choose true or false",
              "required": true,
              "type": "multiplechoice",
              "variable": "reboot_all",
              "choices": ["true", "false"],
              "min": null,
              "max": null,
              "default": "false"
            },
            {
              "question_name": "Enter username (default: sthings)?",
              "question_description": "choose username",
              "required": true,
              "type": "text",
              "variable": "username",
              "min": null,
              "max": null,
              "default": "sthings"
            },
            {
              "question_name": "Choose sizing for lvm_home",
              "question_description": "Choose sizing for lvm_home",
              "required": true,
              "type": "multiplechoice",
              "variable": "lvm_home_sizing",
              "choices": ["10%", "15%", "20%", "25%", "30%"],
              "min": null,
              "max": null,
              "default": "15%"
            },
            {
              "question_name": "Choose sizing for lvm_root",
              "question_description": "Choose sizing for lvm_root",
              "required": true,
              "type": "multiplechoice",
              "variable": "lvm_root_sizing",
              "choices": ["25%", "30%", "35%", "40%", "45"],
              "min": null,
              "max": null,
              "default": "35%"
            },
            {
              "question_name": "Choose sizing for lvm_var",
              "question_description": "Choose sizing for lvm_var",
              "required": true,
              "type": "multiplechoice",
              "variable": "lvm_var_sizing",
              "choices": ["40%", "45%", "50%", "55%", "60"],
              "min": null,
              "max": null,
              "default": "50%"
            },
            {
              "question_name": "Send webhook to msteams",
              "question_description": "Send webhook to msteams",
              "required": true,
              "type": "multiplechoice",
              "variable": "send_to_msteams",
              "choices": ["true", "false"],
              "min": null,
              "max": null,
              "default": "true"
            },
            {
              "question_name": "Change ms teams webhook url?",
              "question_description": "Change ms teams webhook url",
              "required": true,
              "type": "text",
              "variable": "msteams_webhook_url",
              "min": null,
              "max": null,
              "default": "https://365sva.webhook.office.com/webhookb2/2f14a9f8-4736-46dd-9c8c-31547ec37180@0a65cb1e-37d5-41ff-980a-647d9d0e4f0b/IncomingWebhook/37a805a0a2624dc2ac1aedd7dec6ad49/dc3a27ed-396c-40b7-a9b2-f1a2b6b44efe"
            }
          ]
        }

  - name: job-schedule
    file: |
      ---
      job_templates:
        stuttgartThings:
          name: schedule-baseos
          organization: stuttgart-things
          inventory: dynamic-inventory-vsphere
          project: stuttgart-things
          playbook: plays/schedule-baseos.yaml
          credentials: sthings-ssh
          executionenv: sthings-ee
          state: present
          ask_verbosity_on_launch: true
          survey_enabled: true
          survey_spec: "{{ lookup('file', 'vars/survey-schedule.yaml') }}"

  - name: survey-schedule
    file: |
      {
         "name": "",
         "description": "",
         "spec": [
            {
              "question_name": "Execute against which host?",
              "question_description": "Enter host name",
              "required": true,
              "type": "text",
              "variable": "target_host",
              "min": null,
              "max": null,
              "default": ""
            },
            {
              "question_name": "What job to run?",
              "question_description": "Enter job template name",
              "required": true,
              "type": "text",
              "variable": "target_job",
              "min": null,
              "max": null,
              "default": "baseos"
            },
            {
              "question_name": "On which date should this job run? (Format: 2024-06-30)",
              "question_description": "Enter first day to schedule",
              "required": true,
              "type": "text",
              "variable": "start_date",
              "min": null,
              "max": null,
              "default": ""
            },
            {
              "question_name": "At which time do you want the job to run? (Format: 05:00:00)",
              "question_description": "Enter cron time",
              "required": true,
              "type": "text",
              "variable": "cron_time",
              "min": null,
              "max": null,
              "default": ""
            },
            {
              "question_name": "With what frequency do you want your job to run?",
              "question_description": "Choose frequency",
              "required": true,
              "type": "multiplechoice",
              "variable": "frequency_rule",
              "choices": ["none", "minute", "hour", "day", "week", "month"],
              "min": null,
              "max": null,
              "default": "day"
            },
            {
              "question_name": "With what interval do you want your job to run? (example in description)",
              "question_description": "frequency=day + interval=1 == daily scheduled run",
              "required": true,
              "type": "text",
              "variable": "interval_rule",
              "min": null,
              "max": null,
              "default": "1"
            },
            {
              "question_name": "What name for the schedule?",
              "question_description": "Enter name",
              "required": true,
              "type": "text",
              "variable": "schedule_name",
              "min": null,
              "max": null,
              "default": "schedule-base-os"
            },
            {
              "question_name": "Do you want the ressource to be created or deleted?",
              "question_description": "create=present or delete=absent",
              "required": true,
              "type": "multiplechoice",
              "variable": "schedule_state",
              "choices": ["present", "absent"],
              "min": null,
              "max": null,
              "default": "present"
            }
          ]
        }

  - name: job-awx
    file: |
      ---
      job_templates:
        stuttgartThings:
          name: hello-awx
          organization: stuttgart-things
          inventory: dynamic-inventory-vsphere
          project: stuttgart-things
          playbook: plays/hello-awx.yaml
          credentials: sthings-ssh
          executionenv: sthings-ee
          state: present
          ask_verbosity_on_launch: true
          survey_enabled: true
          survey_spec: "{{ lookup('file', 'vars/survey-job-awx.yaml') }}"

  - name: survey-job-awx
    file: |
      {
          "name": "",
          "description": "",
          "spec": [
            {
              "question_name": "Execute against which host?",
              "question_description": "Enter host name",
              "required": true,
              "type": "text",
              "variable": "target_host",
              "min": null,
              "max": null,
              "default": ""
            },
            {
              "question_name": "Curl against which host?",
              "question_description": "Enter host name",
              "required": true,
              "type": "text",
              "variable": "test_host",
              "min": null,
              "max": null,
              "default": ""
            },
            {
              "question_name": "Which homepage to curl?",
              "question_description": "Enter homepage",
              "required": true,
              "type": "text",
              "variable": "page",
              "min": null,
              "max": null,
              "default": "https://www.google.com"
            }
          ]
        }

  - name: dynamic-inventory-vsphere
    file: |
      ---
      inventories:
        dynamicInventory:
          name: dynamic-inventory-vsphere
          description: stuttgart-things organization
          organization: stuttgart-things
          state: present

  - name: inventory-source
    file: |
      ---
      inventorySource:
        dynamicInventory:
          name: source-dynamic-inventory
          description: Source for inventory dynamic-inventory-vsphere
          organization: stuttgart-things
          inventory: dynamic-inventory-vsphere
          credential: sthings-labul
          source: vmware
          source_vars:
            hostnames:
              - config.name
            properties:
              - name
              - network
              - overallStatus
              - value
              - capability
              - config
              - guest
              - runtime
              - summary
            with_nested_properties: true
            with_tags: true
            resources:
              - datacenter:
                  - LabUL
                resources:
                  - folder:
                    - stuttgart-things

  - name: hosts-test
    file: |
      ---
      hosts:
        localhost:
          name: localhost
          description: stuttgart-things organization
          inventory: dynamic-inventory-vsphere
          state: present
          vmVariables: {ansible_connection: local}
        vsphere:
          name: "{{ test_host }}"
          description: stuttgart-things organization
          inventory: dynamic-inventory-vsphere
          state: present

  - name: organization-sthings
    file: |
      ---
      organizations:
        stuttgartThings:
          name: stuttgart-things
          description: stuttgart-things organization
          state: present

  - name: scm-creds-sthings
    file: |
      ---
      scmCredentials:
        sthingsSCM:
          name: sthings-scm
          organization: stuttgart-things
          state: present
          awx_ssh_key: "{{ lookup('community.hashi_vault.hashi_vault', 'secret=ssh/data/sthings:privateKey validate_certs=false auth_method=approle role_id={{ vault_approle_id }} secret_id={{ vault_approle_secret }} url={{ vault_url }}') | b64decode }}"

  - name: projects-sthings
    file: |
      ---
      projects:
        stuttgartThings:
          name: stuttgart-things
          description:
          organization: stuttgart-things
          scm_url: git@codehub.sva.de:Lab/stuttgart-things/stuttgart-things.git
          scm_type: git
          credential: sthings-scm
          state: present
          scm_update_on_launch: true
          scm_update_cache_timeout: 60

  - name: machine-creds-sthings
    file: |
      ---
      machineCredentials:
        sthingsSSH:
          name: sthings-ssh
          description: stuttgart-things organization
          organization: stuttgart-things
          credential_type: Machine
          state: present
          username: sthings
          awx_ssh_key: "{{ lookup('community.hashi_vault.hashi_vault', 'secret=ssh/data/sthings:privateKey validate_certs=false auth_method=approle role_id={{ vault_approle_id }} secret_id={{ vault_approle_secret }} url={{ vault_url }}') | b64decode }}"
        vcenterCredentials:
          name: sthings-labul
          description: stuttgart-things organization
          organization: stuttgart-things
          credential_type: VMware vCenter
          state: present
          host: "{{ lookup('community.hashi_vault.hashi_vault', 'secret=cloud/data/vsphere:ip validate_certs=false auth_method=approle role_id={{ vault_approle_id }} secret_id={{ vault_approle_secret }} url={{ vault_url }}') }}"
          username: "{{ lookup('community.hashi_vault.hashi_vault', 'secret=cloud/data/vsphere:username validate_certs=false auth_method=approle role_id={{ vault_approle_id }} secret_id={{ vault_approle_secret }} url={{ vault_url }}') }}"
          password: "{{ lookup('community.hashi_vault.hashi_vault', 'secret=cloud/data/vsphere:password validate_certs=false auth_method=approle role_id={{ vault_approle_id }} secret_id={{ vault_approle_secret }} url={{ vault_url }}') }}"
        containerRegistryCredentials:
          name: sthings-registry
          description: stuttgart-things organization
          organization: stuttgart-things
          credential_type: Container Registry
          state: present
          username: "{{ lookup('community.hashi_vault.hashi_vault', 'secret=apps/data/harbor:user validate_certs=false auth_method=approle role_id={{ vault_approle_id }} secret_id={{ vault_approle_secret }} url={{ vault_url }}') }}"
          password: "{{ lookup('community.hashi_vault.hashi_vault', 'secret=apps/data/harbor:password validate_certs=false auth_method=approle role_id={{ vault_approle_id }} secret_id={{ vault_approle_secret }} url={{ vault_url }}') }}"

  - name: vault-injector
    file: |
      {
          "env": {
            "VAULT_ADDR": "{{ vault_url }}",
            "VAULT_ROLE_ID": "{{ vault_approle_id }}",
            "VAULT_SECRET_ID": "{{ vault_approle_secret }}",
          },
          "extra_vars": {}
      }

  - name: vault-input
    file: |
      {
          "fields": [
            {
                "id": "vault_url",
                "type": "string",
                "label": "vault_url"
            },
            {
                "id": "vault_approle_id",
                "type": "string",
                "label": "vault_approle_id"
            },
            {
                "id": "vault_approle_secret",
                "type": "string",
                "label": "vault_approle_secret"
            }
          ],
          "required": [
            "vault_url",
          ]
      }

  - name: custom-credential-type
    file: |
      ---
      custom_credential_types:
        vault:
          name: vault-custom
          state: present
          kind: cloud
          inputs: "{{ lookup('file', 'vars/vault-input.yaml') }}"
          injectors: "{{ lookup('file', 'vars/vault-injector.yaml') }}"

  - name: custom-credentials
    file: |
      ---
      custom_credentials:
        vault_custom:
          name: labul-vault
          description: labul vault credentials
          credential_type: vault-custom
          organization: stuttgart-things
          state: present
          inputs:
            vault_url: "{{ lookup('env', 'VAULT_ADDR') }}"
            vault_approle_id: "{{ lookup('env', 'VAULT_ROLE_ID') }}"
            vault_approle_secret: "{{ lookup('env', 'VAULT_SECRET_ID') }}"

  - name: ee-sthings
    file: |
      ---
      execution_environment:
        sthings-ee:
          name: sthings-ee
          image: scr.cd43.sthings-pve.labul.sva.de/ansible-ee/ee:v4
          pull: always
          credential: sthings-registry

  - name: schedule-baseos
    file: |
      ---
      start_date: "2024-06-30"
      cron_time: "05:00:00"
      frequency_rule: "day"
      interval_rule: 1
      target_host: localhost

      scheduler:
        schedule_base_os:
          name: schedule-base-os
          state: present
          unified_job_template: "baseos"
          job_type: "run"
          extra_data:
            target_host: "{{ target_host }}"
            manage_filesystem: "true"
            update_packages: "true"
            install_requirements: "true"
            install_motd: "true"
            reboot_all: "false"
            username: "sthings"
            lvm_home_sizing: "15%"
            lvm_root_sizing: "35%"
            lvm_var_sizing: "50%"
            send_to_msteams: "true"
            msteams_webhook_url: "https://365sva.webhook.office.com/webhookb2/2f14a9f8-4736-46dd-9c8c-31547ec37180@0a65cb1e-37d5-41ff-980a-647d9d0e4f0b/IncomingWebhook/37a805a0a2624dc2ac1aedd7dec6ad49/dc3a27ed-396c-40b7-a9b2-f1a2b6b44efe"

      rrules:
        - frequency: '{{ frequency_rule }}'
          interval: "{{ interval_rule }}"
        - frequency: 'day'
          interval: 1
          byweekday: [ 'saturday', 'sunday' ]
          include: False

  - name: awx-local-env
    file: |
      ---
      controller_host: "{{ lookup('env', 'CONTROLLER_HOST') }}"
      controller_username: "{{ lookup('env', 'CONTROLLER_USERNAME') }}"
      controller_password: "{{ lookup('env', 'CONTROLLER_PASSWORD') }}"
      vault_approle_id: "{{ lookup('env', 'VAULT_ROLE_ID') }}"
      vault_approle_secret: "{{ lookup('env', 'VAULT_SECRET_ID') }}"
      vault_url: "{{ lookup('env', 'VAULT_ADDR') }}"
