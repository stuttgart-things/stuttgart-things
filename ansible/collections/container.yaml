---
name: container
version: 0.0.23
namespace: sthings
requirements: |
  roles:
    - src: https://github.com/stuttgart-things/install-configure-docker.git
      scm: git
      version: 2024.04.30
    - src: https://github.com/stuttgart-things/install-configure-podman.git
      scm: git
      version: 2024.05.08
    - src: https://github.com/stuttgart-things/install-requirements.git
      scm: git
      version: 2024.05.11
    - src: https://github.com/stuttgart-things/install-configure-vault.git
      scm: git
      version: 2022.01.01
    - src: https://github.com/stuttgart-things/create-send-webhook.git
      scm: git
      version: 2022.01.01
    - src: https://github.com/stuttgart-things/download-install-binary.git
      scm: git
      version: 2024.05.24

playbooks:
  - name: rancher_kubeconfig
    play: |
      ---
      - hosts: "{{ target_host | default('localhost') }}"
        become: false
        gather_facts: false

        vars:
          vault_approle_id: "{{ lookup('env', 'VAULT_ROLE_ID') }}"
          vault_approle_secret: "{{ lookup('env', 'VAULT_SECRET_ID') }}"
          vault_url: "{{ lookup('env', 'VAULT_ADDR') }}"

          rancher_api_secret_path: apps/data/rancher:apiUrl
          rancher_api_accesskey_path: apps/data/rancher:accessKey
          rancher_api_secretkey_path: apps/data/rancher:secretKey
          rancher_api_url: "{{ lookup('community.hashi_vault.hashi_vault', 'secret={{ rancher_api_secret_path }} validate_certs=false auth_method=approle role_id={{ vault_approle_id }} secret_id={{ vault_approle_secret }} url={{ vault_url }}') }}"
          rancher_access_key: "{{ lookup('community.hashi_vault.hashi_vault', 'secret={{ rancher_api_accesskey_path }} validate_certs=false auth_method=approle role_id={{ vault_approle_id }} secret_id={{ vault_approle_secret }} url={{ vault_url }}') }}"
          rancher_secret_key: "{{ lookup('community.hashi_vault.hashi_vault', 'secret={{ rancher_api_secretkey_path }} validate_certs=false auth_method=approle role_id={{ vault_approle_id }} secret_id={{ vault_approle_secret }} url={{ vault_url }}') }}"
          secret_path_kubeconfig: kubeconfigs

          upload_vault: true
          check_kubeconfig: true
          # cluster_name: app-dev-master
          kubeconfig_destination: "/tmp/kubeconfig-{{ cluster_name }}"

        tasks:
          - name: Get cluster information
            ansible.builtin.uri:
              validate_certs: false
              url: "{{ rancher_api_url }}/clusters?name={{ cluster_name }}"
              user: "{{ rancher_access_key }}"
              password: "{{ rancher_secret_key }}"
              body_format: json
              method: GET
              force_basic_auth: yes
              headers:
                Content-Type: "application/json"
            register: cluster_info

          - name: Show clusterid
            ansible.builtin.debug:
              var:
                cluster_info.json.data[0].id

          - name: Get kubeconfig
            ansible.builtin.uri:
              validate_certs: false
              url: "{{ rancher_api_url }}/clusters/{{ cluster_info.json.data[0].id }}?action=generateKubeconfig"
              user: "{{ rancher_access_key }}"
              password: "{{ rancher_secret_key }}"
              body_format: json
              method: POST
              force_basic_auth: yes
            register: kubeconfig

          - name: Store kubeconfig to disk
            ansible.builtin.copy:
              content: "{{ kubeconfig.json.config  }}"
              dest: "{{ kubeconfig_destination }}"

          - name: Test if kubeconfig is valid
            ansible.builtin.shell: |
              kubectl get nodes --kubeconfig {{ kubeconfig_destination }}
            register: cmd_result
            retries: 20
            delay: 30
            until: ("NotReady" not in cmd_result.stdout)
            when: check_kubeconfig|bool

          - name: Write kubeconfig to vault using key value V2 engine
            community.hashi_vault.vault_write:
              auth_method: approle
              url: "{{ vault_url }}"
              role_id: "{{ vault_approle_id }}"
              secret_id: "{{ vault_approle_secret }}"
              validate_certs: false
              path: "{{ secret_path_kubeconfig }}/data/{{ cluster_name }}"
              data:
                data:
                  kubeconfig: "{{ lookup('ansible.builtin.file', kubeconfig_destination)|b64encode }}"
            delegate_to: localhost
            when: upload_vault|bool

  - name: podman
    play: |
      ---
      - hosts: "{{ target_host | default('all') }}"
        become: true

        roles:
          - role: sthings.container.install_configure_podman

  - name: docker
    play: |
      ---
      - hosts: "{{ target_host | default('all') }}"
        become: true
        vars:
          docker_install_compose: true
          install_kind: false
          #kind_version: 0.23.0
          #kubectl_version: 1.30.1

        roles:
          - role: sthings.container.install_configure_docker

  - name: nerdctl
    play: |
      ---
      - hosts: "{{ target_host | default('all') }}"
        become: true
        vars:
          bin:
            nerdctl:
              bin_name: "nerdctl"
              bin_version: "1.7.6"
              check_bin_version_before_installing: true
              source_url: "https://github.com/containerd/nerdctl/releases/download/v1.7.6/nerdctl-full-1.7.6-linux-amd64.tar.gz"
              bin_to_copy: "."
              bin_dir: "/usr/local"
              to_remove: "*"
              version_cmd: " version"
              target_version: v1.7.6
              md5_checksum: "044b60cec5341a3cde7a091cc2f12aa7"

          systemd_services:
            - containerd
            - buildkit
        roles:
          - role: sthings.container.download_install_binary

        post_tasks:
          - name: Create a directory if it does not exist
            ansible.builtin.file:
              path: $HOME/bin
              state: directory
              mode: 0700

          - name: Copy nerdctl
            ansible.builtin.copy:
              src: "/usr/local/bin/nerdctl"
              dest: "/usr/local/bin"
              mode: 0755
              remote_src: true
              owner: root
            become: true

          - name: give root permissions to nerdctl + export path
            ansible.builtin.shell: |
              chmod +s /usr/local/bin/nerdctl
              export PATH=/usr/local/bin:$PATH

          - name: Put SELinux in permissive mode
            ansible.posix.selinux:
              policy: targeted
              state: permissive
            when: ansible_os_family == 'RedHat'

          - name: Enable systemd services
            ansible.builtin.systemd_service:
              name: "{{ item }}"
              enabled: true
              daemon_reload: true
              state: started
            become: true
            with_items:
              - "{{ systemd_services }}"

          - name: Put SELinux in enforcing mode
            ansible.posix.selinux:
              policy: targeted
              state: enforcing
            when: ansible_os_family == 'RedHat'

  - name: tools
    play: |
      ---
      - hosts: "{{ target_host | default('all') }}"
        become: true
        vars:
          download_dir: "/tmp/downloads"

        vars_files:
          - "{{ profile | default('tools') }}.yaml"

        roles:
          - role: sthings.container.download_install_binary

vars:
  - name: tools
    file: |
      ---
      bin:
        ko:
          bin_name: ko
          bin_version: v0.15.2
          check_bin_version_before_installing: true
          source_url: "https://github.com/ko-build/ko/releases/download/v0.15.2/ko_Linux_x86_64.tar.gz"
          bin_to_copy: ko
          to_remove: ""
          bin_dir: "/usr/bin/ko"
          version_cmd: "version"
          target_version: v0.15.2
        kind:
          bin_name: kind
          bin_version: v0.23.0
          check_bin_version_before_installing: true
          source_url: "https://github.com/kubernetes-sigs/kind/releases/download/v0.23.0/kind-linux-amd64"
          bin_to_copy: kind-linux-amd64
          to_remove: ""
          bin_dir: "/usr/bin/kind"
          version_cmd: "version"
          target_version: v0.23.0
        skopeo:
          bin_name: skopeo
          bin_version: v1.14.4
          check_bin_version_before_installing: true
          source_url: "https://github.com/lework/skopeo-binary/releases/download/v1.14.4/skopeo-linux-amd64"
          bin_to_copy: skopeo-linux-amd64
          to_remove: ""
          bin_dir: "/usr/bin/skopeo"
          version_cmd: "version"
          target_version: v1.14.4
        helm:
          bin_name: "helm"
          bin_version: "3.15.1"
          check_bin_version_before_installing: true
          source_url: "https://get.helm.sh/helm-v3.15.0-linux-amd64.tar.gz"
          bin_to_copy: "linux-amd64/helm"
          to_remove: "linux-amd64"
          bin_dir: "/usr/local/bin"
          version_cmd: " version"
          target_version: v3.15.0
        kubectl:
          bin_name: "kubectl"
          bin_version: "1.30.1"
          check_bin_version_before_installing: true
          source_url: "https://dl.k8s.io/v1.30.1/bin/linux/amd64/kubectl"
          bin_to_copy: "kubectl"
          to_remove: "kubectl"
          bin_dir: "/usr/local/bin"
          version_cmd: " version --client"
          target_version: v1.30.1
        k9s:
          bin_name: "k9s"
          bin_version: "0.32.4"
          check_bin_version_before_installing: true
          source_url: "https://github.com/derailed/k9s/releases/download/v0.32.4/k9s_Linux_amd64.tar.gz"
          bin_to_copy: "k9s"
          to_remove: "k9s"
          bin_dir: "/usr/local/bin"
          version_cmd: " version --short"
          target_version: v0.32.4
        velero:
          bin_name: velero
          bin_version: 1.13.2
          check_bin_version_before_installing: true
          source_url: "https://github.com/vmware-tanzu/velero/releases/download/v1.13.2/velero-v1.13.2-linux-amd64.tar.gz"
          bin_to_copy: "velero-v1.13.2-linux-amd64/velero"
          to_remove: "velero-v1.13.2-linux-amd64"
          bin_dir: "/usr/local/bin"
          version_cmd: " version --client-only"
          target_version: v1.13.2
        kubectl_slice:
          bin_name: kubectl-slice
          bin_version: v1.2.9
          check_bin_version_before_installing: true
          source_url: "https://github.com/patrickdappollonio/kubectl-slice/releases/download/v1.2.9/kubectl-slice_linux_x86_64.tar.gz"
          bin_to_copy: kubectl-slice
          to_remove: kubectl-slice
          bin_dir: "/usr/bin"
          version_cmd: " --version"
          target_version: v1.2.9
        helmfile:
          bin_name: helmfile
          bin_version: v0.165.0
          check_bin_version_before_installing: true
          source_url: "https://github.com/helmfile/helmfile/releases/download/v0.165.0/helmfile_0.165.0_linux_amd64.tar.gz"
          bin_to_copy: helmfile
          to_remove: helmfile
          bin_dir: "/usr/bin"
          version_cmd: " --version"
          target_version: v0.165.0
