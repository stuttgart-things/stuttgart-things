---
name: deploy_rke
version: 1.28.10
namespace: sthings
requirements: |
  roles:
    - src: https://github.com/stuttgart-things/deploy-configure-rke.git
      scm: git
      version: main
    - src: https://github.com/stuttgart-things/configure-rke-node.git
      scm: git
      version: main
    - src: https://github.com/stuttgart-things/install-requirements.git
      scm: git
      version: 2024.05.11
    - src: https://github.com/stuttgart-things/download-install-binary.git
      scm: git
      version: 2024.05.24
    - src: https://github.com/stuttgart-things/create-os-user.git
      scm: git
      version: 2024.04.25
    - src: https://github.com/stuttgart-things/install-configure-docker.git
      scm: git
      version: 2024.04.30

playbooks:
  - name: rke2
    play: |
      - hosts: all
        become: true
        vars:
          rke_version: 2
          rke2_k8s_version: 1.29.4
          rke2_airgapped_installation: true
          rke2_release_kind: rke2r1
          disable_rke2_components:
            - rke2-ingress-nginx
            - rke-snapshot-controller
          cluster_setup: multinode

        roles:
          - role: sthings.deploy_rke.deploy_configure_rke

  - name: rke1
    play: |
      - hosts: all
        become: true
        vars:
          rke_docker_version: '=5:23.0.6-1~ubuntu.22.04~jammy'
          rke_docker_ce_version: '5:23.0.6*'
          rke_version: 1
          rke_user_name: rke
          rke_installer_version: 1.4.8
          rke_kubernetes_version: v1.26.7-rancher1-1
          project_folder: rancher-things
          rke_create_rke_user: true
          network_plugin: calico
          rke2_airgapped_installation: false

        roles:
          - role: sthings.deploy_rke.deploy_configure_rke

  - name: deploy-to-k8s
    play: |
      ---
      - hosts: "{{ target_host | default('localhost') }}"
        vars_files:
          - "{{ path | default('.') }}/{{ profile }}.yaml"
          - "{{ extra_file | default(omit) }}"
        #path_to_kubeconfig: ~/.kube/rancher

        tasks:
          - name: Create pre manifests
            ansible.builtin.include_tasks: manifests.yaml
            loop: "{{ q('ansible.builtin.dict', pre_manifests) }}"
            when: pre_manifests is defined

          - name: Configure and (un)install helm charts
            block:
              - name: Install helm requirements
                ansible.builtin.include_tasks: helm-config.yaml

              - name: Deploy helm chart(s)
                ansible.builtin.include_tasks: helm.yaml
                loop: "{{ q('ansible.builtin.dict', helm_releases) }}"
            when: helm_releases is defined

          - name: Create post manifests
            ansible.builtin.include_tasks: manifests.yaml
            loop: "{{ q('ansible.builtin.dict', post_manifests) }}"

  - name: helm-config
    play: |
      ---
      - name: Add helm chart repositories
        kubernetes.core.helm_repository:
          name: "{{ item.key }}"
          repo_url: "{{ item.value.url }}"
          force_update: true
        loop: "{{ q('ansible.builtin.dict', helm_repositories) }}"
        when: helm_repositories is defined and state == "present"

      - name: Install Helm Diff
        kubernetes.core.helm_plugin:
          plugin_path: "https://github.com/databus23/helm-diff"
          state: present
        when: state == "present"

  - name: helm
    play: |
      ---
      - name: Create values on disk
        ansible.builtin.copy:
          content: "{{ item.value.release_values }}" #().0
          dest: "/tmp/{{ item.key }}-values.yaml.j2"
        when: state == "present" and item.value.values is defined

      - name: Deploy helm charts
        kubernetes.core.helm:
          kubeconfig: "{{ path_to_kubeconfig }}"
          name: "{{ item.key }}"
          chart_ref: "{{ item.value.ref }}"
          chart_version: "{{ item.value.version | default('latest') }}"
          release_namespace: "{{ item.value.namespace }}"
          create_namespace: true
          state: "{{ state | default('present') }}"
          values: "{{ lookup('template', '/tmp/{{ item.key }}-values.yaml.j2') | from_yaml | default(omit) }}"
          wait: "{{ item.values.wait | default(omit) }}"
        when: helm_releases is defined
        ignore_errors: "{{ item.value.ignore | default(omit) }}"

      - name: Wait until pods are running
        kubernetes.core.k8s_info:
          kubeconfig: "{{ path_to_kubeconfig }}"
          api_version: v1
          kind: Pod
          namespace: "{{ item.value.namespace }}"
          wait_sleep: 30
          wait_timeout: 360
        register: pod_list
        retries: 10
        delay: 30
        until: pod_list|json_query('resources[*].status.phase')|unique == ["Running"]
        when: state == "present" and item.value.values is defined

  - name: manifests
    play: |
      ---
      - name: Create template on disk
        ansible.builtin.copy:
          content: "{{ item.value }}"
          dest: "/tmp/{{ item.key }}.yaml.j2"
        when: state == "present"

      - name: Deploy additional manifests
        kubernetes.core.k8s:
          kubeconfig: "{{ path_to_kubeconfig }}"
          state: "{{ state | default('present') }}"
          definition: "{{ lookup('template', '/tmp/{{ item.key }}.yaml.j2') | from_yaml }}"

  - name: api_token
    play: |
      ---
      - hosts: "{{ target_host | default('localhost') }}"
        vars:
          token_name: admin
          token_description: admin token
          token_ttl: 0
          state: present
          output_token_creds: true

          manifests:
            token: |
              {
                "apiVersion": "management.cattle.io/v3",
                "authProvider": "local",
                "current": false,
                "description": "{{ token_description }}",
                "expired": false,
                "expiresAt": "",
                "isDerived": true,
                "kind": "Token",
                "metadata": {
                  "labels": {
                    "authn.management.cattle.io/token-userId": "{{ token_user_id }}",
                    "cattle.io/creator": "kubectl"
                  },
                  "name": "{{ token_name }}"
                },
                "token": "{{ token_password }}",
                "ttl": {{ token_ttl }},
                "userId": "{{ token_user_id }}"
              }

        pre_tasks:
          - name: set user password
            ansible.builtin.set_fact:
              token_password: "{{ lookup('community.general.random_string', length=16, special=false) }}"
            when: token_password is not defined

          - name: Get admin user id
            block:
              - name: Get admin user
                kubernetes.core.k8s_info:
                  api_version: management.cattle.io/v3
                  kind: users
                  namespace: cattle-system
                  kubeconfig: "{{ path_to_kubeconfig }}"
                  label_selectors:
                    - authz.management.cattle.io/bootstrapping = admin-user
                register: web_service

              - name: output
                ansible.builtin.debug:
                  var: web_service.resources[0].metadata.name

              - name: set userid
                ansible.builtin.set_fact:
                  token_user_id: "{{ web_service.resources[0].metadata.name }}"
            when: token_user_id is not defined

        tasks:
          - name: Create api token
            ansible.builtin.include_tasks: manifests.yaml
            loop: "{{ q('ansible.builtin.dict', manifests) }}"
            when: manifests is defined

        post_tasks:
          - name: Output credentials
            ansible.builtin.debug:
              var: token_password

          - name: Output credentials
            ansible.builtin.debug:
              msg: "token {{ token_name }} created w/ password {{ token_password }}. Bearer is {{ token_name }}:{{ token_password }}"

  - name: deploy_downstream_cluster
    play: |
      ---
      - hosts: "{{ target_host | default('localhost') }}"
        vars:
          defaults_file: downstream-defaults
        vars_files:
          - "{{ path | default('.') }}/{{ defaults_file }}.yaml"

        tasks:
          - name: Create cluster on rancher
            kubernetes.core.k8s:
              kubeconfig: "{{ path_to_kubeconfig }}"
              state: "{{ state | default('present') }}"
              definition: "{{ lookup('template', '{{ cluster_template }}.yaml') | from_yaml }}"
            when: state == "present"

      - hosts: "{{ target_host | default('all') }}"
        become: true
        vars:
          defaults_file: downstream-defaults
          rancher_api_url: "https://rancher-things.demo-rancher.sthings-vsphere.labul.sva.de/v3"
          rancher_access_key: "admin"
          rancher_secret_key: ""

        vars_files:
          - "{{ path | default('.') }}/{{ defaults_file }}.yaml"

        tasks:
          - debug:
              var: rancher_cluster_cmd

          - name: Get cluster information
            ansible.builtin.uri:
              validate_certs: false
              url: "{{ rancher_api_url }}/clusters?name={{ cluster_name }}"
              user: "{{ rancher_access_key }}"
              password: "{{ rancher_secret_key }}"
              body_format: json
              method: GET
              force_basic_auth: yes
              headers:
                Content-Type: "application/json"
            register: cluster_info

          - name: Show clusterid
            ansible.builtin.debug:
              var:
                cluster_info.json.data[0].id

          - name: Set clusterid
            ansible.builtin.set_fact:
              cluster_id: "{{ cluster_info.json.data[0].id }}"

          - name: Get cluster registration tokens
            ansible.builtin.uri:
              validate_certs: false
              url: "{{ rancher_api_url }}/clusters/{{ cluster_id }}/clusterregistrationtokens?sort=insecureCommand"
              user: "{{ rancher_access_key }}"
              password: "{{ rancher_secret_key }}"
              body_format: json
              method: GET
              force_basic_auth: yes
              headers:
                  Content-Type: "application/json"
            register: cluster_registration_tokens

          - name: Create Cluster w/ node command
            ansible.builtin.shell: |
              {{ cluster_registration_tokens.json.data[0].nodeCommand }} {{ rancher_cluster_cmd }}

  - name: keycloak_oidc_config
    play: |
      ---
      - hosts: localhost
        vars:
          idp:
            hostname: "dev17.labul.sva.de:8080"
            realm:
              name: "master"

          admin_password: "admin"
          rancher_client_secret: "Atlan7island8sailor9"
          rancher_api_token: token-98src:mkxfj52dhr495tw5g8hw5rblpbxr5lsbw5k2ldc2d24fpksc2jnwlk
          rancher_access_key: token-98src
          rancher_secret_key: mkxfj52dhr495tw5g8hw5rblpbxr5lsbw5k2ldc2d24fpksc2jnwlk

        tasks:
          - name: Create Rancher Client
            community.general.keycloak_client:
              auth_keycloak_url: http://{{ idp.hostname }}
              auth_realm: "master"
              auth_username: "admin"
              auth_password: "{{ admin_password }}"
              state: present
              realm: "{{ idp.realm.name }}"
              client_id: "rancher"
              name: "rancher"
              description: "Client used by Rancher for OIDC authentication"
              protocol: "openid-connect"
              enabled: true
              public_client: false
              client_authenticator_type: client-secret
              secret: "{{ rancher_client_secret }}"
              web_origins:
                - "https://rancher-things.demo.sthings-vsphere.labul.sva.de/*"
              redirect_uris:
                - "https://rancher-things.demo.sthings-vsphere.labul.sva.de/verify-auth"
              protocol_mappers:
                - name: "Groups Mapper"
                  protocol: "openid-connect"
                  protocolMapper: "oidc-group-membership-mapper"
                  config:
                    claim.name: "groups"
                    id.token.claim: false
                    access.token.claim: false
                    userinfo.token.claim: true
                - name: "Client Audience"
                  protocol: "openid-connect"
                  protocolMapper: "oidc-audience-mapper"
                  config:
                    included.client.audience: "rancher"
                    id.token.claim: false
                    access.token.claim: true
                    userinfo.token.claim: false
                - name: "Groups Path"
                  protocol: "openid-connect"
                  protocolMapper: "oidc-group-membership-mapper"
                  config:
                    claim.name: "full_group_path"
                    full.path: true
                    id.token.claim: false
                    access.token.claim: false
                    userinfo.token.claim: true

          - name: Test and Apply Rancher Keycloak OIDC Config
            uri:
              url: "https://rancher-things.demo.sthings-vsphere.labul.sva.de/v3/keyCloakOIDCConfigs/keycloakoidc"
              user: "{{ rancher_access_key }}"
              password: "{{ rancher_secret_key }}"
              method: PUT
              validate_certs: no
              headers:
                Authorization: "Bearer {{ rancher_api_token }}"
              body:
                type: "keyCloakOIDCConfig"
                name: "keycloakoidc"
                clientId: "rancher"
                clientSecret: "{{ rancher_client_secret }}"
                issuer: "http://{{ idp.hostname }}/realms/{{ idp.realm.name }}"
                authEndpoint: 'http://{{ idp.hostname }}/realms/{{ idp.realm.name }}/protocol/openid-connect/auth'
                rancherUrl: "https://rancher-things.demo.sthings-vsphere.labul.sva.de/verify-auth"
                enabled: true
                scope: "rancher"
                groupSearchEnabled: true
                allowedPrincipalIds: [ "keycloakoidc_group://rancher" ]
                accessMode: "required"
              body_format: json
              status_code: 200

vars:
  - name: downstream_defaults.yaml
    file: |
      ---
      cni: cilium
      cluster_description: "{{ cluster_name }}"
      kubernetes_version: v1.28.10+rke2r1
      cluster_template: cluster
      state: present
      role_cmd:
        worker: "--worker"
        master: "--etcd --controlplane"
        all: "--etcd --controlplane --worker"

  - name: ingress-nginx
    file: |
      ---
      helm_repositories:
        ingress-nginx:
          url: https://kubernetes.github.io/ingress-nginx

      helm_releases:
        ingress-nginx:
          ref: ingress-nginx/ingress-nginx
          version: 4.10.1
          namespace: ingress-nginx
          ignore: false
          wait: true
          release_values: {}

  - name: metallb
    file: |
      ---
      name_ip_pool: ip-pool
      namespace: metallb-system
      ip_range: 10.31.102.112-10.31.102.112

      helm_repositories:
        bitnami:
          url: https://charts.bitnami.com/bitnami

      helm_releases:
        metallb:
          ref: bitnami/metallb
          version: 6.1.4
          namespace: "{{ namespace }}"
          ignore: true
          wait: true
          release_values: {}

      post_manifests:
        ip_pool: |
          apiVersion: metallb.io/v1beta1
          kind: IPAddressPool
          metadata:
            name: {{ name_ip_pool | default('ip-pool') }}
            namespace: {{ namespace }}
            labels:
              app: metallb
          spec:
            addresses:
              - {{ ip_range }}
        poolAdvertisement: |
          apiVersion: metallb.io/v1beta1
          kind: L2Advertisement
          metadata:
            name: pool-advertisement
            namespace: {{ namespace }}
            labels:
              app: metallb
          spec:
            ipAddressPools:
              - {{ name_ip_pool | default('ip-pool') }}

  - name: rancher
    file: |
      ---
      namespace: cattle-system
      helm_repositories:
        rancher-stable:
          url: https://releases.rancher.com/server-charts/latest

      pre_manifests:
        namespace: |
          apiVersion: v1
          kind: Namespace
          metadata:
            name: {{ namespace }}

        certificate: |
          apiVersion: cert-manager.io/v1
          kind: Certificate
          metadata:
            name: {{ hostname }}-ingress
            namespace: {{ namespace }}
          spec:
            commonName: {{ hostname }}.{{ domain }}
            dnsNames:
              - {{ hostname }}.{{ domain }}
            issuerRef:
              name: cluster-issuer-approle
              kind: ClusterIssuer
            secretName: {{ hostname }}-tls

        tls_secret: |
          apiVersion: v1
          kind: Secret
          metadata:
            name: tls-ca
            namespace: {{ namespace }}
          data:
            cacerts.pem: {{ ca_certs }}

      helm_releases:
        rancher:
          ref: rancher-stable/rancher
          version: 2.8.5
          namespace: "{{ namespace }}"
          ignore: false
          wait: true
          release_values: |
            ---
            global:
              cattle:
                psp:
                  enabled: false
            bootstrapPassword: {{ password }}
            hostname: {{ hostname }}.{{ domain }}
            privateCA: true
            ingress:
              enabled: true
              ingressClassName: nginx
              servicePort: 80
              tls:
                source: secret
                secretName: {{ hostname }}-tls

  - name: cert-manager
    file: |
      ---
      namespace: cert-manager
      helm_repositories:
        cert-manager:
          url: https://charts.jetstack.io

      helm_releases:
        cert-manager:
          ref: cert-manager/cert-manager
          version: v1.14.4
          namespace: "{{ namespace }}"
          ignore: false
          wait: true
          release_values: |
            installCRDs: true

      post_manifests:
        secret_approle: |
          apiVersion: v1
          kind: Secret
          metadata:
            name: {{ vault_secret }}
            namespace: {{ namespace }}
          data:
            approle: {{ approle_secret }}

        cluster_issuer: |
          apiVersion: cert-manager.io/v1
          kind: ClusterIssuer
          metadata:
            name: {{ name_cluster_issuer }}
            namespace: {{ namespace }}
          spec:
            vault:
              path: {{ pki_path }}
              server: {{ vault_server }}
              caBundle: {{ ca_bundle }}
              auth:
                appRole:
                  path: approle
                  roleId: {{ approle_id }}
                  secretRef:
                    name: {{ vault_secret }}
                    key: approle

templates:
  - name: cluster
    file: |
      apiVersion: provisioning.cattle.io/v1
      kind: Cluster
      metadata:
        name: {{ cluster_name }}
        annotations:
          field.cattle.io/description: {{ cluster_description }}
        labels:
          {}
        namespace: fleet-default
      spec:
        clusterAgentDeploymentCustomization:
          appendTolerations:
      #      - effect: string
      #        key: string
      #        operator: string
      #        tolerationSeconds: int
      #        value: string
          overrideAffinity:
      #      nodeAffinity:
      #        preferredDuringSchedulingIgnoredDuringExecution:
      #          - preference:
      #              matchExpressions:
      #                - key: string
      #                  operator: string
      #                  values:
      #                    - string
      #              matchFields:
      #                - key: string
      #                  operator: string
      #                  values:
      #                    - string
      #            weight: int
      #        requiredDuringSchedulingIgnoredDuringExecution:
      #          nodeSelectorTerms:
      #            - matchExpressions:
      #                - key: string
      #                  operator: string
      #                  values:
      #                    - string
      #              matchFields:
      #                - key: string
      #                  operator: string
      #                  values:
      #                    - string
      #      podAffinity:
      #        preferredDuringSchedulingIgnoredDuringExecution:
      #          - podAffinityTerm:
      #              labelSelector:
      #                matchExpressions:
      #                  - key: string
      #                    operator: string
      #                    values:
      #                      - string
      #                matchLabels:  key: string
      #              namespaceSelector:
      #                matchExpressions:
      #                  - key: string
      #                    operator: string
      #                    values:
      #                      - string
      #                matchLabels:  key: string
      #              namespaces:
      #                - string
      #              topologyKey: string
      #            weight: int
      #        requiredDuringSchedulingIgnoredDuringExecution:
      #          - labelSelector:
      #              matchExpressions:
      #                - key: string
      #                  operator: string
      #                  values:
      #                    - string
      #              matchLabels:  key: string
      #            namespaceSelector:
      #              matchExpressions:
      #                - key: string
      #                  operator: string
      #                  values:
      #                    - string
      #              matchLabels:  key: string
      #            namespaces:
      #              - string
      #            topologyKey: string
      #      podAntiAffinity:
      #        preferredDuringSchedulingIgnoredDuringExecution:
      #          - podAffinityTerm:
      #              labelSelector:
      #                matchExpressions:
      #                  - key: string
      #                    operator: string
      #                    values:
      #                      - string
      #                matchLabels:  key: string
      #              namespaceSelector:
      #                matchExpressions:
      #                  - key: string
      #                    operator: string
      #                    values:
      #                      - string
      #                matchLabels:  key: string
      #              namespaces:
      #                - string
      #              topologyKey: string
      #            weight: int
      #        requiredDuringSchedulingIgnoredDuringExecution:
      #          - labelSelector:
      #              matchExpressions:
      #                - key: string
      #                  operator: string
      #                  values:
      #                    - string
      #              matchLabels:  key: string
      #            namespaceSelector:
      #              matchExpressions:
      #                - key: string
      #                  operator: string
      #                  values:
      #                    - string
      #              matchLabels:  key: string
      #            namespaces:
      #              - string
      #            topologyKey: string
          overrideResourceRequirements:
      #      claims:
      #        - name: string
      #      limits:  key: string
      #      requests:  key: string
        defaultPodSecurityAdmissionConfigurationTemplateName: ''
        defaultPodSecurityPolicyTemplateName: ''
        fleetAgentDeploymentCustomization:
          appendTolerations:
      #      - effect: string
      #        key: string
      #        operator: string
      #        tolerationSeconds: int
      #        value: string
          overrideAffinity:
      #      nodeAffinity:
      #        preferredDuringSchedulingIgnoredDuringExecution:
      #          - preference:
      #              matchExpressions:
      #                - key: string
      #                  operator: string
      #                  values:
      #                    - string
      #              matchFields:
      #                - key: string
      #                  operator: string
      #                  values:
      #                    - string
      #            weight: int
      #        requiredDuringSchedulingIgnoredDuringExecution:
      #          nodeSelectorTerms:
      #            - matchExpressions:
      #                - key: string
      #                  operator: string
      #                  values:
      #                    - string
      #              matchFields:
      #                - key: string
      #                  operator: string
      #                  values:
      #                    - string
      #      podAffinity:
      #        preferredDuringSchedulingIgnoredDuringExecution:
      #          - podAffinityTerm:
      #              labelSelector:
      #                matchExpressions:
      #                  - key: string
      #                    operator: string
      #                    values:
      #                      - string
      #                matchLabels:  key: string
      #              namespaceSelector:
      #                matchExpressions:
      #                  - key: string
      #                    operator: string
      #                    values:
      #                      - string
      #                matchLabels:  key: string
      #              namespaces:
      #                - string
      #              topologyKey: string
      #            weight: int
      #        requiredDuringSchedulingIgnoredDuringExecution:
      #          - labelSelector:
      #              matchExpressions:
      #                - key: string
      #                  operator: string
      #                  values:
      #                    - string
      #              matchLabels:  key: string
      #            namespaceSelector:
      #              matchExpressions:
      #                - key: string
      #                  operator: string
      #                  values:
      #                    - string
      #              matchLabels:  key: string
      #            namespaces:
      #              - string
      #            topologyKey: string
      #      podAntiAffinity:
      #        preferredDuringSchedulingIgnoredDuringExecution:
      #          - podAffinityTerm:
      #              labelSelector:
      #                matchExpressions:
      #                  - key: string
      #                    operator: string
      #                    values:
      #                      - string
      #                matchLabels:  key: string
      #              namespaceSelector:
      #                matchExpressions:
      #                  - key: string
      #                    operator: string
      #                    values:
      #                      - string
      #                matchLabels:  key: string
      #              namespaces:
      #                - string
      #              topologyKey: string
      #            weight: int
      #        requiredDuringSchedulingIgnoredDuringExecution:
      #          - labelSelector:
      #              matchExpressions:
      #                - key: string
      #                  operator: string
      #                  values:
      #                    - string
      #              matchLabels:  key: string
      #            namespaceSelector:
      #              matchExpressions:
      #                - key: string
      #                  operator: string
      #                  values:
      #                    - string
      #              matchLabels:  key: string
      #            namespaces:
      #              - string
      #            topologyKey: string
          overrideResourceRequirements:
      #      claims:
      #        - name: string
      #      limits:  key: string
      #      requests:  key: string
        kubernetesVersion: {{ kubernetes_version }}
        localClusterAuthEndpoint:
          caCerts: ''
          enabled: false
          fqdn: ''
        rkeConfig:
          chartValues:
            rke2-{{ cni }}: {}
          etcd:
            disableSnapshots: false
            s3:
      #        bucket: string
      #        cloudCredentialName: string
      #        endpoint: string
      #        endpointCA: string
      #        folder: string
      #        region: string
      #        skipSSLVerify: boolean
            snapshotRetention: 5
            snapshotScheduleCron: 0 */5 * * *
          machineGlobalConfig:
            cni: {{ cni }}
            disable-kube-proxy: false
            etcd-expose-metrics: false
            profile: null
          machinePools:
      #      - cloudCredentialSecretName: string
      #        controlPlaneRole: boolean
      #        displayName: string
      #        drainBeforeDelete: boolean
      #        drainBeforeDeleteTimeout: string
      #        dynamicSchemaSpec: string
      #        etcdRole: boolean
      #        hostnameLengthLimit: int
      #        labels:  key: string
      #        machineConfigRef:
      #          apiVersion: string
      #          fieldPath: string
      #          kind: string
      #          name: string
      #          namespace: string
      #          resourceVersion: string
      #          uid: string
      #        machineDeploymentAnnotations:  key: string
      #        machineDeploymentLabels:  key: string
      #        machineOS: string
      #        maxUnhealthy: string
      #        name: string
      #        nodeStartupTimeout: string
      #        paused: boolean
      #        quantity: int
      #        rollingUpdate:
      #          maxSurge: json
      #          maxUnavailable: json
      #        taints:
      #          - effect: string
      #            key: string
      #            timeAdded: string
      #            value: string
      #        unhealthyNodeTimeout: string
      #        unhealthyRange: string
      #        workerRole: boolean
          machineSelectorConfig:
            - config:
                protect-kernel-defaults: false
      #      - config:
      #
      #        machineLabelSelector:
      #          matchExpressions:
      #            - key: string
      #              operator: string
      #              values:
      #                - string
      #          matchLabels:  key: string
          registries:
            configs:
              {}
              #  authConfigSecretName: string
      #        caBundle: string
      #        insecureSkipVerify: boolean
      #        tlsSecretName: string
            mirrors:
              {}
              #  endpoint:
      #          - string
      #        rewrite:  key: string
          upgradeStrategy:
            controlPlaneConcurrency: '1'
            controlPlaneDrainOptions:
              deleteEmptyDirData: true
              disableEviction: false
              enabled: false
              force: false
              gracePeriod: -1
              ignoreDaemonSets: true
              skipWaitForDeleteTimeoutSeconds: 0
              timeout: 120
      #        ignoreErrors: boolean
      #        postDrainHooks:
      #          - annotation: string
      #        preDrainHooks:
      #          - annotation: string
            workerConcurrency: '1'
            workerDrainOptions:
              deleteEmptyDirData: true
              disableEviction: false
              enabled: false
              force: false
              gracePeriod: -1
              ignoreDaemonSets: true
              skipWaitForDeleteTimeoutSeconds: 0
              timeout: 120
      #        ignoreErrors: boolean
      #        postDrainHooks:
      #          - annotation: string
      #        preDrainHooks:
      #          - annotation: string
      #    additionalManifest: string
      #    etcdSnapshotCreate:
      #      generation: int
      #    etcdSnapshotRestore:
      #      generation: int
      #      name: string
      #      restoreRKEConfig: string
      #    infrastructureRef:
      #      apiVersion: string
      #      fieldPath: string
      #      kind: string
      #      name: string
      #      namespace: string
      #      resourceVersion: string
      #      uid: string
      #    machinePoolDefaults:
      #      hostnameLengthLimit: int
      #    machineSelectorFiles:
      #      - fileSources:
      #          - configMap:
      #              defaultPermissions: string
      #              items:
      #                - dynamic: boolean
      #                  hash: string
      #                  key: string
      #                  path: string
      #                  permissions: string
      #              name: string
      #            secret:
      #              defaultPermissions: string
      #              items:
      #                - dynamic: boolean
      #                  hash: string
      #                  key: string
      #                  path: string
      #                  permissions: string
      #              name: string
      #        machineLabelSelector:
      #          matchExpressions:
      #            - key: string
      #              operator: string
      #              values:
      #                - string
      #          matchLabels:  key: string
      #    networking:
      #      stackPreference: string
      #    provisionGeneration: int
      #    rotateCertificates:
      #      generation: int
      #      services:
      #        - string
      #    rotateEncryptionKeys:
      #      generation: int
        machineSelectorConfig:
          - config: {}
      #  agentEnvVars:
      #    - name: string
      #      value: string
      #  cloudCredentialSecretName: string
      #  clusterAPIConfig:
      #    clusterName: string
      #  defaultClusterRoleForProjectMembers: string
      #  enableNetworkPolicy: boolean
      #  redeploySystemAgentGeneration: int
      __clone: true
