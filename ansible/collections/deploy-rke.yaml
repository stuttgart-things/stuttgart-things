---
name: deploy_rke
version: 1.29.4-12
namespace: sthings
requirements: |
  roles:
    - src: https://github.com/stuttgart-things/deploy-configure-rke.git
      scm: git
      version: main
    - src: https://github.com/stuttgart-things/configure-rke-node.git
      scm: git
      version: main
    - src: https://github.com/stuttgart-things/install-requirements.git
      scm: git
      version: 2024.05.11
    - src: https://github.com/stuttgart-things/download-install-binary.git
      scm: git
      version: 2024.05.24
    - src: https://github.com/stuttgart-things/create-os-user.git
      scm: git
      version: 2024.04.25
    - src: https://github.com/stuttgart-things/install-configure-docker.git
      scm: git
      version: 2024.04.30

playbooks:
  - name: rke2
    play: |
      - hosts: all
        become: true
        vars:
          rke_version: 2
          rke2_k8s_version: 1.29.4
          rke2_airgapped_installation: true
          rke2_release_kind: rke2r1
          disable_rke2_components:
            - rke2-ingress-nginx
            - rke-snapshot-controller
          cluster_setup: multinode

        roles:
          - role: sthings.deploy_rke.deploy_configure_rke

  - name: rke1
    play: |
      - hosts: all
        become: true
        vars:
          rke_docker_version: '=5:23.0.6-1~ubuntu.22.04~jammy'
          rke_docker_ce_version: '5:23.0.6*'
          rke_version: 1
          rke_user_name: rke
          rke_installer_version: 1.4.8
          rke_kubernetes_version: v1.26.7-rancher1-1
          project_folder: rancher-things
          rke_create_rke_user: true
          network_plugin: calico
          rke2_airgapped_installation: false

        roles:
          - role: sthings.deploy_rke.deploy_configure_rke

  - name: deploy-to-k8s
    play: |
      ---
      - hosts: "{{ target_host | default('localhost') }}"
        vars_files:
          - "{{ path | default('.') }}/{{ profile }}.yaml"

        #path_to_kubeconfig: ~/.kube/rancher

        tasks:
          - name: Create pre manifests
            ansible.builtin.include_tasks: manifests.yaml
            loop: "{{ q('ansible.builtin.dict', pre_manifests) }}"
            when: pre_manifests is defined

          - name: Configure and (un)install helm charts
            block:
              - name: Install helm requirements
                ansible.builtin.include_tasks: helm-config.yaml

              - name: Deploy helm chart(s)
                ansible.builtin.include_tasks: helm.yaml
                loop: "{{ q('ansible.builtin.dict', helm_releases) }}"
            when: helm_releases is defined

          - name: Create post manifests
            ansible.builtin.include_tasks: manifests.yaml
            loop: "{{ q('ansible.builtin.dict', post_manifests) }}"
            when: post_manifests is defined

  - name: helm-config
    play: |
      ---
      - name: Add helm chart repositories
        kubernetes.core.helm_repository:
          name: "{{ item.key }}"
          repo_url: "{{ item.value.url }}"
          force_update: true
        loop: "{{ q('ansible.builtin.dict', helm_repositories) }}"
        when: helm_repositories is defined and state == "present"

      - name: Install Helm Diff
        kubernetes.core.helm_plugin:
          plugin_path: "https://github.com/databus23/helm-diff"
          state: present
        when: state == "present"

  - name: helm
    play: |
      ---
      - name: Create values on disk
        ansible.builtin.copy:
          content: "{{ item.value.release_values }}" #().0
          dest: "/tmp/{{ item.key }}-values.yaml.j2"
        when: state == "present" and item.value.values is defined

      - name: Deploy helm charts
        kubernetes.core.helm:
          kubeconfig: "{{ path_to_kubeconfig }}"
          name: "{{ item.key }}"
          chart_ref: "{{ item.value.ref }}"
          chart_version: "{{ item.value.version | default('latest') }}"
          release_namespace: "{{ item.value.namespace }}"
          create_namespace: true
          state: "{{ state | default('present') }}"
          values: "{{ lookup('template', '/tmp/{{ item.key }}-values.yaml.j2') | from_yaml | default(omit) }}"
          wait: "{{ item.values.wait | default(omit) }}"
        when: helm_releases is defined
        ignore_errors: "{{ item.value.ignore | default(omit) }}"

  - name: manifests
    play: |
      ---
      - name: Create template on disk
        ansible.builtin.copy:
          content: "{{ item.value }}"
          dest: "/tmp/{{ item.key }}.yaml.j2"
        when: state == "present"

      - name: Deploy additional manifests
        kubernetes.core.k8s:
          kubeconfig: "{{ path_to_kubeconfig }}"
          state: "{{ state | default('present') }}"
          definition: "{{ lookup('template', '/tmp/{{ item.key }}.yaml.j2') | from_yaml }}"

  - name: api-token
    play: |
      ---
      token_name: automation
      token_description: automation token
      token_password: lookup('community.general.random_string', length=12)
      token_user_id: test-user # kubectl get users -n cattle-system

      pre_manifests:
        token: |
          {
            "apiVersion": "management.cattle.io/v3",
            "authProvider": "local",
            "current": false,
            "description": "{{ token_description | default('automation token') }}",
            "expired": false,
            "expiresAt": "",
            "isDerived": true,
            "kind": "Token",
            "metadata": {
              "labels": {
                "authn.management.cattle.io/token-userId": "{{ token_user_id }}",
                "cattle.io/creator": "kubectl"
              },
              "name": "{{ token_name | default('automation') }}"
            },
            "token": "{{ token_password }}",
            "ttl": 0,
            "userId": "{{ token_user_id }}"
          }

  - name: deploy_downstream_cluster
    play: |
      ---
      - hosts: all
        become: true
        vars:
          rancher_api_secret_path: apps/data/rancher:apiUrl
          rancher_api_accesskey_path: apps/data/rancher:apiAccessKey
          rancher_api_secretkey_path: apps/data/rancher:apiSecretKey

          rancher_api_url: "{{ lookup('community.hashi_vault.hashi_vault', 'secret={{ rancher_api_secret_path }} validate_certs=false auth_method=approle role_id={{ vault_approle_id }} secret_id={{ vault_approle_secret }} url={{ vault_url }}') }}"
          rancher_access_key: "{{ lookup('community.hashi_vault.hashi_vault', 'secret={{ rancher_api_accesskey_path }} validate_certs=false auth_method=approle role_id={{ vault_approle_id }} secret_id={{ vault_approle_secret }} url={{ vault_url }}') }}"
          rancher_secret_key: "{{ lookup('community.hashi_vault.hashi_vault', 'secret={{ rancher_api_secretkey_path }} validate_certs=false auth_method=approle role_id={{ vault_approle_id }} secret_id={{ vault_approle_secret }} url={{ vault_url }}') }}"

          vault_approle_id: "{{ lookup('env', 'VAULT_ROLE_ID') }}"
          vault_approle_secret: "{{ lookup('env', 'VAULT_SECRET_ID') }}"
          vault_url: "{{ lookup('env', 'VAULT_ADDR') }}"
          role_cmd:
            worker: "--worker"
            master: "--etcd --controlplane"
            all: "--etcd --controlplane --worker"

        pre_tasks:
          - name: Include vars
            ansible.builtin.include_vars: "{{ path_to_vars_file }}.yaml"
            when: path_to_vars_file is defined

        tasks:
          - name: Set node role command
            set_fact:
              node_role: '{{ item.split(":")[1] }}'
            with_items:
              - "{{ roles.split(';') }}"
            when: inventory_hostname_short == item.split(":")[0]

          - name: Show node role
            ansible.builtin.debug:
              var: role_cmd[node_role]

          - name: Get cluster information
            ansible.builtin.uri:
              validate_certs: false
              url: "{{ rancher_api_url }}/clusters?name={{ cluster_name }}"
              user: "{{ rancher_access_key }}"
              password: "{{ rancher_secret_key }}"
              body_format: json
              method: GET
              force_basic_auth: yes
              headers:
                Content-Type: "application/json"
            register: cluster_info

          - name: Show clusterid
            ansible.builtin.debug:
              var:
                cluster_info.json.data[0].id

          - name: Set clusterid
            ansible.builtin.set_fact:
              cluster_id: "{{ cluster_info.json.data[0].id }}"

          - name: Get cluster registration tokens
            ansible.builtin.uri:
              validate_certs: false
              url: "{{ rancher_api_url }}/clusters/{{ cluster_id }}/clusterregistrationtokens?sort=insecureCommand"
              user: "{{ rancher_access_key }}"
              password: "{{ rancher_secret_key }}"
              body_format: json
              method: GET
              force_basic_auth: yes
              headers:
                  Content-Type: "application/json"
            register: cluster_registration_tokens

          - name: Create Cluster w/ node command
            ansible.builtin.shell: |
              {{ cluster_registration_tokens.json.data[0].nodeCommand }} {{ role_cmd[node_role] }}

          - name: Create directory for kubeconfig
            ansible.builtin.file:
              path: /home/{{ username }}/.kube
              state: directory
              owner: "{{ username }}"
              group: "{{ username }}"

          - name: Ensure kubectl is sourced from the .bashrc
            ansible.builtin.blockinfile:
              dest: "/home/{{ username }}/.bashrc"
              block: |
                export PATH="/var/lib/rancher/rke2/bin/:$PATH"
                sudo cp {{ kubeconfig_path }} /home/{{ username }}/.kube/config
                sudo chown {{ username }}:{{ username }} /home/{{ username }}/.kube/config
              marker: '# {mark} ANSIBLE MANAGED BLOCK - kubectl'
              insertbefore: EOF
              create: yes

  - name: keycloak_oidc_config
    play: |
      ---
      - hosts: localhost
        vars:
          idp:
            hostname: "dev17.labul.sva.de:8080"
            realm:
              name: "master"

          admin_password: "admin"
          rancher_client_secret: "Atlan7island8sailor9"
          rancher_api_token: token-98src:mkxfj52dhr495tw5g8hw5rblpbxr5lsbw5k2ldc2d24fpksc2jnwlk
          rancher_access_key: token-98src
          rancher_secret_key: mkxfj52dhr495tw5g8hw5rblpbxr5lsbw5k2ldc2d24fpksc2jnwlk

        tasks:
          - name: Create Rancher Client
            community.general.keycloak_client:
              auth_keycloak_url: http://{{ idp.hostname }}
              auth_realm: "master"
              auth_username: "admin"
              auth_password: "{{ admin_password }}"
              state: present
              realm: "{{ idp.realm.name }}"
              client_id: "rancher"
              name: "rancher"
              description: "Client used by Rancher for OIDC authentication"
              protocol: "openid-connect"
              enabled: true
              public_client: false
              client_authenticator_type: client-secret
              secret: "{{ rancher_client_secret }}"
              web_origins:
                - "https://rancher-things.demo.sthings-vsphere.labul.sva.de/*"
              redirect_uris:
                - "https://rancher-things.demo.sthings-vsphere.labul.sva.de/verify-auth"
              protocol_mappers:
                - name: "Groups Mapper"
                  protocol: "openid-connect"
                  protocolMapper: "oidc-group-membership-mapper"
                  config:
                    claim.name: "groups"
                    id.token.claim: false
                    access.token.claim: false
                    userinfo.token.claim: true
                - name: "Client Audience"
                  protocol: "openid-connect"
                  protocolMapper: "oidc-audience-mapper"
                  config:
                    included.client.audience: "rancher"
                    id.token.claim: false
                    access.token.claim: true
                    userinfo.token.claim: false
                - name: "Groups Path"
                  protocol: "openid-connect"
                  protocolMapper: "oidc-group-membership-mapper"
                  config:
                    claim.name: "full_group_path"
                    full.path: true
                    id.token.claim: false
                    access.token.claim: false
                    userinfo.token.claim: true

          - name: Test and Apply Rancher Keycloak OIDC Config
            uri:
              url: "https://rancher-things.demo.sthings-vsphere.labul.sva.de/v3/keyCloakOIDCConfigs/keycloakoidc"
              user: "{{ rancher_access_key }}"
              password: "{{ rancher_secret_key }}"
              method: PUT
              validate_certs: no
              headers:
                Authorization: "Bearer {{ rancher_api_token }}"
              body:
                type: "keyCloakOIDCConfig"
                name: "keycloakoidc"
                clientId: "rancher"
                clientSecret: "{{ rancher_client_secret }}"
                issuer: "http://{{ idp.hostname }}/realms/{{ idp.realm.name }}"
                authEndpoint: 'http://{{ idp.hostname }}/realms/{{ idp.realm.name }}/protocol/openid-connect/auth'
                rancherUrl: "https://rancher-things.demo.sthings-vsphere.labul.sva.de/verify-auth"
                enabled: true
                scope: "rancher"
                groupSearchEnabled: true
                allowedPrincipalIds: [ "keycloakoidc_group://rancher" ]
                accessMode: "required"
              body_format: json
              status_code: 200

vars:
  - name: ingress-nginx
    play: |
      ---
      namespace: "{{ namespace }}"

      helm_repositories:
        ingress-nginx:
          url: https://kubernetes.github.io/ingress-nginx

      helm_releases:
        ingress-nginx:
          ref: ingress-nginx/ingress-nginx
          version: 4.10.1
          namespace: ingress-nginx
          ignore: false
          wait: true
          release_values: {}

  - name: metallb
    file: |
      ---
      name_ip_pool: ip-pool
      namespace: metallb-system
      ip_range: 10.31.102.112-10.31.102.112

      helm_repositories:
        bitnami:
          url: https://charts.bitnami.com/bitnami

      helm_releases:
        metallb:
          ref: bitnami/metallb
          version: 6.1.4
          namespace: "{{ namespace }}"
          ignore: true
          wait: true
          release_values: {}

      post_manifests:
        ip_pool: |
          apiVersion: metallb.io/v1beta1
          kind: IPAddressPool
          metadata:
            name: {{ name_ip_pool | default('ip-pool') }}
            namespace: {{ namespace }}
            labels:
              app: metallb
          spec:
            addresses:
              - {{ ip_range }}
        poolAdvertisement: |
          apiVersion: metallb.io/v1beta1
          kind: L2Advertisement
          metadata:
            name: pool-advertisement
            namespace: {{ namespace }}
            labels:
              app: metallb
          spec:
            ipAddressPools:
              - {{ name_ip_pool | default('ip-pool') }}

  - name: rancher
    file: |
      ---
      namespace: cattle-system
      hostname: rancher-things
      domain: demo.sthings-vsphere.labul.sva.de
      ca_certs: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZpakNDQTNLZ0F3SUJBZ0lVWWVZUGluODZYUGZyQXVwRzJ0MHYreUMydCtBd0RRWUpLb1pJaHZjTkFRRUwKQlFBd1FERU1NQW9HQTFVRUNoTURVMVpCTVJrd0Z3WURWUVFMRXhCVGRIVjBkR2RoY25RdFZHaHBibWR6TVJVdwpFd1lEVlFRREV3eHNZV0oxYkM1emRtRXVaR1V3SGhjTk1qTXdNek14TURnMU56TXhXaGNOTXpNd016STRNRGcxCk56VTNXakJBTVF3d0NnWURWUVFLRXdOVFZrRXhHVEFYQmdOVkJBc1RFRk4wZFhSMFoyRnlkQzFVYUdsdVozTXgKRlRBVEJnTlZCQU1UREd4aFluVnNMbk4yWVM1a1pUQ0NBaUl3RFFZSktvWklodmNOQVFFQkJRQURnZ0lQQURDQwpBZ29DZ2dJQkFNT3lhZjBvL2R3ZkpjcmZLeFhJdmVVOU5BdDNlelZjQ3pkOURMTTR0NGF0Q09sci9CeXhoM0hPCmY1RWhKNEp4Q3A2NXdXaitGeDQyMVc4R3dHTU9VU25xWk9ZQVBkVnlEcitpUk82SVJSSWYxZHBJTHNveDFYTFMKaU1Yb3lyT2ZpckFyUG1WTXlTZWpBTFlIYnExNmp1ckh0T2ErdTN4aHVoczZoeGE2c0gyTkU2Y1lFRDI4SUw5VQpuYWdFb2E2MjM3U1VoWi9uQnBvRm11WTErbkNoRTFtV2FxSURTQ2o4MThNZGJBalVieDhyd3Rsb0JDV24rNU4rCm41NERwc0U5QXFmS01reHQvbFAyOVBtTWJ5MWR2czJ5cUJmYVN2YXdmVkFEYllyUlp0YmViTEluNFFXa3R6eFgKUDMzdWtERk9MdjRhRklpUEQ5aE1WWHlzcUZkYzZZUnh2NElSajRxZU94R3Z0LzZRWTFYcHNXVVNoc09Mb2w1RAppc2dVVGZIOFpKb2YzeHErcURMMVVJQjcweWlCZHNIQ3g4cTI2MXY4blcycHFIQ01ibFVGZUtPMWtrWlhvSWJxClV5d3BGZUlXaWRPWGRRKytqV21MbC8vWU81djJRcURza3dMOGVyaTRVd0M1a21qeTNnUlY3bVc4QXp1dnRWU2IKMkdualNIMnUxY0NJcUYwalJ2TGVLc2R1VW9ITThHczR2Wld1Z1BQVXhnWTVSUzIybXRzajBnMWZsM20vc0NyVwo5S0tGNmRFN2FhNWRrSDhqR0NZTy9ickNzZnliZGZqWEsxZDUzejU2Q3p0WWJYV1pOeWxqZUZKR0d2YW44dG9UCnRBbVVzRmlwTHdYR1lmOGM1c2o2N1VIdGFUYUF5eWhoN1dYZzEyMVBPdlRRR0ZMSjlDbGpBZ01CQUFHamZEQjYKTUE0R0ExVWREd0VCL3dRRUF3SUJCakFQQmdOVkhSTUJBZjhFQlRBREFRSC9NQjBHQTFVZERnUVdCQlFhald0VwptaVVQWVc5UWtHVDJlVVFXVTl3cmtUQWZCZ05WSFNNRUdEQVdnQlFhald0V21pVVBZVzlRa0dUMmVVUVdVOXdyCmtUQVhCZ05WSFJFRUVEQU9nZ3hzWVdKMWJDNXpkbUV1WkdVd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dJQkFCcTcKTjZNM0VYWllRS0U1UVUwQnFjSEhsYjlBSmkyd0owbzJyL1dWblByZTRRWSt0NmpnWU4wRmJwWWxlNUtCUjJObQo2NUZUcGgyRWI4VExuK1R4WnBEY1ZVQXNLTDZENC9IRHM1aWJnV1hIcVV1Z2xUS1pSYTRFc1JWeldGUEk1ei92CjdUSXQ2MDgrR2RtblVWUGFrUTJSZHJ1WG91NmhNV2lEeE9sZk5tSERiMWJBeHkxazgzNDMyNVF0ZEFIQW1OLzIKcGRsNGp4UXRnVlpnTjN3a3dGWjVVejFkOWlGN21RcDRlblVkaDBCVEdpemFmZDZZcy9SVjFrRzdrY2VFQjRKbwpDTElyNWp2L3E2a2JSWGNQa2xkVFZEM2JCeFVUUmlzT3VOK282Y0VzaWpRMmw2WjBhS1Fyd1dlaXJKT2k1YzdkClNpeXpXQ1RkUTVFeDYrSk94VWwzNSsva25GamVxQmNMZzFWWXB6TmFaZHp4c05HV2ZnMEYzMitJazh5ellmQ1AKZWhoZ2pKRUphazlmTzFqMjhaZnhMWWt5VU5sNUpoY0l5SFZrZ0lsUGkySTBQZnRvUU1qQnJsZ0E0T3BjSkp4cApXbGFoY0lNRlBMRlNXYVdpcEtMZnp0QkwzQ3NuMVNTS3FDYXpqRjk4SXRMZWt4QlFCNEpEL1d1V3ZQRkZIb1R2CmNBV01BdUt5TkN3MEgvSnRtQ3dUSVN6bWFBOGdyZUxhbWppdjNHZC9uN3RoanhYRE5PTVJDWTdNRkJNSlhRQ2sKT2pTZFJuS3V2ZHNBb0VjZ05IMS80YkZrTS9jNDU4WTlNMmplUmJya2hZS0c1OXhNcnVLczFSTkU4Q3pOcXZwNgo4TlkxMWtLaUxzZmF6NFhUOGpUYmQ0QkNJbm91MldJaHdGZVRyM0ZqCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=
      password: lookup('community.general.random_string', length=16)

      helm_repositories:
        rancher-stable:
          url: https://releases.rancher.com/server-charts/latest

      pre_manifests:
        namespace: |
          apiVersion: v1
          kind: Namespace
          metadata:
            name: {{ namespace }}

        certificate: |
          apiVersion: cert-manager.io/v1
          kind: Certificate
          metadata:
            name: {{ hostname }}-ingress
            namespace: {{ namespace }}
          spec:
            commonName: {{ hostname }}.{{ domain }}
            dnsNames:
              - {{ hostname }}.{{ domain }}
            issuerRef:
              name: cluster-issuer-approle
              kind: ClusterIssuer
            secretName: {{ hostname }}-tls

        tls_secret: |
          apiVersion: v1
          kind: Secret
          metadata:
            name: tls-ca
            namespace: {{ namespace }}
          data:
            cacerts.pem: {{ ca_certs }}

      helm_releases:
        rancher:
          ref: rancher-stable/rancher
          version: 2.8.5
          namespace: "{{ namespace }}"
          ignore: false
          wait: true
          release_values: |
            ---
            global:
              cattle:
                psp:
                  enabled: false
            bootstrapPassword: {{ password }}
            hostname: {{ hostname }}.{{ domain }}
            privateCA: true
            ingress:
              enabled: true
              ingressClassName: nginx
              servicePort: 80
              tls:
                source: secret
                secretName: {{ hostname }}-tls

  - name: cert-manager
    file: |
      ---
      namespace: cert-manager
      approle_id: 1d42d7e7-8c14-e5f9-801d-b3ecef416616
      approle_secret: NjIzYzk5MWYtZGQ3Ni1jNDM3LTI3MjMtYmIyZWY1YjAyZDg3
      name_cluster_issuer: cluster-issuer-approle
      pki_path: pki/sign/sthings-vsphere.labul.sva.de
      vault_server: https://vault-vsphere.labul.sva.de:8200
      ca_bundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZpakNDQTNLZ0F3SUJBZ0lVWWVZUGluODZYUGZyQXVwRzJ0MHYreUMydCtBd0RRWUpLb1pJaHZjTkFRRUwKQlFBd1FERU1NQW9HQTFVRUNoTURVMVpCTVJrd0Z3WURWUVFMRXhCVGRIVjBkR2RoY25RdFZHaHBibWR6TVJVdwpFd1lEVlFRREV3eHNZV0oxYkM1emRtRXVaR1V3SGhjTk1qTXdNek14TURnMU56TXhXaGNOTXpNd016STRNRGcxCk56VTNXakJBTVF3d0NnWURWUVFLRXdOVFZrRXhHVEFYQmdOVkJBc1RFRk4wZFhSMFoyRnlkQzFVYUdsdVozTXgKRlRBVEJnTlZCQU1UREd4aFluVnNMbk4yWVM1a1pUQ0NBaUl3RFFZSktvWklodmNOQVFFQkJRQURnZ0lQQURDQwpBZ29DZ2dJQkFNT3lhZjBvL2R3ZkpjcmZLeFhJdmVVOU5BdDNlelZjQ3pkOURMTTR0NGF0Q09sci9CeXhoM0hPCmY1RWhKNEp4Q3A2NXdXaitGeDQyMVc4R3dHTU9VU25xWk9ZQVBkVnlEcitpUk82SVJSSWYxZHBJTHNveDFYTFMKaU1Yb3lyT2ZpckFyUG1WTXlTZWpBTFlIYnExNmp1ckh0T2ErdTN4aHVoczZoeGE2c0gyTkU2Y1lFRDI4SUw5VQpuYWdFb2E2MjM3U1VoWi9uQnBvRm11WTErbkNoRTFtV2FxSURTQ2o4MThNZGJBalVieDhyd3Rsb0JDV24rNU4rCm41NERwc0U5QXFmS01reHQvbFAyOVBtTWJ5MWR2czJ5cUJmYVN2YXdmVkFEYllyUlp0YmViTEluNFFXa3R6eFgKUDMzdWtERk9MdjRhRklpUEQ5aE1WWHlzcUZkYzZZUnh2NElSajRxZU94R3Z0LzZRWTFYcHNXVVNoc09Mb2w1RAppc2dVVGZIOFpKb2YzeHErcURMMVVJQjcweWlCZHNIQ3g4cTI2MXY4blcycHFIQ01ibFVGZUtPMWtrWlhvSWJxClV5d3BGZUlXaWRPWGRRKytqV21MbC8vWU81djJRcURza3dMOGVyaTRVd0M1a21qeTNnUlY3bVc4QXp1dnRWU2IKMkdualNIMnUxY0NJcUYwalJ2TGVLc2R1VW9ITThHczR2Wld1Z1BQVXhnWTVSUzIybXRzajBnMWZsM20vc0NyVwo5S0tGNmRFN2FhNWRrSDhqR0NZTy9ickNzZnliZGZqWEsxZDUzejU2Q3p0WWJYV1pOeWxqZUZKR0d2YW44dG9UCnRBbVVzRmlwTHdYR1lmOGM1c2o2N1VIdGFUYUF5eWhoN1dYZzEyMVBPdlRRR0ZMSjlDbGpBZ01CQUFHamZEQjYKTUE0R0ExVWREd0VCL3dRRUF3SUJCakFQQmdOVkhSTUJBZjhFQlRBREFRSC9NQjBHQTFVZERnUVdCQlFhald0VwptaVVQWVc5UWtHVDJlVVFXVTl3cmtUQWZCZ05WSFNNRUdEQVdnQlFhald0V21pVVBZVzlRa0dUMmVVUVdVOXdyCmtUQVhCZ05WSFJFRUVEQU9nZ3hzWVdKMWJDNXpkbUV1WkdVd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dJQkFCcTcKTjZNM0VYWllRS0U1UVUwQnFjSEhsYjlBSmkyd0owbzJyL1dWblByZTRRWSt0NmpnWU4wRmJwWWxlNUtCUjJObQo2NUZUcGgyRWI4VExuK1R4WnBEY1ZVQXNLTDZENC9IRHM1aWJnV1hIcVV1Z2xUS1pSYTRFc1JWeldGUEk1ei92CjdUSXQ2MDgrR2RtblVWUGFrUTJSZHJ1WG91NmhNV2lEeE9sZk5tSERiMWJBeHkxazgzNDMyNVF0ZEFIQW1OLzIKcGRsNGp4UXRnVlpnTjN3a3dGWjVVejFkOWlGN21RcDRlblVkaDBCVEdpemFmZDZZcy9SVjFrRzdrY2VFQjRKbwpDTElyNWp2L3E2a2JSWGNQa2xkVFZEM2JCeFVUUmlzT3VOK282Y0VzaWpRMmw2WjBhS1Fyd1dlaXJKT2k1YzdkClNpeXpXQ1RkUTVFeDYrSk94VWwzNSsva25GamVxQmNMZzFWWXB6TmFaZHp4c05HV2ZnMEYzMitJazh5ellmQ1AKZWhoZ2pKRUphazlmTzFqMjhaZnhMWWt5VU5sNUpoY0l5SFZrZ0lsUGkySTBQZnRvUU1qQnJsZ0E0T3BjSkp4cApXbGFoY0lNRlBMRlNXYVdpcEtMZnp0QkwzQ3NuMVNTS3FDYXpqRjk4SXRMZWt4QlFCNEpEL1d1V3ZQRkZIb1R2CmNBV01BdUt5TkN3MEgvSnRtQ3dUSVN6bWFBOGdyZUxhbWppdjNHZC9uN3RoanhYRE5PTVJDWTdNRkJNSlhRQ2sKT2pTZFJuS3V2ZHNBb0VjZ05IMS80YkZrTS9jNDU4WTlNMmplUmJya2hZS0c1OXhNcnVLczFSTkU4Q3pOcXZwNgo4TlkxMWtLaUxzZmF6NFhUOGpUYmQ0QkNJbm91MldJaHdGZVRyM0ZqCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=
      vault_secret: vault-approle

      helm_repositories:
        cert-manager:
          url: https://charts.jetstack.io

      helm_releases:
        cert-manager:
          ref: cert-manager/cert-manager
          version: v1.14.4
          namespace: "{{ namespace }}"
          ignore: false
          wait: true
          release_values: |
            installCRDs: true

      post_manifests:
        secret_approle: |
          apiVersion: v1
          kind: Secret
          metadata:
            name: {{ vault_secret }}
            namespace: {{ namespace }}
          data:
            approle: {{ approle_secret }}

        cluster_issuer: |
          apiVersion: cert-manager.io/v1
          kind: ClusterIssuer
          metadata:
            name: {{ name_cluster_issuer }}
            namespace: {{ namespace }}
          spec:
            vault:
              path: {{ pki_path }}
              server: {{ vault_server }}
              caBundle: {{ ca_bundle }}
              auth:
                appRole:
                  path: approle
                  roleId: {{ approle_id }}
                  secretRef:
                    name: {{ vault_secret }}
                    key: approle
