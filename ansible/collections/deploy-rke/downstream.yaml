
---
playbooks:
  - name: rke2
    play: |
      - hosts: all
        become: true
        vars:
          rke_version: 2
          rke2_k8s_version: 1.28.10
          rke2_airgapped_installation: true
          rke2_release_kind: rke2r1
          disable_rke2_components:
            - rke2-ingress-nginx
            - rke-snapshot-controller
          cluster_setup: multinode

        roles:
          - role: sthings.deploy_rke.deploy_configure_rke

  - name: deploy_to_k8s
    play: |
      ---
      - hosts: "{{ target_host | default('localhost') }}"
        vars_files:
          - "{{ path | default('.') }}/{{ profile }}.yaml"
          - "{{ deployment_vars | default(omit) }}"
        #path_to_kubeconfig: ~/.kube/rancher

        tasks:
          - name: Create pre manifests
            ansible.builtin.include_tasks: manifests.yaml
            loop: "{{ q('ansible.builtin.dict', pre_manifests) }}"
            when: pre_manifests is defined

          - name: Configure and (un)install helm charts
            block:
              - name: Install helm requirements
                ansible.builtin.include_tasks: helm_config.yaml

              - name: Deploy helm chart(s)
                ansible.builtin.include_tasks: helm.yaml
                loop: "{{ q('ansible.builtin.dict', helm_releases) }}"
            when: helm_releases is defined

          - name: Create post manifests
            ansible.builtin.include_tasks: manifests.yaml
            loop: "{{ q('ansible.builtin.dict', post_manifests) }}"

  - name: deploy_downstream_cluster
    play: |
      ---
      - hosts: "{{ target_host | default('localhost') }}"
        vars:
          cluster_template: cluster

        vars_files:
          - "{{ cluster_profile | default(omit) }}"

        tasks:
          - name: Create cluster on rancher
            kubernetes.core.k8s:
              kubeconfig: "{{ path_to_kubeconfig }}"
              state: "{{ state | default('present') }}"
              definition: "{{ lookup('template', '{{ cluster_template }}.yaml') | from_yaml }}"
            when: state == "present"

      - hosts: "{{ target_host | default('all') }}"
        become: true
        vars:
          rancher_api_url: "https://{{ rancher_hostname }}.{{ rancher_domain }}/v3"
          prepare_rke_nodes: true
        vars_files:
          - "{{ cluster_profile | default(omit) }}"

        pre_tasks:
          - name: Prepare rancher nodes
            ansible.builtin.include_role:
              name: configure-rke-node
            vars:
              install_docker: false
              cloudinit: false
            when: prepare_rke_nodes|bool

        tasks:
          - debug:
              var: rancher_cluster_cmd

          - name: Get cluster information
            ansible.builtin.uri:
              validate_certs: false
              url: "{{ rancher_api_url }}/clusters?name={{ cluster_name }}"
              user: "{{ rancher_access_key }}"
              password: "{{ rancher_secret_key }}"
              body_format: json
              method: GET
              force_basic_auth: yes
              headers:
                Content-Type: "application/json"
            register: cluster_info

          - name: Show clusterid
            ansible.builtin.debug:
              var:
                cluster_info.json.data[0].id

          - name: Set clusterid
            ansible.builtin.set_fact:
              cluster_id: "{{ cluster_info.json.data[0].id }}"

          - name: Get cluster registration tokens
            ansible.builtin.uri:
              validate_certs: false
              url: "{{ rancher_api_url }}/clusters/{{ cluster_id }}/clusterregistrationtokens?sort=insecureCommand"
              user: "{{ rancher_access_key }}"
              password: "{{ rancher_secret_key }}"
              body_format: json
              method: GET
              force_basic_auth: yes
              headers:
                  Content-Type: "application/json"
            register: cluster_registration_tokens

          - name: Set nodeCommand
            ansible.builtin.set_fact:
              nodeCommand: "{{ cluster_registration_tokens.json.data[0].nodeCommand }}"

          - name: Create Cluster w/ node command
            ansible.builtin.shell: |
              {{ nodeCommand }} {{ rancher_cluster_cmd }}

  - name: get_kubeconfig
    play: |
      ---
      - hosts: "{{ target_host | default('localhost') }}"
        become: true
        vars:
          rancher_api_url: "https://{{ rancher_hostname }}.{{ rancher_domain }}/v3"
          check_kubeconfig: true

        tasks:
        - name: Get cluster information
          ansible.builtin.uri:
            validate_certs: false
            url: "{{ rancher_api_url }}/clusters?name={{ cluster_name }}"
            user: "{{ rancher_access_key }}"
            password: "{{ rancher_secret_key }}"
            body_format: json
            method: GET
            force_basic_auth: yes
            headers:
              Content-Type: "application/json"
          register: cluster_info

        - name: Show clusterid
          ansible.builtin.debug:
            var:
              cluster_info.json.data[0].id

        - name: Set clusterid
          ansible.builtin.set_fact:
            cluster_id: "{{ cluster_info.json.data[0].id }}"

        - name: Get kubeconfig
          ansible.builtin.uri:
            validate_certs: false
            url: "{{ rancher_api_url }}/clusters/{{ cluster_info.json.data[0].id }}?action=generateKubeconfig"
            user: "{{ rancher_access_key }}"
            password: "{{ rancher_secret_key }}"
            body_format: json
            method: POST
            force_basic_auth: yes
          register: kubeconfig

        - name: Store kubeconfig on disk
          ansible.builtin.copy:
            content: "{{ kubeconfig.json.config  }}"
            dest: "{{ kubeconfig_destination }}"

        - name: Test if kubeconfig is valid
          ansible.builtin.shell: |
            kubectl get nodes --kubeconfig {{ kubeconfig_destination }}
          register: cmd_result
          retries: 20
          delay: 30
          until: ("NotReady" not in cmd_result.stdout)
          when: check_kubeconfig|bool

templates:
  - name: cluster
    file: |
      apiVersion: provisioning.cattle.io/v1
      kind: Cluster
      metadata:
        name: {{ cluster_name }}
        annotations:
          field.cattle.io/description: {{ cluster_description }}
        labels:
          {}
        namespace: fleet-default
      spec:
        clusterAgentDeploymentCustomization:
          appendTolerations:
      #      - effect: string
      #        key: string
      #        operator: string
      #        tolerationSeconds: int
      #        value: string
          overrideAffinity:
      #      nodeAffinity:
      #        preferredDuringSchedulingIgnoredDuringExecution:
      #          - preference:
      #              matchExpressions:
      #                - key: string
      #                  operator: string
      #                  values:
      #                    - string
      #              matchFields:
      #                - key: string
      #                  operator: string
      #                  values:
      #                    - string
      #            weight: int
      #        requiredDuringSchedulingIgnoredDuringExecution:
      #          nodeSelectorTerms:
      #            - matchExpressions:
      #                - key: string
      #                  operator: string
      #                  values:
      #                    - string
      #              matchFields:
      #                - key: string
      #                  operator: string
      #                  values:
      #                    - string
      #      podAffinity:
      #        preferredDuringSchedulingIgnoredDuringExecution:
      #          - podAffinityTerm:
      #              labelSelector:
      #                matchExpressions:
      #                  - key: string
      #                    operator: string
      #                    values:
      #                      - string
      #                matchLabels:  key: string
      #              namespaceSelector:
      #                matchExpressions:
      #                  - key: string
      #                    operator: string
      #                    values:
      #                      - string
      #                matchLabels:  key: string
      #              namespaces:
      #                - string
      #              topologyKey: string
      #            weight: int
      #        requiredDuringSchedulingIgnoredDuringExecution:
      #          - labelSelector:
      #              matchExpressions:
      #                - key: string
      #                  operator: string
      #                  values:
      #                    - string
      #              matchLabels:  key: string
      #            namespaceSelector:
      #              matchExpressions:
      #                - key: string
      #                  operator: string
      #                  values:
      #                    - string
      #              matchLabels:  key: string
      #            namespaces:
      #              - string
      #            topologyKey: string
      #      podAntiAffinity:
      #        preferredDuringSchedulingIgnoredDuringExecution:
      #          - podAffinityTerm:
      #              labelSelector:
      #                matchExpressions:
      #                  - key: string
      #                    operator: string
      #                    values:
      #                      - string
      #                matchLabels:  key: string
      #              namespaceSelector:
      #                matchExpressions:
      #                  - key: string
      #                    operator: string
      #                    values:
      #                      - string
      #                matchLabels:  key: string
      #              namespaces:
      #                - string
      #              topologyKey: string
      #            weight: int
      #        requiredDuringSchedulingIgnoredDuringExecution:
      #          - labelSelector:
      #              matchExpressions:
      #                - key: string
      #                  operator: string
      #                  values:
      #                    - string
      #              matchLabels:  key: string
      #            namespaceSelector:
      #              matchExpressions:
      #                - key: string
      #                  operator: string
      #                  values:
      #                    - string
      #              matchLabels:  key: string
      #            namespaces:
      #              - string
      #            topologyKey: string
          overrideResourceRequirements:
      #      claims:
      #        - name: string
      #      limits:  key: string
      #      requests:  key: string
        defaultPodSecurityAdmissionConfigurationTemplateName: ''
        defaultPodSecurityPolicyTemplateName: ''
        fleetAgentDeploymentCustomization:
          appendTolerations:
      #      - effect: string
      #        key: string
      #        operator: string
      #        tolerationSeconds: int
      #        value: string
          overrideAffinity:
      #      nodeAffinity:
      #        preferredDuringSchedulingIgnoredDuringExecution:
      #          - preference:
      #              matchExpressions:
      #                - key: string
      #                  operator: string
      #                  values:
      #                    - string
      #              matchFields:
      #                - key: string
      #                  operator: string
      #                  values:
      #                    - string
      #            weight: int
      #        requiredDuringSchedulingIgnoredDuringExecution:
      #          nodeSelectorTerms:
      #            - matchExpressions:
      #                - key: string
      #                  operator: string
      #                  values:
      #                    - string
      #              matchFields:
      #                - key: string
      #                  operator: string
      #                  values:
      #                    - string
      #      podAffinity:
      #        preferredDuringSchedulingIgnoredDuringExecution:
      #          - podAffinityTerm:
      #              labelSelector:
      #                matchExpressions:
      #                  - key: string
      #                    operator: string
      #                    values:
      #                      - string
      #                matchLabels:  key: string
      #              namespaceSelector:
      #                matchExpressions:
      #                  - key: string
      #                    operator: string
      #                    values:
      #                      - string
      #                matchLabels:  key: string
      #              namespaces:
      #                - string
      #              topologyKey: string
      #            weight: int
      #        requiredDuringSchedulingIgnoredDuringExecution:
      #          - labelSelector:
      #              matchExpressions:
      #                - key: string
      #                  operator: string
      #                  values:
      #                    - string
      #              matchLabels:  key: string
      #            namespaceSelector:
      #              matchExpressions:
      #                - key: string
      #                  operator: string
      #                  values:
      #                    - string
      #              matchLabels:  key: string
      #            namespaces:
      #              - string
      #            topologyKey: string
      #      podAntiAffinity:
      #        preferredDuringSchedulingIgnoredDuringExecution:
      #          - podAffinityTerm:
      #              labelSelector:
      #                matchExpressions:
      #                  - key: string
      #                    operator: string
      #                    values:
      #                      - string
      #                matchLabels:  key: string
      #              namespaceSelector:
      #                matchExpressions:
      #                  - key: string
      #                    operator: string
      #                    values:
      #                      - string
      #                matchLabels:  key: string
      #              namespaces:
      #                - string
      #              topologyKey: string
      #            weight: int
      #        requiredDuringSchedulingIgnoredDuringExecution:
      #          - labelSelector:
      #              matchExpressions:
      #                - key: string
      #                  operator: string
      #                  values:
      #                    - string
      #              matchLabels:  key: string
      #            namespaceSelector:
      #              matchExpressions:
      #                - key: string
      #                  operator: string
      #                  values:
      #                    - string
      #              matchLabels:  key: string
      #            namespaces:
      #              - string
      #            topologyKey: string
          overrideResourceRequirements:
      #      claims:
      #        - name: string
      #      limits:  key: string
      #      requests:  key: string
        kubernetesVersion: {{ kubernetes_version }}
        localClusterAuthEndpoint:
          caCerts: ''
          enabled: false
          fqdn: ''
        rkeConfig:
          chartValues:
            rke2-{{ cni }}: {}
          etcd:
            disableSnapshots: false
            s3:
      #        bucket: string
      #        cloudCredentialName: string
      #        endpoint: string
      #        endpointCA: string
      #        folder: string
      #        region: string
      #        skipSSLVerify: boolean
            snapshotRetention: 5
            snapshotScheduleCron: 0 */5 * * *
          machineGlobalConfig:
            cni: {{ cni }}
            disable-kube-proxy: false
            etcd-expose-metrics: false
            profile: null
          machinePools:
      #      - cloudCredentialSecretName: string
      #        controlPlaneRole: boolean
      #        displayName: string
      #        drainBeforeDelete: boolean
      #        drainBeforeDeleteTimeout: string
      #        dynamicSchemaSpec: string
      #        etcdRole: boolean
      #        hostnameLengthLimit: int
      #        labels:  key: string
      #        machineConfigRef:
      #          apiVersion: string
      #          fieldPath: string
      #          kind: string
      #          name: string
      #          namespace: string
      #          resourceVersion: string
      #          uid: string
      #        machineDeploymentAnnotations:  key: string
      #        machineDeploymentLabels:  key: string
      #        machineOS: string
      #        maxUnhealthy: string
      #        name: string
      #        nodeStartupTimeout: string
      #        paused: boolean
      #        quantity: int
      #        rollingUpdate:
      #          maxSurge: json
      #          maxUnavailable: json
      #        taints:
      #          - effect: string
      #            key: string
      #            timeAdded: string
      #            value: string
      #        unhealthyNodeTimeout: string
      #        unhealthyRange: string
      #        workerRole: boolean
          machineSelectorConfig:
            - config:
                protect-kernel-defaults: false
      #      - config:
      #
      #        machineLabelSelector:
      #          matchExpressions:
      #            - key: string
      #              operator: string
      #              values:
      #                - string
      #          matchLabels:  key: string
          registries:
            configs:
              {}
              #  authConfigSecretName: string
      #        caBundle: string
      #        insecureSkipVerify: boolean
      #        tlsSecretName: string
            mirrors:
              {}
              #  endpoint:
      #          - string
      #        rewrite:  key: string
          upgradeStrategy:
            controlPlaneConcurrency: '1'
            controlPlaneDrainOptions:
              deleteEmptyDirData: true
              disableEviction: false
              enabled: false
              force: false
              gracePeriod: -1
              ignoreDaemonSets: true
              skipWaitForDeleteTimeoutSeconds: 0
              timeout: 120
      #        ignoreErrors: boolean
      #        postDrainHooks:
      #          - annotation: string
      #        preDrainHooks:
      #          - annotation: string
            workerConcurrency: '1'
            workerDrainOptions:
              deleteEmptyDirData: true
              disableEviction: false
              enabled: false
              force: false
              gracePeriod: -1
              ignoreDaemonSets: true
              skipWaitForDeleteTimeoutSeconds: 0
              timeout: 120
      #        ignoreErrors: boolean
      #        postDrainHooks:
      #          - annotation: string
      #        preDrainHooks:
      #          - annotation: string
      #    additionalManifest: string
      #    etcdSnapshotCreate:
      #      generation: int
      #    etcdSnapshotRestore:
      #      generation: int
      #      name: string
      #      restoreRKEConfig: string
      #    infrastructureRef:
      #      apiVersion: string
      #      fieldPath: string
      #      kind: string
      #      name: string
      #      namespace: string
      #      resourceVersion: string
      #      uid: string
      #    machinePoolDefaults:
      #      hostnameLengthLimit: int
      #    machineSelectorFiles:
      #      - fileSources:
      #          - configMap:
      #              defaultPermissions: string
      #              items:
      #                - dynamic: boolean
      #                  hash: string
      #                  key: string
      #                  path: string
      #                  permissions: string
      #              name: string
      #            secret:
      #              defaultPermissions: string
      #              items:
      #                - dynamic: boolean
      #                  hash: string
      #                  key: string
      #                  path: string
      #                  permissions: string
      #              name: string
      #        machineLabelSelector:
      #          matchExpressions:
      #            - key: string
      #              operator: string
      #              values:
      #                - string
      #          matchLabels:  key: string
      #    networking:
      #      stackPreference: string
      #    provisionGeneration: int
      #    rotateCertificates:
      #      generation: int
      #      services:
      #        - string
      #    rotateEncryptionKeys:
      #      generation: int
        machineSelectorConfig:
          - config: {}
      #  agentEnvVars:
      #    - name: string
      #      value: string
      #  cloudCredentialSecretName: string
      #  clusterAPIConfig:
      #    clusterName: string
      #  defaultClusterRoleForProjectMembers: string
      #  enableNetworkPolicy: boolean
      #  redeploySystemAgentGeneration: int
      __clone: true
