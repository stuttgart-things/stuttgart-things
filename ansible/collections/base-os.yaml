---
name: base_os
version: 0.3.1
namespace: sthings
requirements: |
  roles:
    - src: https://github.com/stuttgart-things/download-install-binary.git
      scm: git
      version: 2024.04.19
    - src: https://github.com/stuttgart-things/create-os-user.git
      scm: git
      version: 2024.05.03
    - src: https://github.com/stuttgart-things/install-configure-docker.git
      scm: git
      version: 2024.04.30
    - src: https://github.com/stuttgart-things/install-configure-docker.git
      scm: git
      version: 2024.04.30
    - src: https://github.com/stuttgart-things/install-configure-podman.git
      scm: git
      version: 2024.05.08
    - src: https://github.com/stuttgart-things/install-requirements.git
      scm: git
      version: 2024.05.11
    - src: https://github.com/stuttgart-things/manage-filesystem.git
      scm: git
      version: 2024.05.15
    - src: https://github.com/stuttgart-things/install-configure-vault.git
      scm: git
      version: 2022.01.01
    - src: https://github.com/stuttgart-things/create-send-webhook.git
      scm: git
      version: 2022.01.01

playbooks:

  - name: setup
    play: |
      ---
      - hosts: "{{ target_host | default('all') }}"
        become: true
        gather_facts: true

        vars:
          manage_filesystem: true
          update_packages: true
          install_requirements: true
          install_motd: true
          reboot_all: false
          username: sthings
          lvm_home_sizing: "15%"
          lvm_root_sizing: "35%"
          lvm_var_sizing: "50%"
          send_to_msteams: true
          msteams_webhook_url: "https://365sva.webhook.office.com/webhookb2/2f14a9f8-4736-46dd-9c8c-31547ec37180@0a65cb1e-37d5-41ff-980a-647d9d0e4f0b/IncomingWebhook/37a805a0a2624dc2ac1aedd7dec6ad49/dc3a27ed-396c-40b7-a9b2-f1a2b6b44efe"
          reboot_all: false
          vault_instances:
            - https://vault.tiab.labda.sva.de:8200
            - https://vault.labul.sva.de:8200
            - https://vault-vsphere.labul.sva.de:8200
            - https://vault-pve.labul.sva.de:8200
            - https://vault-vsphere.tiab.labda.sva.de:8200

        roles:
          - role: sthings.base_os.manage_filesystem
            when: manage_filesystem|bool

          - role: sthings.base_os.install_requirements
            when: install_requirements|bool

        pre_tasks:
          - name: Include vars
            ansible.builtin.include_vars: "{{ path_to_vars_file }}.yaml"
            when: path_to_vars_file is defined

          - ansible.builtin.reboot:
            when: reboot_all|bool

        tasks:
          - name: Install vault ca certificate to local system from multiple instances
            ansible.builtin.include_role:
              name: sthings.base_os.install_configure_vault
              tasks_from: install-ca-auth
            vars:
              vault_url: "{{ vault_instance }}"
            loop: "{{ vault_instances }}"
            loop_control:
              loop_var: vault_instance
            when: vault_instances is defined

          - name: Send webhook to msteams
            ansible.builtin.include_role:
              name: sthings.base_os.create_send_webhook
            vars:
              summary_text: base-os-setup was executed
              msteams_url: "https://365sva.webhook.office.com/webhookb2/2f14a9f8-4736-46dd-9c8c-31547ec37180@0a65cb1e-37d5-41ff-980a-647d9d0e4f0b/IncomingWebhook/37a805a0a2624dc2ac1aedd7dec6ad49/dc3a27ed-396c-40b7-a9b2-f1a2b6b44efe"
              card_title: base-os-setup was executed
              act_image: "{{ logo_pic }}"
              act_title: "{{ quotes | random }}"
              act_text: "{{ quotes | random }}"
              os_facts: |
                base-os-setup was executed on "{{ ansible_fqdn }}"
              ms_teams_notification_type: "simple"
            tags: notify
            ignore_errors: true
            when: send_to_msteams|bool

  - name: install_configure_nerdctl
    play: |
      ---
      - hosts: "{{ target_host | default('all') }}"
        become: true
        vars:
          bin:
            nerdctl:
              bin_name: "nerdctl"
              bin_version: "1.7.6"
              check_bin_version_before_installing: true
              source_url: "https://github.com/containerd/nerdctl/releases/download/v1.7.6/nerdctl-full-1.7.6-linux-amd64.tar.gz"
              bin_to_copy: "."
              bin_dir: "/usr/local"
              to_remove: "*"
              version_cmd: " version"
              target_version: v1.7.6
              md5_checksum: "044b60cec5341a3cde7a091cc2f12aa7"

          systemd_services:
            - containerd
            - buildkit
        roles:
          - role: sthings.base_os.download_install_binary

        post_tasks:
          - name: Create a directory if it does not exist
            ansible.builtin.file:
              path: $HOME/bin
              state: directory
              mode: 0700

          - name: Copy nerdctl
            ansible.builtin.copy:
              src: "/usr/local/bin/nerdctl"
              dest: "/usr/local/bin"
              mode: 0755
              remote_src: true
              owner: root
            become: true

          - name: give root permissions to nerdctl + export path
            ansible.builtin.shell: |
              chmod +s /usr/local/bin/nerdctl
              export PATH=/usr/local/bin:$PATH

          - name: Put SELinux in permissive mode
            ansible.posix.selinux:
              policy: targeted
              state: permissive
            when: ansible_os_family == 'RedHat'

          - name: Enable systemd services
            ansible.builtin.systemd_service:
              name: "{{ item }}"
              enabled: true
              daemon_reload: true
              state: started
            become: true
            with_items:
              - "{{ systemd_services }}"

          - name: Put SELinux in enforcing mode
            ansible.posix.selinux:
              policy: targeted
              state: enforcing
            when: ansible_os_family == 'RedHat'

  - name: install_configure_podman
    play: |
      ---
      - hosts: "{{ target_host | default('all') }}"
        become: true

        roles:
          - role: sthings.base_os.install_configure_podman

  - name: install_configure_golang
    play: |
      ---
      - hosts: "{{ target_host | default('all') }}"
        become: true
        vars:
          golang_version: 1.22.2
          golang_checksum: 8672f483bfbd37e4b9f7655522e3739bfe66d3308d76a152a6d8c3a569e5362e
          source_url: "https://go.dev/dl/go1.22.2.linux-amd64.tar.gz"
          golang_install_dir: /usr/local
          go_checksum_type: "sha256"

          # USE WITH EXISTING USER
          go_username: sthings
          go_usergroup: sthings
          go_userhome: /home/sthings

        pre_tasks:
          - name: Check if Golang is already installed
            ansible.builtin.stat:
              path: "{{ golang_install_dir }}/go"
            register: check_golang

          - name: Get checksum of golang dir
            get_checksum:
              path: "{{ golang_install_dir }}/go"
              checksum_type: "{{ go_checksum_type }}"
            register: checksum_existing
            when: check_golang.stat.exists

        tasks:
          - name: Create golang users
            ansible.builtin.include_role:
              name: create-os-user
            vars:
              users: "{{ golang_users }}"
              groups_to_create: "{{ groups_golang }}"
            when: golang_users is defined

          - name: Unarchive Golang
            ansible.builtin.unarchive:
              src: "{{ source_url }}"
              dest: "{{ golang_install_dir }}/"
              mode: 0755
              validate_certs: false
              remote_src: true
            when: checksum_existing.checksum_value is not defined or golang_checksum != checksum_existing.checksum_value

          - name: Add golang exports for existing users to bashrc
            ansible.builtin.blockinfile:
              block: |
                export GOROOT=/usr/local/go
                export PATH=$GOROOT/bin:$PATH
                export GOPATH=$HOME/usr/local/go
                export PATH=$PATH:/usr/local/go/bin:$GOPATH/bin
              dest: "{{ go_userhome }}/.bashrc"
              owner: "{{ go_username }}"
              group: "{{ go_usergroup }}"
              marker_begin: "<!-- BEGIN GOLANG SETUP -->"
              marker_end: "<!-- END GOLANG SETUP -->"
              mode: 0644
              create: true
            when: go_username is defined and go_usergroup is defined and go_userhome is defined

  - name: download_install_binaries
    play: |
      ---
      - hosts: "{{ target_host | default('all') }}"
        become: true
        vars:
          download_dir: "/tmp/downloads"

        vars_files:
          - "{{ profile | default('dev') }}.yaml"

        roles:
          - role: sthings.base_os.download_install_binary

  - name: install_configure_docker
    play: |
      ---
      - hosts: "{{ target_host | default('all') }}"
        become: true
        vars:
          docker_install_compose: true
          install_kind: false
          #kind_version: 0.22.0
          #kubectl_version: 1.30.0

        roles:
          - role: sthings.base_os.install_configure_docker

  - name: create_users
    play: |
      ---
      - hosts: "{{ target_host | default('all') }}"
        gather_facts: true
        become: true
        vars_files:
          - "{{ profile | default('sthings-users') }}.yaml"

        roles:
          - role: sthings.base_os.create_os_user

vars:
  # - name: golang-users
  #   file: |
  #     ---
  #     # CREATE USER(S) FOR GOLANG INSTALL AND SET EXPORTS
  #     golang_users:
  #       - username: bill
  #         name: bill user
  #         group: golang
  #         uid: 1020
  #         home: /home/bill
  #         profile: |
  #           alias ll='ls -ahl'
  #           export GOROOT=/usr/local/go
  #           export PATH=$GOROOT/bin:$PATH
  #           export GOPATH=/home/bill/usr/local/go
  #           export PATH=$PATH:/usr/local/go/bin:$GOPATH/bin
  #         enable_ssh_tcp_forwarding: true
  #         password: "!"

  #     groups_golang:
  #       - name: golang
  #         gid: 31000

  - name: sthings-users
    file: |
      ---
      users:
        - username: rke
          name: rke user
          groups: ['{{ admin_group }}', 'k8s-admins']
          uid: 1005
          home: /home/rke
          profile: |
            alias ll='ls -ahl'
          generate_ssh_key: true
          enable_ssh_tcp_forwarding: true

  - name: dev
    file: |
      ---
      bin:
        velero:
          bin_name: "velero"
          bin_version: "1.13.2"
          check_bin_version_before_installing: true
          source_url: "https://github.com/vmware-tanzu/velero/releases/download/v1.13.2/velero-v1.13.2-linux-amd64.tar.gz"
          bin_to_copy: "velero-v1.13.2-linux-amd64/velero"
          to_remove: "velero-v1.13.2-linux-amd64"
          bin_dir: "/usr/local/bin"
          version_cmd: " version --client-only"
          target_version: v1.13.2
          #md5_checksum: "30ab57f9520ae2318ab28eefbc81728c"
        terraform:
          bin_name: "terraform"
          bin_version: "1.8.3"
          check_bin_version_before_installing: true
          source_url: "https://releases.hashicorp.com/terraform/1.8.0/terraform_1.8.3_linux_amd64.zip"
          bin_to_copy: "terraform"
          to_remove: "terraform"
          bin_dir: "/usr/local/bin"
          version_cmd: " --version"
          target_version: v1.8.3
          #md5_checksum: "2c6638e53cf5474c4d1363c17e8653ef"
        helm:
          bin_name: "helm"
          bin_version: "3.15.0"
          check_bin_version_before_installing: true
          source_url: "https://get.helm.sh/helm-v3.15.0-linux-amd64.tar.gz"
          bin_to_copy: "linux-amd64/helm"
          to_remove: "linux-amd64"
          bin_dir: "/usr/local/bin"
          version_cmd: " version"
          target_version: v3.15.0
          #md5_checksum: "8dd2ecdbb70ef4e3a55083e8d5ebf352"
        kubectl:
          bin_name: "kubectl"
          bin_version: "1.30.1"
          check_bin_version_before_installing: true
          source_url: "https://dl.k8s.io/v1.30.1/bin/linux/amd64/kubectl"
          bin_to_copy: "kubectl"
          to_remove: "kubectl"
          bin_dir: "/usr/local/bin"
          version_cmd: " version --client"
          target_version: v1.30.1
          #md5_checksum: "07b43208389cbc779941b94a05cf89bc"
        packer:
          bin_name: "packer"
          bin_version: "1.10.3"
          check_bin_version_before_installing: true
          source_url: "https://releases.hashicorp.com/packer/1.10.3/packer_1.10.3_linux_amd64.zip"
          bin_to_copy: "packer"
          to_remove: "packer"
          bin_dir: "/usr/local/bin"
          version_cmd: " --version"
          target_version: v1.10.2
          #md5_checksum: "374f22185f1f8cb25bc53187a2154ef0"
        k9s:
          bin_name: "k9s"
          bin_version: "0.32.4"
          check_bin_version_before_installing: true
          source_url: "https://github.com/derailed/k9s/releases/download/v0.32.4/k9s_Linux_amd64.tar.gz"
          bin_to_copy: "k9s"
          to_remove: "k9s"
          bin_dir: "/usr/local/bin"
          version_cmd: " version --short"
          target_version: v0.32.4
          md5_checksum: "04ba6f524a433f8ceb9095c4c8292240"
