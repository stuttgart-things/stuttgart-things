---
name: base_os
version: 0.4.1
namespace: sthings
requirements: |
  roles:
    - src: https://github.com/stuttgart-things/download-install-binary.git
      scm: git
      version: 2024.05.24
    - src: https://github.com/stuttgart-things/create-os-user.git
      scm: git
      version: 2024.05.03
    - src: https://github.com/stuttgart-things/install-requirements.git
      scm: git
      version: 2024.05.11
    - src: https://github.com/stuttgart-things/manage-filesystem.git
      scm: git
      version: 2024.05.15
    - src: https://github.com/stuttgart-things/install-configure-vault.git
      scm: git
      version: 2022.01.01
    - src: https://github.com/stuttgart-things/create-send-webhook.git
      scm: git
      version: 2022.01.01
    - src: https://github.com/stuttgart-things/manage-proxmox-resources.git
      scm: git
      version: 2024.05.27

playbooks:
  - name: setup
    play: |
      ---
      - hosts: "{{ target_host | default('all') }}"
        become: true
        gather_facts: true

        vars:
          manage_filesystem: true
          update_packages: true
          install_requirements: true
          install_motd: true
          reboot_all: false
          username: sthings
          lvm_home_sizing: "15%"
          lvm_root_sizing: "35%"
          lvm_var_sizing: "50%"
          send_to_msteams: true
          msteams_webhook_url: "https://365sva.webhook.office.com/webhookb2/2f14a9f8-4736-46dd-9c8c-31547ec37180@0a65cb1e-37d5-41ff-980a-647d9d0e4f0b/IncomingWebhook/37a805a0a2624dc2ac1aedd7dec6ad49/dc3a27ed-396c-40b7-a9b2-f1a2b6b44efe"
          reboot_all: false
          vault_instances:
            - https://vault.tiab.labda.sva.de:8200
            - https://vault.labul.sva.de:8200
            - https://vault-vsphere.labul.sva.de:8200
            - https://vault-pve.labul.sva.de:8200
            - https://vault-vsphere.tiab.labda.sva.de:8200

        roles:
          - role: sthings.base_os.manage_filesystem
            when: manage_filesystem|bool

          - role: sthings.base_os.install_requirements
            when: install_requirements|bool

        pre_tasks:
          - name: Include vars
            ansible.builtin.include_vars: "{{ path_to_vars_file }}.yaml"
            when: path_to_vars_file is defined

          - ansible.builtin.reboot:
            when: reboot_all|bool

        tasks:
          - name: Install vault ca certificate to local system from multiple instances
            ansible.builtin.include_role:
              name: sthings.base_os.install_configure_vault
              tasks_from: install-ca-auth
            vars:
              vault_url: "{{ vault_instance }}"
            loop: "{{ vault_instances }}"
            loop_control:
              loop_var: vault_instance
            when: vault_instances is defined

          - name: Send webhook to msteams
            ansible.builtin.include_role:
              name: sthings.base_os.create_send_webhook
            vars:
              summary_text: base-os-setup was executed
              msteams_url: "https://365sva.webhook.office.com/webhookb2/2f14a9f8-4736-46dd-9c8c-31547ec37180@0a65cb1e-37d5-41ff-980a-647d9d0e4f0b/IncomingWebhook/37a805a0a2624dc2ac1aedd7dec6ad49/dc3a27ed-396c-40b7-a9b2-f1a2b6b44efe"
              card_title: base-os-setup was executed
              act_image: "{{ logo_pic }}"
              act_title: "{{ quotes | random }}"
              act_text: "{{ quotes | random }}"
              os_facts: |
                base-os-setup was executed on "{{ ansible_fqdn }}"
              ms_teams_notification_type: "simple"
            tags: notify
            ignore_errors: true
            when: send_to_msteams|bool

  - name: ansible
    play: |
      ---
      - hosts: "{{ target_host | default('all') }}"
        become: true
        gather_facts: true

        vars:
          update_packages: true
          ansible_username: sthings
          python_modules:
            - name: ansible
              version: 9.6.0
            - name: kubernetes
              version: 29.0.0
            - name: openshift
              version: 0.13.2
            - name: hvac[parser]
              version: 2.2.0
            - name: pyvmomi
              version: 8.0.2.0.1

        roles:
          - install-requirements

        post_tasks:
          - name: Download requirements file from git
            uri:
              url: https://raw.githubusercontent.com/stuttgart-things/stuttgart-things/main/ansible/requirements.yaml
              dest: /tmp/requirements.yaml

          - name: Install requirements
            ansible.builtin.shell: |
              ansible --version
              ansible-galaxy install -r /tmp/requirements.yaml -f
            become_user: "{{ ansible_username }}"

  - name: golang
    play: |
      ---
      - hosts: "{{ target_host | default('all') }}"
        become: true
        vars:
          golang_version: 1.22.3
          golang_checksum: 5fb8b3ed4a78a8eab444dfcb472b8c07a06980dcaee62ce3645edd6d130004c6
          source_url: "https://go.dev/dl/go1.22.3.linux-amd64.tar.gz"
          golang_install_dir: /usr/local
          go_checksum_type: "sha256"

          # USE WITH EXISTING USER
          go_username: sthings
          go_usergroup: sthings
          go_userhome: /home/sthings

          bin:
            golangci-lint:
              bin_name: golangci-lint
              bin_version: 1.58.1
              check_bin_version_before_installing: true
              source_url: "https://github.com/golangci/golangci-lint/releases/download/v1.58.1/golangci-lint-1.58.1-linux-amd64.tar.gz"
              bin_to_copy: golangci-lint-1.58.1-linux-amd64/golangci-lint
              to_remove: golangci-lint-1.58.1-linux-amd64.tar.gz
              bin_dir: "/usr/local/bin"
              version_cmd: "-- version"
              target_version: 1.58.1
            goreleaser:
              bin_name: goreleaser
              bin_version: v1.26.1
              check_bin_version_before_installing: true
              source_url: "https://github.com/goreleaser/goreleaser/releases/download/v1.26.1/goreleaser_Linux_x86_64.tar.gz"
              bin_to_copy: goreleaser
              to_remove: goreleaser_Linux_x86_64.tar.gz
              bin_dir: "/usr/local/bin"
              version_cmd: "-- version"
              target_version: v1.26.1

        pre_tasks:
          - name: Check if Golang is already installed
            ansible.builtin.stat:
              path: "{{ golang_install_dir }}/go"
            register: check_golang

          - name: Get checksum of golang dir
            sthings.base_os.get_checksum:
              path: "{{ golang_install_dir }}/go"
              checksum_type: "{{ go_checksum_type }}"
            register: checksum_existing
            when: check_golang.stat.exists

          - name: Create golang users
            ansible.builtin.include_role:
              name: create-os-user
            vars:
              users: "{{ golang_users }}"
              groups_to_create: "{{ groups_golang }}"
            when: golang_users is defined

          - name: Unarchive Golang
            ansible.builtin.unarchive:
              src: "{{ source_url }}"
              dest: "{{ golang_install_dir }}/"
              mode: 0755
              validate_certs: false
              remote_src: true
            when: checksum_existing.checksum_value is not defined or golang_checksum != checksum_existing.checksum_value

          - name: Add golang exports for existing users to bashrc
            ansible.builtin.blockinfile:
              block: |
                export GOROOT=/usr/local/go
                export PATH=$GOROOT/bin:$PATH
                export GOPATH=$HOME/usr/local/go
                export PATH=$PATH:/usr/local/go/bin:$GOPATH/bin
              dest: "{{ go_userhome }}/.bashrc"
              owner: "{{ go_username }}"
              group: "{{ go_usergroup }}"
              marker_begin: "<!-- BEGIN GOLANG SETUP -->"
              marker_end: "<!-- END GOLANG SETUP -->"
              mode: 0644
              create: true
            when: go_username is defined and go_usergroup is defined and go_userhome is defined

        post_tasks:
          - name: Install addons
            ansible.builtin.shell: |
              ./go install github.com/spf13/cobra-cli@v1.3.0
            args:
              chdir: "{{ golang_install_dir }}/go/bin/"

        roles:
          - role: sthings.base_os.download_install_binary

  - name: binaries
    play: |
      ---
      - hosts: "{{ target_host | default('all') }}"
        become: true
        vars:
          download_dir: "/tmp/downloads"

        vars_files:
          - "{{ profile | default('dev') }}.yaml"

        roles:
          - role: sthings.base_os.download_install_binary

  - name: users
    play: |
      ---
      - hosts: "{{ target_host | default('all') }}"
        gather_facts: true
        become: true
        vars_files:
          - "{{ profile | default('users') }}.yaml"

        roles:
          - role: sthings.base_os.create_os_user

  - name: rename_proxmox_vm
    play: |
      ---
      - hosts: "{{ target_host | default('all') }}"
        vars:
          vault_approle_id: "{{ lookup('env', 'VAULT_ROLE_ID') }}"
          vault_approle_secret: "{{ lookup('env', 'VAULT_SECRET_ID') }}"
          vault_url: "{{ lookup('env', 'VAULT_ADDR') }}"

          pve_cluster_url: "{{ lookup('community.hashi_vault.hashi_vault', 'secret=cloud/data/pve:cluster_url validate_certs=false auth_method=approle role_id={{ vault_approle_id }} secret_id={{ vault_approle_secret }} url={{ vault_url }}') }}"
          pve_api_user: "{{ lookup('community.hashi_vault.hashi_vault', 'secret=cloud/data/pve:api_user validate_certs=false auth_method=approle role_id={{ vault_approle_id }} secret_id={{ vault_approle_secret }} url={{ vault_url }}') }}"
          pve_api_password: "{{ lookup('community.hashi_vault.hashi_vault', 'secret=cloud/data/pve:api_password validate_certs=false auth_method=approle role_id={{ vault_approle_id }} secret_id={{ vault_approle_secret }} url={{ vault_url }}') }}"
          pve_node: sthings-pve1

          pve_bulk_rename_vms:
            - current_vm_name: "{{ vmname_old }}"
              expected_vm_name: "{{ vmname_new }}"
              node: "{{ pve_node }}"

        roles:
          - role: sthings.base_os.manage_proxmox_resources

  - name: delete_proxmox_vm
    play: |
      ---
      - hosts: "{{ target_host | default('all') }}"
        vars:
          vault_approle_id: "{{ lookup('env', 'VAULT_ROLE_ID') }}"
          vault_approle_secret: "{{ lookup('env', 'VAULT_SECRET_ID') }}"
          vault_url: "{{ lookup('env', 'VAULT_ADDR') }}"

          pve_cluster_url: "{{ lookup('community.hashi_vault.hashi_vault', 'secret=cloud/data/pve:cluster_url validate_certs=false auth_method=approle role_id={{ vault_approle_id }} secret_id={{ vault_approle_secret }} url={{ vault_url }}') }}"
          pve_api_user: "{{ lookup('community.hashi_vault.hashi_vault', 'secret=cloud/data/pve:api_user validate_certs=false auth_method=approle role_id={{ vault_approle_id }} secret_id={{ vault_approle_secret }} url={{ vault_url }}') }}"
          pve_api_password: "{{ lookup('community.hashi_vault.hashi_vault', 'secret=cloud/data/pve:api_password validate_certs=false auth_method=approle role_id={{ vault_approle_id }} secret_id={{ vault_approle_secret }} url={{ vault_url }}') }}"
          pve_node: sthings-pve1

          pve_bulk_delete_vms:
            - name: "{{ vmname_delete }}"
              node: "{{ pve_node }}"

        roles:
          - role: sthings.base_os.manage_proxmox_resources

vars:
  - name: users
    file: |
      ---
      users:
        - username: rke
          name: rke user
          groups: ['{{ admin_group }}']
          uid: 1005
          home: /home/rke
          profile: |
            alias ll='ls -ahl'
          generate_ssh_key: true
          enable_ssh_tcp_forwarding: true

  - name: dev
    file: |
      ---
      bin:
        gh:
          bin_name: gh
          bin_version: "2.49.2"
          check_bin_version_before_installing: true
          source_url: "https://github.com/cli/cli/releases/download/v2.49.2/gh_2.49.2_linux_amd64.tar.gz"
          bin_to_copy: gh_2.49.2_linux_amd64/bin/gh
          to_remove: gh_2.49.2_linux_amd64.tar.gz
          bin_dir: "/usr/local/bin"
          version_cmd: "-- version"
          target_version: 2.49.2
        task:
          bin_name: task
          bin_version: "v3.37.2"
          check_bin_version_before_installing: true
          source_url: "https://github.com/go-task/task/releases/download/v3.37.2/task_linux_amd64.tar.gz"
          bin_to_copy: task
          to_remove: task_linux_amd64.tar.gz
          bin_dir: "/usr/local/bin"
          version_cmd: "-- version"
          target_version: v3.37.2
        terraform:
          bin_name: "terraform"
          bin_version: "1.8.4"
          check_bin_version_before_installing: true
          source_url: "https://releases.hashicorp.com/terraform/1.8.3/terraform_1.8.4_linux_amd64.zip"
          bin_to_copy: "terraform"
          to_remove: "terraform"
          bin_dir: "/usr/local/bin"
          version_cmd: " --version"
          target_version: v1.8.4
        helm:
          bin_name: "helm"
          bin_version: "3.15.1"
          check_bin_version_before_installing: true
          source_url: "https://get.helm.sh/helm-v3.15.0-linux-amd64.tar.gz"
          bin_to_copy: "linux-amd64/helm"
          to_remove: "linux-amd64"
          bin_dir: "/usr/local/bin"
          version_cmd: " version"
          target_version: v3.15.0
          #md5_checksum: "8dd2ecdbb70ef4e3a55083e8d5ebf352"
        kubectl:
          bin_name: "kubectl"
          bin_version: "1.30.1"
          check_bin_version_before_installing: true
          source_url: "https://dl.k8s.io/v1.30.1/bin/linux/amd64/kubectl"
          bin_to_copy: "kubectl"
          to_remove: "kubectl"
          bin_dir: "/usr/local/bin"
          version_cmd: " version --client"
          target_version: v1.30.1
          #md5_checksum: "07b43208389cbc779941b94a05cf89bc"
        packer:
          bin_name: "packer"
          bin_version: "1.10.3"
          check_bin_version_before_installing: true
          source_url: "https://releases.hashicorp.com/packer/1.10.3/packer_1.10.3_linux_amd64.zip"
          bin_to_copy: "packer"
          to_remove: "packer"
          bin_dir: "/usr/local/bin"
          version_cmd: " --version"
          target_version: v1.10.2
          #md5_checksum: "374f22185f1f8cb25bc53187a2154ef0"
        k9s:
          bin_name: "k9s"
          bin_version: "0.32.4"
          check_bin_version_before_installing: true
          source_url: "https://github.com/derailed/k9s/releases/download/v0.32.4/k9s_Linux_amd64.tar.gz"
          bin_to_copy: "k9s"
          to_remove: "k9s"
          bin_dir: "/usr/local/bin"
          version_cmd: " version --short"
          target_version: v0.32.4
          #md5_checksum: "04ba6f524a433f8ceb9095c4c8292240"
        velero:
          bin_name: velero
          bin_version: 1.13.2
          check_bin_version_before_installing: true
          source_url: "https://github.com/vmware-tanzu/velero/releases/download/v1.13.2/velero-v1.13.2-linux-amd64.tar.gz"
          bin_to_copy: "velero-v1.13.2-linux-amd64/velero"
          to_remove: "velero-v1.13.2-linux-amd64"
          bin_dir: "/usr/local/bin"
          version_cmd: " version --client-only"
          target_version: v1.13.2
          #md5_checksum: "30ab57f9520ae2318ab28eefbc81728c"
        yq:
          bin_name: yq
          bin_version: 4.43.1
          check_bin_version_before_installing: true
          source_url: "https://github.com/mikefarah/yq/releases/download/v4.43.1/yq_linux_amd64.tar.gz"
          bin_to_copy: yq
          to_remove: ""
          bin_dir: "/usr/bin"
          version_cmd: " version"
          target_version: 4.43.1
        machineshop:
          bin_name: machineshop
          bin_version: 1.9.9
          check_bin_version_before_installing: true
          source_url: https://github.com/stuttgart-things/machineshop/releases/download/1.9.9/machineshop_Linux_x86_64.tar.gz
          bin_to_copy: machineshop
          to_remove: ""
          bin_dir: "/usr/bin"
          version_cmd: " version"
          target_version: 1.9.9

modules:
  - name: get_checksum
    file: |
      #!/usr/bin/python

      DOCUMENTATION = '''
      ---
      module: get_checksum

      short_description:
        - Generate a checksum for a directory/file
        - References:
              Took some source code from https://pypi.org/project/checksumdir and converted into ansible module


      version_added: "2.6"

      description:
          - "Generate a checksum for a directory/file"

      options:
        path:
          description:
            - The full path of the file/object to get the facts of.
          required: true
        follow_links:
          description:
            - Whether to follow symlinks.
            - Only works for directory
          type: bool
          default: 'no'
        checksum_type:
          description:
            - Which checksum algorithm to use to apply to the path
          choices: ['md5', 'sha1', 'sha256', 'sha512']
          default: 'md5'
          type: str
        exclude_files:
          description:
            - The files to be excluded in the path for the checksum calculation
            - Only works for directory
          default: None
          type: list
        ignore_hidden:
          description:
            - If hidden files should be included
            - Only works for directory
          default: False
          type: bool
        exclude_extensions:
          description:
            - If certain file extensions should be ignored
            - Only works for directory
          default: None
          type: list

      author:
          - Rahul K
      '''

      EXAMPLES = '''
      # Generate Checksum Value for a directory/file
      # Default to checksum_type of md5
      - get_checksum:
          path: path/to/(directory/file)
        register:  checksum

      - debug
          msg:  'Checksum_value is {{ checksum.checksum_value }}'

      # Generate the Checksum Value with certain checksum_algorithm
      - get_checksum:
          path: path/to/directory
          checksum_type: sha1/md5/sha256/sha512
        register: checksum

      # Generate checksum value of directory excluding files
      - get_checksum:
            path: path/to/directory
            exclude_files:
              - test1
              - test2
        register: checksum

      # Generate checksum value of directory excluding certain extensions
      - get_checksum:
            path: path/to/directory
            exclude_extensions:
                - py
                - git
        register: checksum

      # Generate checksum value of directory ignoring hidden files
      - get_checksum:
            path: path/to/directory
            ignore_hidden: yes
        register: checksum

      # If the contents of sym links needs to be included
      - get_checksum:
            path: path/to/directory
            follow_symlinks: yes
        register: checksum
      '''

      RETURN = '''
      checksum_value:
          description: The checksum value generated
          type: str
      '''

      # Importing the required modules for calculating the checksum
      import os
      import hashlib
      import re

      # Importing the Ansible Module
      from ansible.module_utils.basic import *

      # Defining the methods from the hashlib library for each hashing algorithm
      HASH_FUNCS = {
          'md5': hashlib.md5,
          'sha1': hashlib.sha1,
          'sha256': hashlib.sha256,
          'sha512': hashlib.sha512
      }

      # Method to perform hashing of a directory with extra options
      def dirhash(dirname, hashfunc, exclude_files, ignore_hidden,
                  followlinks, exclude_extensions):
          hash_func = HASH_FUNCS.get(hashfunc)
          hashvalues = []
          for root, dirs, files in os.walk(dirname, topdown=True, followlinks=followlinks):
              if ignore_hidden:
                  if not re.search(r'/\.', root):
                      hashvalues.extend(
                          [_filehash(os.path.join(root, f),
                                    hash_func) for f in files if not
                          f.startswith('.') and not re.search(r'/\.', f)
                          and f not in exclude_files
                          and f.split('.')[-1:][0] not in exclude_extensions
                          ]
                      )
              else:
                  hashvalues.extend(
                      [
                          _filehash(os.path.join(root, f), hash_func)
                          for f in files
                          if f not in exclude_files
                          and f.split('.')[-1:][0] not in exclude_extensions
                      ]
                  )
          return _reduce_hash(hashvalues, hash_func)

      # Method to perform the hash of a single file
      def _filehash(filepath, hashfunc):
          hasher = hashfunc()
          blocksize = 64 * 1024
          with open(filepath, 'rb') as fp:
              while True:
                  data = fp.read(blocksize)
                  if not data:
                      break
                  hasher.update(data)
          return hasher.hexdigest()

      # Method to reduce the individual hashes of each file
      def _reduce_hash(hashlist, hashfunc):
          hasher = hashfunc()
          for hashvalue in sorted(hashlist):
              hasher.update(hashvalue.encode('utf-8'))
          return hasher.hexdigest()

      # Method for getting arguments and running the main logic
      def run_module():
          # define the available arguments/parameters that a user can pass to
          # the module
          module_args = dict(
              path=dict(required=True, type='path'),
              checksum_type=dict(type='str', default='md5',
                            choices=['md5', 'sha1', 'sha256', 'sha512']),
              exclude_files=dict(type='list', default=[]),
              exclude_extensions=dict(type='list', default=[]),
              ignore_hidden=dict(type='bool', default=False),
              follow_links=dict(type='bool', default=False),
          )

          # seed the result dict in the object
          # we primarily care about changed and state
          # change is if this module effectively modified the target
          # state will include any data that you want your module to pass back
          # for consumption, for example, in a subsequent task
          result = dict(
              changed=False,
              checksum_value=''
          )

          # the AnsibleModule object will be our abstraction working with Ansible
          # this includes instantiation, a couple of common attr would be the
          # args/params passed to the execution, as well as if the module
          # supports check mode
          module = AnsibleModule(
              argument_spec=module_args,
              supports_check_mode=True
          )

          # if the user is working with this module in only check mode we do not
          # want to make any changes to the environment, just return the current
          # state with no modifications
          if module.check_mode:
              return result

          # Store the passed arguments in variables
          path = module.params['path']
          checksum_type = module.params['checksum_type']
          exclude_files = module.params['exclude_files']
          exclude_extensions = module.params['exclude_extensions']
          ignore_hidden = module.params['ignore_hidden']
          follow_links = module.params['follow_links']

      # Check if the path is a directory and calculate checksum
          if os.path.isdir(path):
              result['checksum_value'] = dirhash(path, checksum_type, exclude_files,
                                        ignore_hidden, follow_links, exclude_extensions)

      # Check if the path is a file and calculate the checksum
          elif os.path.isfile(path):
              hasher = HASH_FUNCS.get(checksum_type)
              result['checksum_value'] = _filehash(path, hasher)

      # Fail if its neither a file nor a directory
          else:
              result['failed'] = True
              error = '{} is not a valid path.'.format(path)
              module.fail_json(msg=error, meta=result)

          # in the event of a successful module execution, you will want to
          # simple AnsibleModule.exit_json(), passing the key/value results
          result['changed'] = True
          module.exit_json(**result)

      def main():
          run_module()

      if __name__ == '__main__':
          main()