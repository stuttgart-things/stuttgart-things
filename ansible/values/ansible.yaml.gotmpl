---
configmaps:
  ansible:
    {{- if not .Values.createInventory }}
    inventory.yaml: |
      {{- range $_, $item := .Values.inventory.groups }}
      {{- range $k, $v := . }}
      [{{ $k }}]
      {{- range $_, $path := $v }}
      {{ $path }}
      {{- end }}
      {{- end }}
      {{- end }}
      {{- range $_, $item := .Values.inventory.vars }}
      {{- range $k, $v := . }}
      [{{ $k }}]
      {{- range $_, $path := $v }}
      {{ $path }}
      {{- end }}
      {{- end }}
      {{- end }}
    {{- end }}

    play.yaml: |
      ---
      - name: Prepare env
        ansible.builtin.import_playbook: prepare-env.yaml
        when: prepare_env|bool

      - name: Execute baseos playbook
        ansible.builtin.import_playbook: baseos-setup.yaml
        when: execute_baseos|bool

      - name: Execute {{`{{printf "%q" "{{ target_play }}.yaml" }}`}}
        ansible.builtin.import_playbook: {{`{{printf "%q" "{{ target_play }}.yaml" }}`}}

    prepare-env.yaml: |
      ---
      - hosts: localhost
        become: false

        vars:
          home_dir: {{`{{printf "%q" "{{ lookup('env','HOME') }}" }}`}}
          targets: {{`{{printf "%q" "{{ lookup('env','TARGETS') }}" }}`}}
          targets_list: {{`{{printf "%q" "{{ targets.split(';') }}" }}`}}
          inv_path: {{`{{printf "%q" "{{ lookup('env','INV_PATH') }}" }}`}}
          vault_approle_id: {{`{{printf "%q" "{{ lookup('env', 'VAULT_ROLE_ID') }}" }}`}}
          vault_approle_secret: {{`{{printf "%q" "{{ lookup('env', 'VAULT_SECRET_ID') }}" }}`}}
          vault_url: {{`{{printf "%q" "{{ lookup('env', 'VAULT_ADDR') }}" }}`}}
          ssh_key: {{`{{printf "%q" "{{ lookup('community.hashi_vault.hashi_vault', 'secret=ssh/data/sthings:privateKey validate_certs=false auth_method=approle role_id={{ vault_approle_id }} secret_id={{ vault_approle_secret }} url={{ vault_url }}') }}" }}`}}
          create_inventory: {{ .Values.createInventory }}

        tasks:
          - name: Create hosts
            ansible.builtin.set_fact:
              target_hosts: {{`{{printf "%q" "{{ targets_list | join('\n') }}" }}`}}

          - name: Write vars on inv file
            ansible.builtin.blockinfile:
              path: {{`{{printf "%q" "{{ inv_path }}" }}`}}
              block: |
                [all]
                {{`{{ "{{ target_hosts }}" }}`}}

                [all:vars]
                ansible_user=sthings
                host_key_checking=false
            when: create_inventory|bool

          - name: Copy inventory
            ansible.builtin.copy:
              src: inventory.yaml
              dest: {{`{{printf "%q" "{{ inv_path }}" }}`}}
            when: not create_inventory

          - name: Creating ssh directory
            ansible.builtin.file:
              path: {{`{{printf "%q" "{{ home_dir }}/.ssh/" }}`}}
              state: directory

          - name: Creating ssh private key file
            ansible.builtin.copy:
              dest: {{`{{printf "%q" "{{ home_dir }}/.ssh/id_rsa" }}`}}
              content: {{`{{printf "%q" "{{ ssh_key | b64decode }}" }}`}}
              mode: '0600'

          - ansible.builtin.meta: refresh_inventory

          - name: Wait for SSH
            ansible.builtin.wait_for:
              host: {{`{{printf "%q" "{{ item }}" }}`}}
              port: 22
              delay: 1
              timeout: 1200
              sleep: 10
            with_items:
              - {{`{{printf "%q" "{{ groups['all'] }}" }}`}}

    baseos-setup.yaml: |
      - hosts: all
        become: true
        gather_facts: true

        vars:
          manage_filesystem: {{ .Values.manageFilesystem }}
          update_packages: {{ .Values.updatePackages }}
          install_requirements: {{ .Values.installRequirements }}
          install_motd: {{ .Values.installMotd }}
          username: {{ .Values.ansibleUser }}
          lvm_home_sizing: "{{ .Values.lvmHomeSizing }}"
          lvm_root_sizing: "{{ .Values.lvmRootSizing }}"
          lvm_var_sizing: "{{ .Values.lvmVarSizing }}"
          send_to_msteams: {{ .Values.sendToMSteams }}
          msteams_webhook_url: "{{ .Values.msTeamsWebhookUrl }}"
          reboot_all: {{ .Values.rebootAll }}

          vault_instances:
            {{- range .Values.installCAs }}
            - {{ . }}
            {{- end }}

        roles:
          - role: manage-filesystem
            when: manage_filesystem|bool

          - role: install-requirements
            when: install_requirements|bool

        pre_tasks:
          - ansible.builtin.reboot:
            when: reboot_all|bool

        tasks:
          - name: Install vault ca certificate to local system from multiple instances
            ansible.builtin.include_role:
              name: install-configure-vault
              tasks_from: install-ca-auth
            vars:
              vault_url: {{`{{printf "%q" "{{ vault_instance }}" }}`}}
            loop: {{`{{printf "%q" "{{ vault_instances }}" }}`}}
            loop_control:
              loop_var: vault_instance
            when: vault_instances is defined

          - name: Send webhook to msteams
            ansible.builtin.include_role:
              name: create-send-webhook
            vars:
              summary_text: base-os-setup was executed
              msteams_url: "{{ .Values.msTeamsWebhookUrl }}"
              card_title: base-os-setup was executed
              act_image: {{`{{printf "%q" "{{ logo_pic }}" }}`}}
              act_title: {{`{{printf "%q" "{{ quotes | random }}" }}`}}
              act_text: {{`{{printf "%q" "{{ quotes | random }}" }}`}}
              os_facts: |
                base-os-setup was executed on {{`{{printf "%q" "{{ ansible_fqdn }}" }}`}}
              ms_teams_notification_type: "simple"
            tags: notify
            ignore_errors: true
            when: send_to_msteams|bool

    configure-rke-node.yaml: |
      ---
      - hosts: all
        become: true
        gather_facts: true
        vars:
          install_docker: false
        roles:
          - configure-rke-node

    deploy-upgrade-rke.yaml: |
      ---
      - hosts: all
        become: true

        vars:
          rke_version: {{ .Values.rkeVersion }}
          rke2_k8s_version: {{ .Values.k8sVersion }}
          rke2_release_kind: {{ .Values.rke2ReleaseKind }}
          enable_ingress_controller: {{ .Values.enableIngressController }}
          cluster_setup: {{ .Values.clusterSetup }}
          rke2_fetched_kubeconfig_path: {{ .Values.rke2FetchedKubeconfigPath }}

        roles:
          - role: deploy-configure-rke

        {{- if .Values.installFlux }}
        post_tasks:
          - name: Copy flux secrets to RKE2 manifests
            ansible.builtin.copy:
              src: /home/nonroot/flux/
              dest: /var/lib/rancher/rke2/server/manifests/
            when: inventory_hostname in groups['initial_master_node']
        {{- end }}

      - hosts: localhost
        become: false
        vars:
          vault_approle_id: {{`{{printf "%q" "{{ lookup('env', 'VAULT_ROLE_ID') }}" }}`}}
          vault_approle_secret: {{`{{printf "%q" "{{ lookup('env', 'VAULT_SECRET_ID') }}" }}`}}
          vault_url: {{`{{printf "%q" "{{ lookup('env', 'VAULT_ADDR') }}" }}`}}
          upload_kubeconfig_vault: {{ .Values.uploadKubeconfigVault }}
          rke2_fetched_kubeconfig_path: {{ .Values.rke2FetchedKubeconfigPath }}

        tasks:
          - name: Write secret to vault using key value V2 engine
            community.hashi_vault.vault_write:
              auth_method: approle
              url: {{`{{printf "%q" "{{ vault_url }}" }}`}}
              role_id: {{`{{printf "%q" "{{ vault_approle_id }}" }}`}}
              secret_id: {{`{{printf "%q" "{{ vault_approle_secret }}" }}`}}
              validate_certs: false
              path: {{ .Values.secretPathKubeconfig }}
              data:
                data:
                  kubeconfig: {{`{{printf "%q" "{{ lookup('ansible.builtin.file', rke2_fetched_kubeconfig_path) | b64encode }}" }}`}}
            when: upload_kubeconfig_vault|bool

      - hosts: localhost
        become: false
        vars:
          vault_approle_id: {{`{{printf "%q" "{{ lookup('env', 'VAULT_ROLE_ID') }}" }}`}}
          vault_approle_secret: {{`{{printf "%q" "{{ lookup('env', 'VAULT_SECRET_ID') }}" }}`}}
          vault_url: {{`{{printf "%q" "{{ lookup('env', 'VAULT_ADDR') }}" }}`}}
          github_token: {{`{{printf "%q" "{{ lookup('community.hashi_vault.hashi_vault', 'secret=apps/data/github:token validate_certs=false auth_method=approle role_id={{ vault_approle_id }} secret_id={{ vault_approle_secret }} url={{ vault_url }}') }}" }}`}}
          kubeconfig: {{`{{printf "%q" "{{ lookup('community.hashi_vault.hashi_vault', 'secret=kubeconfigs/data/dev8:kubeconfig validate_certs=false auth_method=approle role_id={{ vault_approle_id }} secret_id={{ vault_approle_secret }} url={{ vault_url }}') }}" }}`}}
          kubeconfig_path: /home/nonroot/kubeconfig
          install_flux: {{ .Values.installFlux }}

        tasks:
          - name: Copy kubeconfig using inline content
            ansible.builtin.copy:
              content: {{`{{printf "%q" "{{ kubeconfig|b64decode }}" }}`}}
              dest: {{`{{printf "%q" "{{ kubeconfig_path }}" }}`}}
              remote_src: yes
            when: install_flux|bool

          - name: Flux bootstrap
            ansible.builtin.shell: |
              flux bootstrap github --owner=stuttgart-things --repository=stuttgart-things --path=clusters/{{ .Values.lab }}/{{ .Values.cloud }}/{{ .Values.clusterName }}
            environment:
              KUBECONFIG: {{`{{printf "%q" "{{ kubeconfig_path }}" }}`}}
              GITHUB_TOKEN: {{`{{printf "%q" "{{ github_token }}" }}`}}
            when: install_flux|bool

    power-dns.yaml: |
      ---
      - hosts: localhost
        gather_facts: no

        vars:
          vault_approle_id: {{`{{printf "%q" "{{ lookup('env', 'VAULT_ROLE_ID') }}" }}`}}
          vault_approle_secret: {{`{{printf "%q" "{{ lookup('env', 'VAULT_SECRET_ID') }}" }}`}}
          vault_url: {{`{{printf "%q" "{{ lookup('env', 'VAULT_ADDR') }}" }}`}}

          pdns_api_executor: localhost
          pdns_create_record:
            - fqdn: "*.{{ .Values.hostname }}.{{ .Values.entryZone }}"
              content: "{{ .Values.ipAddress }}"
              record_type: A
              zone: "{{ .Values.entryZone }}"
              state: present
              ttl: 60
              note: deployed w/ ansible container

          pdns_url: {{ .Values.pdnsUrl }}
          pdns_token: {{`{{printf "%q" "{{ lookup('community.hashi_vault.hashi_vault', 'secret=apps/data/powerdns:token validate_certs=false auth_method=approle role_id={{ vault_approle_id }} secret_id={{ vault_approle_secret }} url={{ vault_url }}') }}" }}`}}

        roles:
          - install-configure-powerdns

    install-configure-nfs.yaml: |
      ---
      - hosts: all
        gather_facts: true
        become: true
        vars:
          kind: server
          permanent: true
          nfs_manage_firewall: true
          nfs_export_path:
            - /var/nfs/k8s

        roles:
          - install-configure-nfs
{{/*
    create-downstream-cluster.yaml: |
      ---
      - hosts: all
        vars:
          rancher_api_url: https://rancher-things.app.4sthings.tiab.ssc.sva.de/v3
          cluster_name: dev8
          rancher_access_key: token-bwbmg
          rancher_secret_key: b2vd6qxl4vhzwqf2j8h97mm68h7sjs97r4mvm2wqfpcldlnb7mf5d2

        tasks:
          - name: Get cluster information
            ansible.builtin.uri:
              validate_certs: false
              url: "{{ rancher_api_url }}/clusters?name={{ cluster_name }}"
              user: "{{ rancher_access_key }}"
              password: "{{ rancher_secret_key }}"
              body_format: json
              method: GET
              force_basic_auth: yes
              headers:
                Content-Type: "application/json"
            register: cluster_info

          - name: Show clusterid
            ansible.builtin.debug:
              var:
                cluster_info.json.data[0].id

          - name: Set clusterid
            ansible.builtin.set_fact:
              cluster_id: "{{ cluster_info.json.data[0].id }}"

          - name: Get cluster registration tokens
            ansible.builtin.uri:
              validate_certs: false
              url: "{{ rancher_api_url }}/clusters/{{ cluster_id }}/clusterregistrationtokens?sort=insecureCommand"
              user: "{{ rancher_access_key }}"
              password: "{{ rancher_secret_key }}"
              body_format: json
              method: GET
              force_basic_auth: yes
              headers:
                  Content-Type: "application/json"
            register: cluster_registration_tokens

          - name: Get node Command
            ansible.builtin.debug:
              var: cluster_registration_tokens.json.data[0].nodeCommand

          - name: Set node Command
            ansible.builtin.set_fact:
              node_command: "{{ cluster_registration_tokens.json.data[0].nodeCommand }}"

          - name: Execute node command
            ansible.builtin.shell: |
              {{ cluster_registration_tokens.json.data[0].nodeCommand }} --worker

*/}}