---
apiVersion: v1
kind: Secret
metadata:
  name: scr
  namespace: argocd
  labels:
    argocd.argoproj.io/secret-type: repository
stringData:
  enableOCI: "true"
  name: scr
  type: helm
  url: ${SCR_HOSTNAME}
  username: ${SCR_USERNAME}
  password: ${SCR_PASSWORD}
---
apiVersion: v1
kind: Secret
metadata:
  name: stuttgart-things-gcr
  namespace: argocd
  labels:
    argocd.argoproj.io/secret-type: repository
stringData:
  enableOCI: "true"
  name: scr
  type: helm
  url: eu.gcr.io/stuttgart-things
---
apiVersion: v1
kind: Secret
metadata:
  name: stuttgart-things
  namespace: argocd
  annotations:
    managed-by: argocd.argoproj.io
  labels:
    argocd.argoproj.io/secret-type: repository
data:
  username: ""
  password: ""
  project: ""
  type: Z2l0
  url: aHR0cHM6Ly9naXRodWIuY29tL3N0dXR0Z2FydC10aGluZ3Mvc3R1dHRnYXJ0LXRoaW5ncy5naXQ=
type: Opaque
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: argocd-cm
  namespace: default
  labels:
    app.kubernetes.io/component: server
    app.kubernetes.io/instance: argocd-deployment
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: argo-cd-cm
    app.kubernetes.io/part-of: argocd
data:
  admin.enabled: "true"
  application.instanceLabelKey: argocd.argoproj.io/instance
  exec.enabled: "false"
  server.rbac.log.enforce.enable: "false"
  timeout.hard.reconciliation: 0s
  timeout.reconciliation: 180s
  resource.customizations.health.argoproj.io_Application: |
        hs = {}
        hs.status = "Progressing"
        hs.message = ""
        if obj.status ~= nil then
          if obj.status.health ~= nil then
            hs.status = obj.status.health.status
            if obj.status.health.message ~= nil then
              hs.message = obj.status.health.message
            end
          end
        end
        return hs
  configManagementPlugins: |
    - name: argocd-vault-plugin
      generate:
        command: ["argocd-vault-plugin"]
        args: ["generate", "./"]
    - name: argocd-vault-plugin-helm
      init:
        command: ["bash", "-c"]
        args: ['helm dependency update']
      generate:
        command: ["bash", "-c"]
        args: ['helm template "${ARGOCD_APP_NAME}" -f <(echo "${ARGOCD_ENV_HELM_VALUES}") --include-crds . -n ${ARGOCD_APP_NAMESPACE} | argocd-vault-plugin generate -']
    - name: argocd-vault-plugin-kustomize
      generate:
        command: ["sh", "-c"]
        args: ["kustomize build . > all.yaml && argocd-vault-plugin generate all.yaml"]
