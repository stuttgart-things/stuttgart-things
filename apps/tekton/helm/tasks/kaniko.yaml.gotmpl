tasks:
  kaniko:
    namespace: {{ .Release.Namespace }}
    labels:
      app.kubernetes.io/version: "0.6"
    annotations:
      tekton.dev/pipelines.minVersion: "0.45.0"
      tekton.dev/categories: Image Build
      tekton.dev/tags: image-build
      tekton.dev/displayName: "Build and upload container image using Kaniko"
      tekton.dev/platforms: "linux/amd64"
    description: build Dockerfile w/ kaniko and push to a registry
    workspaces:
      source:
        description: holds the context and Dockerfile
        optional: false
      dockerconfig:
        description: includes a docker `config.json`
        optional: true
        mountPath: /kaniko/.docker
    results:
      IMAGE_DIGEST:
        description: digest of the image just built
      IMAGE_URL:
        description: url of the image just built.
    params:
      IMAGE:
        description: name (reference) of the image to build
      TAG:
        description: name (reference) of the image to build
      REGISTRY:
        description: registry FROM (base image)
        default: scr.tiab.labda.sva.de
      DOCKERFILE:
        description: Path to the Dockerfile to build
        default: ./Dockerfile
      CONTEXT:
        description: the build context used by Kaniko
        default: ./
      SUBDIRECTORY:
        description: subdirectory of workspace
        default: ""
      EXTRA_ARGS:
        type: array
      BUILDER_IMAGE:
        description: the image on which builds will run (default is v1.5.1)
        default: gcr.io/kaniko-project/executor:v1.5.1@sha256:c6166717f7fe0b7da44908c986137ecfeab21f31ec3992f6e128fff8a94be8a5
    steps:
      build-and-push:
        workingDir: $(workspaces.source.path)/$(params.SUBDIRECTORY)
        image: $(params.BUILDER_IMAGE)
        securityContext:
          runAsNonRoot: false
          runAsUser: 0
        args:
          - $(params.EXTRA_ARGS)
          - --dockerfile=$(params.DOCKERFILE)
          - --context=$(workspaces.source.path)/$(params.CONTEXT) # The user does not need to care the workspace and the source.
          - --destination=$(params.IMAGE):$(params.TAG)
          - --destination=$(params.IMAGE):latest
          - --build-arg=REGISTRY=$(params.REGISTRY)
          - --digest-file=$(results.IMAGE_DIGEST.path)
          - --insecure
      write-url:
        image: docker.io/library/bash:5.1.4@sha256:b208215a4655538be652b2769d82e576bc4d0a2bb132144c060efc5be8c3f5d6
        script: |
          set -e
          image="$(params.IMAGE)"
          echo -n "${image}" | tee "$(results.IMAGE_URL.path)"
